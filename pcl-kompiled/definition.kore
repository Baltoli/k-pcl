[topCellInitializer{}(LblinitGeneratedTopCell{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)")]

module BASIC-K
    sort SortK{} []
    sort SortKItem{} []
endmodule
[]
module KSEQ
    import BASIC-K []
    symbol kseq{}(SortKItem{}, SortK{}) : SortK{} [constructor{}(), functional{}()]
    symbol dotk{}() : SortK{} [constructor{}(), functional{}()]
    symbol append{}(SortK{}, SortK{}) : SortK{} [function{}()]
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, dotk{}()),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                TAIL:SortK{},
                \top{SortK{}}()
            )
        )
    ) []
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, kseq{}(K:SortKItem{}, KS:SortK{})),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                kseq{}(K:SortKItem{}, append{}(KS:SortK{}, TAIL:SortK{})),
                \top{SortK{}}()
            )
        )
    ) []
endmodule
[]
module INJ
    symbol inj{From, To}(From) : To [sortInjection{}()]
    axiom {S1, S2, S3, R} \equals{S3, R}(inj{S2, S3}(inj{S1, S2}(T:S1)), inj{S1, S3}(T:S1)) [simplification{}()]
endmodule
[]
module K
    import KSEQ []
    import INJ []
    alias weakExistsFinally{A}(A) : A where weakExistsFinally{A}(@X:A) := @X:A []
    alias weakAlwaysFinally{A}(A) : A where weakAlwaysFinally{A}(@X:A) := @X:A []
    alias allPathGlobally{A}(A) : A where allPathGlobally{A}(@X:A) := @X:A []
endmodule
[]

module PCL

// imports
  import K []

// sorts
  sort SortGeneratedTopCell{} []
  hooked-sort SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblListItem{}()), concat{}(Lbl'Unds'List'Unds'{}()), unit{}(Lbl'Stop'List{}()), hook{}("LIST.List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(624,3,624,31)")]
  sort SortStartupCell{} []
  sort SortStartupCellOpt{} []
  sort SortGeneratedTopCellFragment{} []
  sort SortOutputCellOpt{} []
  sort SortThreadCellFragment{} []
  sort SortIOError{} []
  sort SortExternalsCell{} []
  sort SortThreadsCellFragment{} []
  hooked-sort SortThreadCellMap{} [element{}(LblThreadCellMapItem{}()), cellCollection{}(), concat{}(Lbl'Unds'ThreadCellMap'Unds'{}()), unit{}(Lbl'Stop'ThreadCellMap{}()), hook{}("MAP.Map")]
  sort SortExp{} []
  sort SortEnvCellOpt{} []
  hooked-sort SortFloat{} [hook{}("FLOAT.Float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1164,3,1164,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]
  sort SortThreadsCell{} []
  sort SortIOInt{} []
  sort SortEnvCell{} []
  sort SortInputCell{} []
  sort SortId{} []
  sort SortStream{} []
  sort SortOutputCell{} []
  sort SortExternal{} []
  sort SortIOFile{} []
  hooked-sort SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), concat{}(Lbl'Unds'Map'Unds'{}()), unit{}(Lbl'Stop'Map{}()), hook{}("MAP.Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(218,3,218,28)")]
  sort SortThreadsCellOpt{} []
  sort SortChannel{} [hasDomainValues{}()]
  hooked-sort SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(881,3,881,28)"), hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]
  sort SortKCellOpt{} []
  hooked-sort SortSet{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblSetItem{}()), concat{}(Lbl'Unds'Set'Unds'{}()), unit{}(Lbl'Stop'Set{}()), hook{}("SET.Set"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(499,3,499,28)")]
  sort SortKCell{} []
  hooked-sort SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(779,3,779,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hook{}("BOOL.Bool"), hasDomainValues{}()]
  sort SortExternals{} []
  sort SortIdCellOpt{} []
  sort SortInputCellOpt{} []
  sort SortThreadCell{} []
  sort SortProcess{} []
  sort SortExternalsCellOpt{} []
  sort SortKConfigVar{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(40,3,40,27)"), token{}(), hasDomainValues{}()]
  sort SortVariable{} [hasDomainValues{}()]
  sort SortIOString{} []
  hooked-sort SortString{} [hook{}("STRING.String"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1377,3,1377,37)"), hasDomainValues{}()]
  sort SortProgram{} []
  sort SortIdCell{} []
  sort SortGeneratedCounterCell{} []

// symbols
  symbol Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(27,22,27,40)"), left{}(), format{}("%c!%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'E2BIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#E2BIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2183,22,2183,54)"), left{}(), format{}("%c#E2BIG%r"), injective{}()]
  symbol Lbl'Hash'EACCES{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EACCES"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2184,22,2184,56)"), left{}(), format{}("%c#EACCES%r"), injective{}()]
  symbol Lbl'Hash'EADDRINUSE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EADDRINUSE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2233,22,2233,64)"), left{}(), format{}("%c#EADDRINUSE%r"), injective{}()]
  symbol Lbl'Hash'EADDRNOTAVAIL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EADDRNOTAVAIL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2234,22,2234,70)"), left{}(), format{}("%c#EADDRNOTAVAIL%r"), injective{}()]
  symbol Lbl'Hash'EAFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EAFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2232,22,2232,68)"), left{}(), format{}("%c#EAFNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EAGAIN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EAGAIN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2185,22,2185,56)"), left{}(), format{}("%c#EAGAIN%r"), injective{}()]
  symbol Lbl'Hash'EALREADY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EALREADY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2222,22,2222,60)"), left{}(), format{}("%c#EALREADY%r"), injective{}()]
  symbol Lbl'Hash'EBADF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EBADF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2186,22,2186,54)"), left{}(), format{}("%c#EBADF%r"), injective{}()]
  symbol Lbl'Hash'EBUSY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EBUSY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2187,22,2187,54)"), left{}(), format{}("%c#EBUSY%r"), injective{}()]
  symbol Lbl'Hash'ECHILD{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECHILD"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2188,22,2188,56)"), left{}(), format{}("%c#ECHILD%r"), injective{}()]
  symbol Lbl'Hash'ECONNABORTED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNABORTED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2238,22,2238,68)"), left{}(), format{}("%c#ECONNABORTED%r"), injective{}()]
  symbol Lbl'Hash'ECONNREFUSED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNREFUSED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2246,22,2246,68)"), left{}(), format{}("%c#ECONNREFUSED%r"), injective{}()]
  symbol Lbl'Hash'ECONNRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2239,22,2239,64)"), left{}(), format{}("%c#ECONNRESET%r"), injective{}()]
  symbol Lbl'Hash'EDEADLK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDEADLK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2189,22,2189,58)"), left{}(), format{}("%c#EDEADLK%r"), injective{}()]
  symbol Lbl'Hash'EDESTADDRREQ{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDESTADDRREQ"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2224,22,2224,68)"), left{}(), format{}("%c#EDESTADDRREQ%r"), injective{}()]
  symbol Lbl'Hash'EDOM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDOM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2190,22,2190,52)"), left{}(), format{}("%c#EDOM%r"), injective{}()]
  symbol Lbl'Hash'EEXIST{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EEXIST"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2191,22,2191,56)"), left{}(), format{}("%c#EEXIST%r"), injective{}()]
  symbol Lbl'Hash'EFAULT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EFAULT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2192,22,2192,56)"), left{}(), format{}("%c#EFAULT%r"), injective{}()]
  symbol Lbl'Hash'EFBIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EFBIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2193,22,2193,54)"), left{}(), format{}("%c#EFBIG%r"), injective{}()]
  symbol Lbl'Hash'EHOSTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EHOSTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2247,22,2247,62)"), left{}(), format{}("%c#EHOSTDOWN%r"), injective{}()]
  symbol Lbl'Hash'EHOSTUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EHOSTUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2248,22,2248,68)"), left{}(), format{}("%c#EHOSTUNREACH%r"), injective{}()]
  symbol Lbl'Hash'EINPROGRESS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINPROGRESS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2221,22,2221,66)"), left{}(), format{}("%c#EINPROGRESS%r"), injective{}()]
  symbol Lbl'Hash'EINTR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINTR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2194,22,2194,54)"), left{}(), format{}("%c#EINTR%r"), injective{}()]
  symbol Lbl'Hash'EINVAL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINVAL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2195,22,2195,56)"), left{}(), format{}("%c#EINVAL%r"), injective{}()]
  symbol Lbl'Hash'EIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2196,22,2196,50)"), left{}(), format{}("%c#EIO%r"), injective{}()]
  symbol Lbl'Hash'EISCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EISCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2241,22,2241,58)"), left{}(), format{}("%c#EISCONN%r"), injective{}()]
  symbol Lbl'Hash'EISDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EISDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2197,22,2197,56)"), left{}(), format{}("%c#EISDIR%r"), injective{}()]
  symbol Lbl'Hash'ELOOP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ELOOP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2249,22,2249,54)"), left{}(), format{}("%c#ELOOP%r"), injective{}()]
  symbol Lbl'Hash'EMFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2198,22,2198,56)"), left{}(), format{}("%c#EMFILE%r"), injective{}()]
  symbol Lbl'Hash'EMLINK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMLINK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2199,22,2199,56)"), left{}(), format{}("%c#EMLINK%r"), injective{}()]
  symbol Lbl'Hash'EMSGSIZE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMSGSIZE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2225,22,2225,60)"), left{}(), format{}("%c#EMSGSIZE%r"), injective{}()]
  symbol Lbl'Hash'ENAMETOOLONG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENAMETOOLONG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2200,22,2200,68)"), left{}(), format{}("%c#ENAMETOOLONG%r"), injective{}()]
  symbol Lbl'Hash'ENETDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2235,22,2235,60)"), left{}(), format{}("%c#ENETDOWN%r"), injective{}()]
  symbol Lbl'Hash'ENETRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2237,22,2237,62)"), left{}(), format{}("%c#ENETRESET%r"), injective{}()]
  symbol Lbl'Hash'ENETUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2236,22,2236,66)"), left{}(), format{}("%c#ENETUNREACH%r"), injective{}()]
  symbol Lbl'Hash'ENFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2201,22,2201,56)"), left{}(), format{}("%c#ENFILE%r"), injective{}()]
  symbol Lbl'Hash'ENOBUFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOBUFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2240,22,2240,58)"), left{}(), format{}("%c#ENOBUFS%r"), injective{}()]
  symbol Lbl'Hash'ENODEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENODEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2202,22,2202,56)"), left{}(), format{}("%c#ENODEV%r"), injective{}()]
  symbol Lbl'Hash'ENOENT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOENT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2203,22,2203,56)"), left{}(), format{}("%c#ENOENT%r"), injective{}()]
  symbol Lbl'Hash'ENOEXEC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOEXEC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2204,22,2204,58)"), left{}(), format{}("%c#ENOEXEC%r"), injective{}()]
  symbol Lbl'Hash'ENOLCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOLCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2205,22,2205,56)"), left{}(), format{}("%c#ENOLCK%r"), injective{}()]
  symbol Lbl'Hash'ENOMEM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOMEM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2206,22,2206,56)"), left{}(), format{}("%c#ENOMEM%r"), injective{}()]
  symbol Lbl'Hash'ENOPROTOOPT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOPROTOOPT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2227,22,2227,66)"), left{}(), format{}("%c#ENOPROTOOPT%r"), injective{}()]
  symbol Lbl'Hash'ENOSPC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOSPC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2207,22,2207,56)"), left{}(), format{}("%c#ENOSPC%r"), injective{}()]
  symbol Lbl'Hash'ENOSYS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOSYS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2208,22,2208,56)"), left{}(), format{}("%c#ENOSYS%r"), injective{}()]
  symbol Lbl'Hash'ENOTCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2242,22,2242,60)"), left{}(), format{}("%c#ENOTCONN%r"), injective{}()]
  symbol Lbl'Hash'ENOTDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2209,22,2209,58)"), left{}(), format{}("%c#ENOTDIR%r"), injective{}()]
  symbol Lbl'Hash'ENOTEMPTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTEMPTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2210,22,2210,62)"), left{}(), format{}("%c#ENOTEMPTY%r"), injective{}()]
  symbol Lbl'Hash'ENOTSOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTSOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2223,22,2223,60)"), left{}(), format{}("%c#ENOTSOCK%r"), injective{}()]
  symbol Lbl'Hash'ENOTTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2211,22,2211,56)"), left{}(), format{}("%c#ENOTTY%r"), injective{}()]
  symbol Lbl'Hash'ENXIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENXIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2212,22,2212,54)"), left{}(), format{}("%c#ENXIO%r"), injective{}()]
  symbol Lbl'Hash'EOF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2182,22,2182,50)"), left{}(), format{}("%c#EOF%r"), injective{}()]
  symbol Lbl'Hash'EOPNOTSUPP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOPNOTSUPP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2230,22,2230,64)"), left{}(), format{}("%c#EOPNOTSUPP%r"), injective{}()]
  symbol Lbl'Hash'EOVERFLOW{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOVERFLOW"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2250,22,2250,62)"), left{}(), format{}("%c#EOVERFLOW%r"), injective{}()]
  symbol Lbl'Hash'EPERM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPERM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2213,22,2213,54)"), left{}(), format{}("%c#EPERM%r"), injective{}()]
  symbol Lbl'Hash'EPFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2231,22,2231,68)"), left{}(), format{}("%c#EPFNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2214,22,2214,54)"), left{}(), format{}("%c#EPIPE%r"), injective{}()]
  symbol Lbl'Hash'EPROTONOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPROTONOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2228,22,2228,74)"), left{}(), format{}("%c#EPROTONOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EPROTOTYPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPROTOTYPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2226,22,2226,64)"), left{}(), format{}("%c#EPROTOTYPE%r"), injective{}()]
  symbol Lbl'Hash'ERANGE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ERANGE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2215,22,2215,56)"), left{}(), format{}("%c#ERANGE%r"), injective{}()]
  symbol Lbl'Hash'EROFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EROFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2216,22,2216,54)"), left{}(), format{}("%c#EROFS%r"), injective{}()]
  symbol Lbl'Hash'ESHUTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESHUTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2243,22,2243,62)"), left{}(), format{}("%c#ESHUTDOWN%r"), injective{}()]
  symbol Lbl'Hash'ESOCKTNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESOCKTNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2229,22,2229,74)"), left{}(), format{}("%c#ESOCKTNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'ESPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2217,22,2217,56)"), left{}(), format{}("%c#ESPIPE%r"), injective{}()]
  symbol Lbl'Hash'ESRCH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESRCH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2218,22,2218,54)"), left{}(), format{}("%c#ESRCH%r"), injective{}()]
  symbol Lbl'Hash'ETIMEDOUT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ETIMEDOUT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2245,22,2245,62)"), left{}(), format{}("%c#ETIMEDOUT%r"), injective{}()]
  symbol Lbl'Hash'ETOOMANYREFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ETOOMANYREFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2244,22,2244,68)"), left{}(), format{}("%c#ETOOMANYREFS%r"), injective{}()]
  symbol Lbl'Hash'EWOULDBLOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EWOULDBLOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2220,22,2220,66)"), left{}(), format{}("%c#EWOULDBLOCK%r"), injective{}()]
  symbol Lbl'Hash'EXDEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EXDEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2219,22,2219,54)"), left{}(), format{}("%c#EXDEV%r"), injective{}()]
  hooked-symbol Lbl'Hash'accept'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.accept"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2348,20,2348,80)"), left{}(), format{}("%c#accept%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'List{}() : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), klabel{}("#argv"), hook{}("KREFLECTION.argv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2127,19,2127,60)"), left{}(), format{}("%c#argv%r %c(%r %c)%r"), function{}()]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(SortK{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#buffer"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2431,21,2431,30)"), left{}(), format{}("%c#buffer%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.close"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2322,16,2322,74)"), left{}(), format{}("%c#close%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'K{}() : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), impure{}(), hook{}("KREFLECTION.configuration"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2116,16,2116,83)"), left{}(), format{}("%c#configuration%r"), function{}()]
  symbol Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer#send(_,_)_PCL-HOOKS_Process_Channel_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}() : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("111"), left{}(), format{}("%c#freezer-__PCL-SYNTAX_Exp_Exp0_%r %c(%r %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(SortK{}, SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("110101"), left{}(), format{}("%c#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process0_%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(SortK{}, SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("110101"), left{}(), format{}("%c#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process1_%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_*__PCL-SYNTAX_Exp_Exp_Exp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_*__PCL-SYNTAX_Exp_Exp_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_+__PCL-SYNTAX_Exp_Exp_Exp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_+__PCL-SYNTAX_Exp_Exp_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_-__PCL-SYNTAX_Exp_Exp_Exp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_-__PCL-SYNTAX_Exp_Exp_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_/__PCL-SYNTAX_Exp_Exp_Exp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_/__PCL-SYNTAX_Exp_Exp_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezerin_(_)_PCL-SYNTAX_Process_Id_Variable0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(SortK{}, SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("110101"), left{}(), format{}("%c#freezerlet_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process1_%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp1_%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#fresh"), hook{}("KREFLECTION.fresh"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2118,20,2118,79)"), left{}(), format{}("%c#fresh%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'freshChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'Int{}(SortInt{}) : SortChannel{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1101"), freshGenerator{}(), klabel{}("#freshChannel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,22,103,83)"), left{}(), format{}("%c#freshChannel%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.getc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2303,20,2303,88)"), left{}(), format{}("%c#getc%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'Unds'K'Unds'String{}(SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#getenv"), hook{}("KREFLECTION.getenv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2121,16,2121,75)"), left{}(), format{}("%c#getenv%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(SortBool{}, SortSort, SortSort) : SortSort [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), smt-hook{}("ite"), right{}(), terminals{}("1010101"), hook{}("KEQUAL.ite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2059,26,2059,125)"), left{}(), format{}("%c#if%r %1 %c#then%r %2 %c#else%r %3 %c#fi%r"), function{}()]
  symbol Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(SortInt{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#istream"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2432,21,2432,33)"), left{}(), format{}("%c#istream%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'kompiledDirectory'LParRParUnds'K-REFLECTION'Unds'String{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), klabel{}("#kompiledDirectory"), hook{}("KREFLECTION.kompiledDir"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2123,21,2123,82)"), left{}(), format{}("%c#kompiledDirectory%r %c(%r %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.lock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2334,16,2334,90)"), left{}(), format{}("%c#lock%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'logToFile{}(SortString{}, SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), returnsUnit{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("110101"), impure{}(), klabel{}("#logToFile"), hook{}("IO.log"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2419,16,2419,120)"), left{}(), format{}("%c#logToFile%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'mkstemp'LParUndsRParUnds'K-IO'Unds'IOFile'Unds'String{}(SortString{}) : SortIOFile{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#mkstemp"), hook{}("IO.mkstemp"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2396,21,2396,83)"), left{}(), format{}("%c#mkstemp%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'noParse{}(SortString{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#noParse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2133,22,2133,73)"), left{}(), format{}("%c#noParse%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(SortString{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2273,20,2273,58)"), left{}(), format{}("%c#open%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.open"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2274,18,2274,96)"), left{}(), format{}("%c#open%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(SortInt{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#ostream"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2434,21,2434,33)"), left{}(), format{}("%c#ostream%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#parseInput"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2433,21,2433,47)"), left{}(), format{}("%c#parseInput%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'parseKAST'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortSort}(SortString{}) : SortSort [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#parseKAST"), hook{}("KREFLECTION.parseKAST"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2132,26,2132,83)"), left{}(), format{}("%c#parseKAST%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'parseKORE'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortSort}(SortString{}) : SortSort [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#parseKORE"), hook{}("KREFLECTION.parseKORE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2130,26,2130,83)"), left{}(), format{}("%c#parseKORE%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.putc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2313,16,2313,92)"), left{}(), format{}("%c#putc%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(SortVariable{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#read"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(76,22,76,36)"), left{}(), format{}("%c#read%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'Unds'IOString'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortIOString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.read"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2304,23,2304,98)"), left{}(), format{}("%c#read%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(SortChannel{}, SortVariable{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#recv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(62,22,62,45)"), left{}(), format{}("%c#recv%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#remove"), hook{}("IO.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2407,16,2407,84)"), left{}(), format{}("%c#remove%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.seek"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2289,16,2289,87)"), left{}(), format{}("%c#seek%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.seekEnd"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2290,16,2290,95)"), left{}(), format{}("%c#seekEnd%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(SortChannel{}, SortExp{}) : SortProcess{} [functional{}(), constructor{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#send"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(61,22,61,52)"), left{}(), format{}("%c#send%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'shutdownWrite'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.shutdownWrite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2349,16,2349,90)"), left{}(), format{}("%c#shutdownWrite%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'K{}(SortK{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#sort"), hook{}("KREFLECTION.sort"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2117,21,2117,63)"), left{}(), format{}("%c#sort%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2369,19,2369,50)"), left{}(), format{}("%c#stderr%r"), function{}()]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2367,18,2367,50)"), left{}(), format{}("%c#stdin%r"), function{}()]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2368,19,2368,50)"), left{}(), format{}("%c#stdout%r"), function{}()]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#system"), hook{}("IO.system"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2385,20,2385,73)"), left{}(), format{}("%c#system%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'systemResult{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("#systemResult"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2386,20,2386,142)"), left{}(), format{}("%c#systemResult%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.tell"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2288,20,2288,76)"), left{}(), format{}("%c#tell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'tempFile{}(SortString{}, SortInt{}) : SortIOFile{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#tempFile"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2398,21,2398,92)"), left{}(), format{}("%c#tempFile%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'time'LParRParUnds'K-IO'Unds'Int{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), impure{}(), hook{}("IO.time"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2358,18,2358,66)"), left{}(), format{}("%c#time%r %c(%r %c)%r"), function{}()]
  symbol Lbl'Hash'unknownIOError{}(SortInt{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#unknownIOError"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2182,54,2182,89)"), left{}(), format{}("%c#unknownIOError%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.unlock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2335,16,2335,94)"), left{}(), format{}("%c#unlock%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'unparseKORE'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'Sort{SortSort}(SortSort) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#unparseKORE"), hook{}("KREFLECTION.printKORE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2131,28,2131,85)"), left{}(), format{}("%c#unparseKORE%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.write"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2314,16,2314,92)"), left{}(), format{}("%c#write%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(SortProcess{}, SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("10101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(25,22,25,48)"), left{}(), format{}("%c(%r %1 %c|%r %2 %c)%r"), injective{}()]
  symbol Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(SortExp{}) : SortExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), non-assoc{}(), priorities{}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(),Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(),Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(),Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), right{}(Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}()), terminals{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,18,14,48)"), left{}(Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}()), format{}("%c-%r %1"), injective{}()]
  hooked-symbol Lbl'Stop'List{}() : SortList{} [latex{}("\\dotCt{List}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), smtlib{}("smt_seq_nil"), terminals{}("1"), klabel{}(".List"), hook{}("LIST.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(648,19,648,146)"), left{}(), format{}("%c.List%r"), function{}()]
  symbol Lbl'Stop'List'LBraQuotUndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals'QuotRBraUnds'Externals{}() : SortExternals{} [functional{}(), constructor{}(), userList{}("+"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"___PCL-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,24,21,43)"), left{}(), format{}("%c.Externals%r"), injective{}()]
  hooked-symbol Lbl'Stop'Map{}() : SortMap{} [latex{}("\\dotCt{Map}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".Map"), hook{}("MAP.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(248,18,248,128)"), left{}(), format{}("%c.Map%r"), function{}()]
  hooked-symbol Lbl'Stop'Set{}() : SortSet{} [latex{}("\\dotCt{Set}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".Set"), hook{}("SET.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(528,18,528,122)"), left{}(), format{}("%c.Set%r"), function{}()]
  hooked-symbol Lbl'Stop'ThreadCellMap{}() : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("1"), hook{}("MAP.unit"), left{}(), format{}("%c.ThreadCellMap%r"), function{}()]
  symbol Lbl'-LT-'env'-GT-'{}(SortMap{}) : SortEnvCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("env"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<env>%r%i%n%1%d%n%c</env>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'externals'-GT-'{}(SortSet{}) : SortExternalsCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("externals"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<externals>%r%i%n%1%d%n%c</externals>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'generatedCounter'-GT-'{}(SortInt{}) : SortGeneratedCounterCell{} [functional{}(), constructor{}(), cellName{}("generatedCounter"), priorities{}(), right{}(), terminals{}("101"), left{}(), format{}("%c<generatedCounter>%r%i%n%1%d%n%c</generatedCounter>%r"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'{}(SortStartupCell{}, SortExternalsCell{}, SortThreadsCell{}, SortInputCell{}, SortGeneratedCounterCell{}, SortOutputCell{}) : SortGeneratedTopCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("generatedTop"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("10000001"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<generatedTop>%r%i%n%1%n%2%n%3%n%4%n%6%d%n%c</generatedTop>%r"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'-fragment{}(SortStartupCellOpt{}, SortExternalsCellOpt{}, SortThreadsCellOpt{}, SortInputCellOpt{}, SortOutputCellOpt{}) : SortGeneratedTopCellFragment{} [functional{}(), constructor{}(), cellFragment{}("GeneratedTopCell"), priorities{}(), right{}(), terminals{}("1000001"), left{}(), format{}("%c<generatedTop>-fragment%r %1 %2 %3 %4 %5 %c</generatedTop>-fragment%r"), injective{}()]
  symbol Lbl'-LT-'id'-GT-'{}(SortInt{}) : SortIdCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("id"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<id>%r%i%n%1%d%n%c</id>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'input'-GT-'{}(SortList{}) : SortInputCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("input"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), stream{}("stdin"), format{}("%c<input>%r%i%n%1%d%n%c</input>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("k"), maincell{}(), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<k>%r%i%n%1%d%n%c</k>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'output'-GT-'{}(SortList{}) : SortOutputCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("output"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), stream{}("stdout"), format{}("%c<output>%r%i%n%1%d%n%c</output>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'startup'-GT-'{}(SortK{}) : SortStartupCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("startup"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<startup>%r%i%n%1%d%n%c</startup>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'thread'-GT-'{}(SortIdCell{}, SortKCell{}, SortEnvCell{}) : SortThreadCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("thread"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("10001"), type{}("Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<thread>%r%i%n%1%n%2%n%3%d%n%c</thread>%r"), multiplicity{}("*"), injective{}(), cell{}()]
  symbol Lbl'-LT-'thread'-GT-'-fragment{}(SortIdCellOpt{}, SortKCellOpt{}, SortEnvCellOpt{}) : SortThreadCellFragment{} [functional{}(), constructor{}(), cellFragment{}("ThreadCell"), priorities{}(), right{}(), terminals{}("10001"), left{}(), format{}("%c<thread>-fragment%r %1 %2 %3 %c</thread>-fragment%r"), injective{}()]
  symbol Lbl'-LT-'threads'-GT-'{}(SortThreadCellMap{}) : SortThreadsCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cellName{}("threads"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(43,5,53,45)"), left{}(), format{}("%c<threads>%r%i%n%1%d%n%c</threads>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'threads'-GT-'-fragment{}(SortThreadCellMap{}) : SortThreadsCellFragment{} [functional{}(), constructor{}(), cellFragment{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("101"), left{}(), format{}("%c<threads>-fragment%r %1 %c</threads>-fragment%r"), injective{}()]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("Base2String"), hook{}("STRING.base2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1506,21,1506,98)"), left{}(), format{}("%cBase2String%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(SortBool{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Bool2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1456,21,1456,60)"), left{}(), format{}("%cBool2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(SortFloat{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Float2String"), hook{}("STRING.float2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1483,21,1483,105)"), left{}(), format{}("%cFloat2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("FloatFormat"), hook{}("STRING.floatFormat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1484,21,1484,121)"), left{}(), format{}("%cFloat2String%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Int2String"), hook{}("STRING.int2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1505,21,1505,103)"), left{}(), format{}("%cInt2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("0101"), klabel{}("List:get"), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(667,20,667,98)"), left{}(), format{}("%1 %c[%r %2 %c]%r"), function{}()]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("List:range"), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(714,19,714,119)"), left{}(), format{}("%crange%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblListItem{}(SortKItem{}) : SortList{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), smtlib{}("smt_seq_elem"), terminals{}("1101"), klabel{}("ListItem"), hook{}("LIST.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(656,19,656,136)"), left{}(), format{}("%cListItem%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortKItem{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("0101"), klabel{}("Map:lookup"), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(271,20,271,112)"), left{}(), format{}("%1 %c[%r %2 %c]%r"), function{}()]
  hooked-symbol LblMap'Coln'update{}(SortMap{}, SortKItem{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), prefer{}(), right{}(), terminals{}("010101"), klabel{}("Map:update"), hook{}("MAP.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,18,290,144)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %3 %c]%r"), function{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [latex{}("{#1}-_{\\it Set}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("Set:difference"), hook{}("SET.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(568,18,568,146)"), left{}(), format{}("%1 %c-Set%r %2"), function{}()]
  hooked-symbol LblSet'Coln'in{}(SortKItem{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("Set:in"), hook{}("SET.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(576,19,576,106)"), left{}(), format{}("%1 %cin%r %2"), function{}()]
  hooked-symbol LblSetItem{}(SortKItem{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("SetItem"), hook{}("SET.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(536,18,536,112)"), left{}(), format{}("%cSetItem%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("String2Base"), hook{}("STRING.string2base"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1507,21,1507,98)"), left{}(), format{}("%cString2Base%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1462,19,1462,48)"), left{}(), format{}("%cString2Bool%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING-COMMON'Unds'Float'Unds'String{}(SortString{}) : SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Float"), hook{}("STRING.string2float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1485,21,1485,93)"), left{}(), format{}("%cString2Float%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Int"), hook{}("STRING.string2int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1504,21,1504,91)"), left{}(), format{}("%cString2Int%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblStringToChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'String{}(SortString{}) : SortChannel{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("StringToChannel"), hook{}("STRING.string2token"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,22,102,94)"), left{}(), format{}("%cStringToChannel%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblThreadCellMap'Coln'in'Unds'keys{}(SortIdCell{}, SortThreadCellMap{}) : SortBool{} [functional{}(), priorities{}(), right{}(), terminals{}("01101"), hook{}("MAP.in_keys"), left{}(), format{}("%1 %cin_keys%r %c(%r %2 %c)%r"), function{}()]
  hooked-symbol LblThreadCellMapItem{}(SortIdCell{}, SortThreadCell{}) : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("110101"), hook{}("MAP.element"), left{}(), format{}("%2"), function{}()]
  symbol Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(SortExp{}, SortExp{}, SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), strict{}("1, 2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("10101101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,22,31,71)"), left{}(), format{}("%c[%r %1 %c=%r %2 %c]%r %c{%r %3 %c}%r"), injective{}()]
  hooked-symbol Lbl'UndsPerc'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("mod"), right{}(), terminals{}("010"), klabel{}("_%Int_"), hook{}("INT.tmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(929,18,929,170)"), left{}(Lbl'Unds'divInt'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}()), format{}("%1 %c%%Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsAnd-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("andInt"), terminals{}("010"), klabel{}("_&Int_"), hook{}("INT.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(940,18,940,182)"), left{}(Lbl'UndsAnd-'Int'Unds'{}()), format{}("%1 %c&Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsStar'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("*"), right{}(), terminals{}("010"), klabel{}("_*Int_"), hook{}("INT.mul"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(925,18,925,181)"), left{}(Lbl'Unds'divInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsStar'Int'Unds'{}()), format{}("%1 %c*Int%r %2"), function{}()]
  symbol Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(SortExp{}, SortExp{}) : SortExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(),Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,18,15,43)"), left{}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), format{}("%1 %c*%r %2"), injective{}()]
  hooked-symbol Lbl'UndsPlus'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), smt-hook{}("+"), right{}(), terminals{}("010"), klabel{}("_+Int_"), hook{}("INT.add"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(934,18,934,178)"), left{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), format{}("%1 %c+Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [latex{}("{#1}+_{\\scriptstyle\\it String}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1395,21,1395,139)"), left{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}()), format{}("%1 %c+String%r %2"), function{}()]
  symbol Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(SortExp{}, SortExp{}) : SortExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,18,17,43)"), left{}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), format{}("%1 %c+%r %2"), injective{}()]
  hooked-symbol Lbl'Unds'-Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), smt-hook{}("-"), right{}(), terminals{}("010"), klabel{}("_-Int_"), hook{}("INT.sub"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(935,18,935,178)"), left{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), format{}("%1 %c-Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [latex{}("{#1}-_{\\it Map}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("MAP.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,18,311,120)"), left{}(), format{}("%1 %c-Map%r %2"), function{}()]
  symbol Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(SortExp{}, SortExp{}) : SortExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,18,18,43)"), left{}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), format{}("%1 %c-%r %2"), injective{}()]
  symbol Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(SortProcess{}, SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(32,22,32,47)"), left{}(Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}()), format{}("%1 %c.%r %2"), injective{}()]
  hooked-symbol Lbl'UndsSlsh'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("div"), right{}(), terminals{}("010"), klabel{}("_/Int_"), hook{}("INT.tdiv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(928,18,928,172)"), left{}(Lbl'Unds'divInt'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}()), format{}("%1 %c/Int%r %2"), function{}()]
  symbol Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(SortExp{}, SortExp{}) : SortExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(),Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,18,16,43)"), left{}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}()), format{}("%1 %c/%r %2"), injective{}()]
  hooked-symbol Lbl'Unds-LT--LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("shlInt"), terminals{}("010"), klabel{}("_<<Int_"), hook{}("INT.shl"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(938,18,938,172)"), left{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}()), format{}("%1 %c<<Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("<="), right{}(), terminals{}("010"), klabel{}("_<=Int_"), hook{}("INT.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(996,19,996,176)"), left{}(Lbl'Unds-LT-Eqls'Int'Unds'{}()), format{}("%1 %c<=Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("MAP.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,19,383,91)"), left{}(), format{}("%1 %c<=Map%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("SET.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(585,19,585,85)"), left{}(), format{}("%1 %c<=Set%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1540,19,1540,82)"), left{}(), format{}("%1 %c<=String%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("<"), right{}(), terminals{}("010"), klabel{}("_<Int_"), hook{}("INT.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(997,19,997,171)"), left{}(Lbl'Unds-LT-'Int'Unds'{}()), format{}("%1 %c<Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1539,19,1539,82)"), left{}(), format{}("%1 %c<String%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=Bool_"), hook{}("BOOL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(820,19,820,132)"), left{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), format{}("%1 %c=/=Bool%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=Int_"), hook{}("INT.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1001,19,1001,188)"), left{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}()), format{}("%1 %c=/=Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{\\neq_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), notEqualEqualK{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),LblnotBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=K_"), hook{}("KEQUAL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2055,19,2055,170)"), left{}(Lbl'UndsEqlsSlshEqls'K'Unds'{}(),Lbl'UndsEqlsEqls'K'Unds'{}()), format{}("%1 %c=/=K%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1536,19,1536,94)"), left{}(Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}()), format{}("%1 %c=/=String%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("="), right{}(), terminals{}("010"), klabel{}("_==Bool_"), hook{}("BOOL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(819,19,819,124)"), left{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), format{}("%1 %c==Bool%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}("="), right{}(), terminals{}("010"), klabel{}("_==Int_"), hook{}("INT.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1000,19,1000,177)"), left{}(Lbl'UndsEqlsEqls'Int'Unds'{}()), format{}("%1 %c==Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{=_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),LblnotBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("="), right{}(), terminals{}("010"), equalEqualK{}(), klabel{}("_==K_"), hook{}("KEQUAL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2054,19,2054,156)"), left{}(Lbl'UndsEqlsEqls'K'Unds'{}(),Lbl'UndsEqlsSlshEqls'K'Unds'{}()), format{}("%1 %c==K%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1535,19,1535,88)"), left{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}()), format{}("%1 %c==String%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}(">="), right{}(), terminals{}("010"), klabel{}("_>=Int_"), hook{}("INT.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(998,19,998,176)"), left{}(Lbl'Unds-GT-Eqls'Int'Unds'{}()), format{}("%1 %c>=Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1542,19,1542,82)"), left{}(), format{}("%1 %c>=String%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT--GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("shrInt"), terminals{}("010"), klabel{}("_>>Int_"), hook{}("INT.shr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(937,18,937,172)"), left{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}()), format{}("%1 %c>>Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), smt-hook{}(">"), right{}(), terminals{}("010"), klabel{}("_>Int_"), hook{}("INT.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(999,19,999,171)"), left{}(Lbl'Unds-GT-'Int'Unds'{}()), format{}("%1 %c>Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1541,19,1541,82)"), left{}(), format{}("%1 %c>String%r %2"), function{}()]
  hooked-symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [unit{}(Lbl'Stop'List{}()), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblListItem{}()), symbol'Kywd'{}(), priorities{}(), right{}(), assoc{}(), smtlib{}("smt_seq_concat"), terminals{}("00"), klabel{}("_List_"), hook{}("LIST.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(640,19,640,192)"), left{}(Lbl'Unds'List'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [unit{}(Lbl'Stop'Map{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), symbol'Kywd'{}(), comm{}(), priorities{}(), right{}(), assoc{}(), terminals{}("00"), index{}("0"), klabel{}("_Map_"), hook{}("MAP.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(240,18,240,172)"), left{}(Lbl'Unds'Map'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [unit{}(Lbl'Stop'Set{}()), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblSetItem{}()), symbol'Kywd'{}(), idem{}(), comm{}(), priorities{}(), right{}(), assoc{}(), terminals{}("00"), klabel{}("_Set_"), hook{}("SET.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(520,18,520,176)"), left{}(Lbl'Unds'Set'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'ThreadCellMap'Unds'{}(SortThreadCellMap{}, SortThreadCellMap{}) : SortThreadCellMap{} [unit{}(Lbl'Stop'ThreadCellMap{}()), element{}(LblThreadCellMapItem{}()), comm{}(), priorities{}(), cellCollection{}(), right{}(), assoc{}(), terminals{}("00"), hook{}("MAP.concat"), left{}(), format{}("%1 %2"), avoid{}(), function{}(), wrapElement{}("<thread>")]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010101"), klabel{}("List:set"), hook{}("LIST.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(676,19,676,107)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %3 %c]%r"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010111"), klabel{}("_[_<-undef]"), hook{}("MAP.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(299,18,299,121)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %cundef%r %c]%r"), function{}()]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(SortMap{}, SortKItem{}, SortKItem{}) : SortKItem{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010110"), klabel{}("Map:lookupOrDefault"), hook{}("MAP.lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(281,20,281,138)"), left{}(), format{}("%1 %c[%r %2 %c]%r %corDefault%r %3"), function{}()]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUnds'{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("(mod (^ #1 #2) #3)"), right{}(), terminals{}("0100"), klabel{}("_^%Int__"), hook{}("INT.powmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(923,18,923,138)"), left{}(Lbl'UndsXor-Perc'Int'UndsUnds'{}(),Lbl'UndsXor-'Int'Unds'{}()), format{}("%1 %c^%%Int%r %2 %3"), function{}()]
  hooked-symbol Lbl'UndsXor-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("^"), right{}(), terminals{}("010"), klabel{}("_^Int_"), hook{}("INT.pow"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(922,18,922,177)"), left{}(Lbl'UndsXor-'Int'Unds'{}(),Lbl'UndsXor-Perc'Int'UndsUnds'{}()), format{}("%1 %c^Int%r %2"), function{}()]
  symbol Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(SortExternal{}, SortExternals{}) : SortExternals{} [functional{}(), constructor{}(), userList{}("+"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,24,21,43)"), left{}(), format{}("%1 %c%r %2"), injective{}()]
  symbol Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(SortExternals{}, SortProcess{}) : SortProgram{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("00"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(34,22,34,38)"), left{}(), format{}("%1 %2"), injective{}()]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("and"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_andBool_"), hook{}("BOOL.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(812,19,812,189)"), left{}(Lbl'Unds'andBool'Unds'{}()), format{}("%1 %candBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'andThenBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("and"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_andThenBool_"), hook{}("BOOL.andThen"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(813,19,813,151)"), left{}(Lbl'Unds'andThenBool'Unds'{}()), format{}("%1 %candThenBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'divInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("div"), right{}(), terminals{}("010"), klabel{}("_divInt_"), hook{}("INT.ediv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(931,18,931,121)"), left{}(Lbl'Unds'divInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}()), format{}("%1 %cdivInt%r %2"), function{}()]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1010,19,1010,52)"), left{}(), format{}("%1 %cdividesInt%r %2"), function{}()]
  hooked-symbol Lbl'Unds'impliesBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("=>"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_impliesBool_"), hook{}("BOOL.implies"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(817,19,817,150)"), left{}(Lbl'Unds'impliesBool'Unds'{}()), format{}("%1 %cimpliesBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(SortKItem{}, SortList{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), klabel{}("_inList_"), hook{}("LIST.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(723,19,723,101)"), left{}(), format{}("%1 %cin%r %2"), function{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(SortKItem{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("01101"), hook{}("MAP.in_keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(357,19,357,93)"), left{}(), format{}("%1 %cin_keys%r %c(%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Unds'modInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("mod"), right{}(), terminals{}("010"), klabel{}("_modInt_"), hook{}("INT.emod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(932,18,932,121)"), left{}(Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}()), format{}("%1 %cmodInt%r %2"), function{}()]
  hooked-symbol Lbl'Unds'orBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("or"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_orBool_"), hook{}("BOOL.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(815,19,815,184)"), left{}(Lbl'Unds'orBool'Unds'{}()), format{}("%1 %corBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'orElseBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("or"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_orElseBool_"), hook{}("BOOL.orElse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(816,19,816,148)"), left{}(Lbl'Unds'orElseBool'Unds'{}()), format{}("%1 %corElseBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'xorBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), smt-hook{}("xor"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_xorBool_"), hook{}("BOOL.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(814,19,814,143)"), left{}(Lbl'Unds'xorBool'Unds'{}()), format{}("%1 %cxorBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'xorInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("xorInt"), terminals{}("010"), klabel{}("_xorInt_"), hook{}("INT.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(942,18,942,188)"), left{}(Lbl'Unds'xorInt'Unds'{}()), format{}("%1 %cxorInt%r %2"), function{}()]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortKItem{}, SortKItem{}) : SortMap{} [latex{}("{#1}\\mapsto{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'Map'Unds'{}(),Lbl'Stop'Map{}()), right{}(Lbl'UndsPipe'-'-GT-Unds'{}()), terminals{}("010"), klabel{}("_|->_"), hook{}("MAP.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(257,18,257,144)"), left{}(Lbl'UndsPipe'-'-GT-Unds'{}()), format{}("%1 %c|->%r %2"), function{}()]
  hooked-symbol Lbl'UndsPipe'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), smtlib{}("orInt"), terminals{}("010"), klabel{}("_|Int_"), hook{}("INT.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(944,18,944,179)"), left{}(Lbl'UndsPipe'Int'Unds'{}()), format{}("%1 %c|Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), hook{}("SET.union"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(547,18,547,88)"), left{}(Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}()), format{}("%1 %c|Set%r %2"), function{}()]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), smt-hook{}("(ite (< #1 0) (- 0 #1) #1)"), right{}(), terminals{}("1101"), klabel{}("absInt"), hook{}("INT.abs"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(961,18,961,123)"), left{}(), format{}("%cabsInt%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("bitRangeInt"), hook{}("INT.bitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(986,18,986,102)"), left{}(), format{}("%cbitRangeInt%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("categoryChar"), hook{}("STRING.category"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1552,21,1552,80)"), left{}(), format{}("%ccategoryChar%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'Unds'KItem'Unds'Map{}(SortMap{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Map:choice"), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(393,20,393,100)"), left{}(), format{}("%cchoice%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'Unds'KItem'Unds'Set{}(SortSet{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Set:choice"), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(603,20,603,94)"), left{}(), format{}("%cchoice%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("chrChar"), hook{}("STRING.chr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1412,21,1412,69)"), left{}(), format{}("%cchrChar%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), hook{}("STRING.countAllOccurrences"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1525,18,1525,150)"), left{}(), format{}("%ccountAllOccurrences%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("directionalityChar"), hook{}("STRING.directionality"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1553,21,1553,86)"), left{}(), format{}("%cdirectionalityChar%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblend'Unds'PCL-SYNTAX'Unds'Process{}() : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,22,28,26)"), left{}(), format{}("%cend%r"), injective{}()]
  symbol Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(SortChannel{}) : SortExternal{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,23,20,44)"), left{}(), format{}("%cexternal%r %1 %c;%r"), injective{}()]
  hooked-symbol LblfillList'LParUndsCommUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101010101"), klabel{}("fillList"), hook{}("LIST.fill"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(704,19,704,99)"), left{}(), format{}("%cfillList%r %c(%r %1 %c,%r %2 %c,%r %3 %c,%r %4 %c)%r"), function{}()]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("findChar"), hook{}("STRING.findChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1449,18,1449,115)"), left{}(), format{}("%cfindChar%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("findString"), hook{}("STRING.find"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1438,18,1438,110)"), left{}(), format{}("%cfindString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  symbol LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), freshGenerator{}(), klabel{}("freshInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1126,18,1126,81)"), left{}(), format{}("%cfreshInt%r %c(%r %1 %c)%r"), private{}(), function{}()]
  symbol Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(SortVariable{}, SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("10101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(26,22,26,53)"), left{}(), format{}("%cfresh%r %1 %c{%r %2 %c}%r"), injective{}()]
  symbol LblgetGeneratedCounterCell{}(SortGeneratedTopCell{}) : SortGeneratedCounterCell{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cgetGeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'K{}(SortK{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("getKLabel"), hook{}("KREFLECTION.getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2119,20,2119,72)"), left{}(), format{}("%cgetKLabel%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(SortId{}, SortVariable{}) : SortProcess{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("10101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,22,23,58)"), left{}(), format{}("%cin%r %1 %c(%r %2 %c)%r"), injective{}()]
  symbol LblinitEnvCell{}() : SortEnvCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitEnvCell%r"), function{}()]
  symbol LblinitExternalsCell{}() : SortExternalsCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitExternalsCell%r"), function{}()]
  symbol LblinitGeneratedCounterCell{}() : SortGeneratedCounterCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitGeneratedCounterCell%r"), function{}()]
  symbol LblinitGeneratedTopCell{}(SortMap{}) : SortGeneratedTopCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitGeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitIdCell{}() : SortIdCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitIdCell%r"), function{}()]
  symbol LblinitInputCell{}(SortMap{}) : SortInputCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitInputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitKCell{}() : SortKCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitKCell%r"), function{}()]
  symbol LblinitOutputCell{}(SortMap{}) : SortOutputCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitOutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitStartupCell{}(SortMap{}) : SortStartupCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitStartupCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitThreadCell{}() : SortThreadCellMap{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitThreadCell%r"), function{}()]
  symbol LblinitThreadsCell{}() : SortThreadsCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitThreadsCell%r"), function{}()]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("intersectSet"), hook{}("SET.intersection"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(558,18,558,88)"), left{}(), format{}("%cintersectSet%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblisBool{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Bool"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBool%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisChannel{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Channel"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisChannel%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisEnvCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("EnvCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisEnvCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisEnvCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("EnvCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisEnvCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisExp{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Exp"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisExp%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisExternal{}(SortK{}) : SortBool{} [functional{}(), predicate{}("External"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisExternal%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisExternals{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Externals"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisExternals%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisExternalsCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ExternalsCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisExternalsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisExternalsCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ExternalsCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisExternalsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisFloat{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Float"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisFloat%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedCounterCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("GeneratedCounterCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedTopCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("GeneratedTopCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedTopCellFragment{}(SortK{}) : SortBool{} [functional{}(), predicate{}("GeneratedTopCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedTopCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOError{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IOError"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOError%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOFile{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IOFile"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOFile%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOInt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IOInt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOInt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOString{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IOString"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOString%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisId{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Id"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisId%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIdCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IdCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIdCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIdCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("IdCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIdCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInputCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("InputCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInputCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("InputCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Int"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisK{}(SortK{}) : SortBool{} [functional{}(), predicate{}("K"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisK%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("KCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("KCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [functional{}(), predicate{}("KConfigVar"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKConfigVar%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKItem{}(SortK{}) : SortBool{} [functional{}(), predicate{}("KItem"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKItem%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKResult{}(SortExp{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("isKResult"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(10,19,10,51)"), left{}(), format{}("%cisKResult%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisList{}(SortK{}) : SortBool{} [functional{}(), predicate{}("List"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisList%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisMap{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Map"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisMap%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisOutputCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("OutputCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisOutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisOutputCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("OutputCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisOutputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisProcess{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Process"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisProcess%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisProgram{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Program"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisProgram%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisSet{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Set"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisSet%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStartupCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("StartupCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStartupCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStartupCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("StartupCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStartupCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStream{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Stream"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStream%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisString{}(SortK{}) : SortBool{} [functional{}(), predicate{}("String"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisString%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCellFragment{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCellMap{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadCellMap"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCellMap%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCell{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCellFragment{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadsCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCellOpt{}(SortK{}) : SortBool{} [functional{}(), predicate{}("ThreadsCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisVariable{}(SortK{}) : SortBool{} [functional{}(), predicate{}("Variable"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisVariable%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(SortMap{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("keys"), hook{}("MAP.keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(341,18,341,86)"), left{}(), format{}("%ckeys%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), hook{}("MAP.keys_list"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,19,349,79)"), left{}(), format{}("%ckeys_list%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("lengthString"), hook{}("STRING.length"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1403,18,1403,84)"), left{}(), format{}("%clengthString%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(SortVariable{}, SortExp{}, SortProcess{}) : SortProcess{} [functional{}(), constructor{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1010101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,22,30,71)"), left{}(), format{}("%clet%r %1 %c=%r %2 %c{%r %3 %c}%r"), injective{}()]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("log2Int"), hook{}("INT.log2"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(972,18,972,74)"), left{}(), format{}("%clog2Int%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblmakeList'LParUndsCommUndsRParUnds'LIST'Unds'List'Unds'Int'Unds'KItem{}(SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("makeList"), hook{}("LIST.make"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(685,19,685,81)"), left{}(), format{}("%cmakeList%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), smt-hook{}("(ite (< #1 #2) #2 #1)"), right{}(), terminals{}("110101"), hook{}("INT.max"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(953,18,953,118)"), left{}(), format{}("%cmaxInt%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), smt-hook{}("(ite (< #1 #2) #1 #2)"), right{}(), terminals{}("110101"), hook{}("INT.min"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(952,18,952,118)"), left{}(), format{}("%cminInt%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblnewUUID'Unds'STRING-COMMON'Unds'String{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), impure{}(), hook{}("STRING.uuid"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1555,21,1555,67)"), left{}(), format{}("%cnewUUID%r"), function{}()]
  symbol LblnoEnvCell{}() : SortEnvCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("EnvCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoEnvCell%r"), injective{}()]
  symbol LblnoExternalsCell{}() : SortExternalsCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("ExternalsCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoExternalsCell%r"), injective{}()]
  symbol LblnoIdCell{}() : SortIdCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("IdCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoIdCell%r"), injective{}()]
  symbol LblnoInputCell{}() : SortInputCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("InputCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoInputCell%r"), injective{}()]
  symbol LblnoKCell{}() : SortKCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("KCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoKCell%r"), injective{}()]
  symbol LblnoOutputCell{}() : SortOutputCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("OutputCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoOutputCell%r"), injective{}()]
  symbol LblnoStartupCell{}() : SortStartupCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("StartupCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoStartupCell%r"), injective{}()]
  symbol LblnoThreadsCell{}() : SortThreadsCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoThreadsCell%r"), injective{}()]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("not"), boolOperation{}(), right{}(), terminals{}("10"), klabel{}("notBool_"), hook{}("BOOL.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(811,19,811,176)"), left{}(), format{}("%cnotBool%r %1"), function{}()]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("ordChar"), hook{}("STRING.ord"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1413,18,1413,69)"), left{}(), format{}("%cordChar%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(SortId{}, SortExp{}) : SortProcess{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("10101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,22,24,55)"), left{}(), format{}("%cout%r %1 %c(%r %2 %c)%r"), injective{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'fd{}(SortIOFile{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cfd%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'path{}(SortIOFile{}) : SortString{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cpath%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'ColnHash'unknownIOError'Coln'errno{}(SortIOError{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cerrno%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Bool{}(SortK{}) : SortBool{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Bool%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Channel{}(SortK{}) : SortChannel{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Channel%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'EnvCell{}(SortK{}) : SortEnvCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:EnvCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'EnvCellOpt{}(SortK{}) : SortEnvCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:EnvCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Exp{}(SortK{}) : SortExp{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Exp%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'External{}(SortK{}) : SortExternal{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:External%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Externals{}(SortK{}) : SortExternals{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Externals%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ExternalsCell{}(SortK{}) : SortExternalsCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ExternalsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ExternalsCellOpt{}(SortK{}) : SortExternalsCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ExternalsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Float{}(SortK{}) : SortFloat{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Float%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedCounterCell{}(SortK{}) : SortGeneratedCounterCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedTopCell{}(SortK{}) : SortGeneratedTopCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedTopCellFragment{}(SortK{}) : SortGeneratedTopCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedTopCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOError{}(SortK{}) : SortIOError{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOError%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOFile{}(SortK{}) : SortIOFile{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOFile%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOInt{}(SortK{}) : SortIOInt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOInt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOString{}(SortK{}) : SortIOString{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOString%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Id{}(SortK{}) : SortId{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Id%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IdCell{}(SortK{}) : SortIdCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IdCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IdCellOpt{}(SortK{}) : SortIdCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IdCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'InputCell{}(SortK{}) : SortInputCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:InputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'InputCellOpt{}(SortK{}) : SortInputCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:InputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Int{}(SortK{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Int%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'K{}(SortK{}) : SortK{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:K%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KCell{}(SortK{}) : SortKCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KCellOpt{}(SortK{}) : SortKCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KItem{}(SortK{}) : SortKItem{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KItem%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'List{}(SortK{}) : SortList{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:List%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Map{}(SortK{}) : SortMap{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Map%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'OutputCell{}(SortK{}) : SortOutputCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:OutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'OutputCellOpt{}(SortK{}) : SortOutputCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:OutputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Process{}(SortK{}) : SortProcess{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Process%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Program{}(SortK{}) : SortProgram{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Program%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Set{}(SortK{}) : SortSet{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Set%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'StartupCell{}(SortK{}) : SortStartupCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:StartupCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'StartupCellOpt{}(SortK{}) : SortStartupCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:StartupCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Stream{}(SortK{}) : SortStream{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Stream%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'String{}(SortK{}) : SortString{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:String%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCell{}(SortK{}) : SortThreadCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCellFragment{}(SortK{}) : SortThreadCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCellMap{}(SortK{}) : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCellMap%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCell{}(SortK{}) : SortThreadsCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCellFragment{}(SortK{}) : SortThreadsCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCellOpt{}(SortK{}) : SortThreadsCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Variable{}(SortK{}) : SortVariable{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Variable%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("randInt"), hook{}("INT.rand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1020,18,1020,64)"), left{}(), format{}("%crandInt%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("removeAll"), hook{}("MAP.removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(333,18,333,91)"), left{}(), format{}("%cremoveAll%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101010101"), hook{}("STRING.replace"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1523,21,1523,145)"), left{}(), format{}("%creplace%r %c(%r %1 %c,%r %2 %c,%r %3 %c,%r %4 %c)%r"), function{}()]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), hook{}("STRING.replaceAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1522,21,1522,153)"), left{}(), format{}("%creplaceAll%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), hook{}("STRING.replaceFirst"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1524,21,1524,155)"), left{}(), format{}("%creplaceFirst%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("rfindChar"), hook{}("STRING.rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1450,18,1450,116)"), left{}(), format{}("%crfindChar%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("rfindString"), hook{}("STRING.rfind"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1439,18,1439,111)"), left{}(), format{}("%crfindString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("signExtendBitRangeInt"), hook{}("INT.signExtendBitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(987,18,987,112)"), left{}(), format{}("%csignExtendBitRangeInt%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(SortList{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), smtlib{}("smt_seq_len"), terminals{}("1101"), klabel{}("sizeList"), hook{}("LIST.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(731,18,731,121)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(SortMap{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("sizeMap"), hook{}("MAP.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(373,18,373,103)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(SortSet{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("size"), hook{}("SET.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(593,18,593,80)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT-COMMON'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("srandInt"), hook{}("INT.srand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1021,16,1021,64)"), left{}(), format{}("%csrandInt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblstop'Unds'PCL-SYNTAX'Unds'Process{}() : SortProcess{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(29,22,29,27)"), left{}(), format{}("%cstop%r"), injective{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("substrString"), hook{}("STRING.substr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1428,21,1428,121)"), left{}(), format{}("%csubstrString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblupdateList'LParUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'List{}(SortList{}, SortInt{}, SortList{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("updateList"), hook{}("LIST.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(695,19,695,96)"), left{}(), format{}("%cupdateList%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("updateMap"), hook{}("MAP.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(324,18,324,91)"), left{}(), format{}("%cupdateMap%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("values"), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,19,365,76)"), left{}(), format{}("%cvalues%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Tild'Int'Unds'{}(SortInt{}) : SortInt{} [latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'UndsXor-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsXor-Perc'Int'UndsUnds'{}(),Lbl'Unds'-Int'Unds'{}()), right{}(), smtlib{}("notInt"), terminals{}("10"), klabel{}("~Int_"), hook{}("INT.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(920,18,920,172)"), left{}(), format{}("%c~Int%r %1"), function{}()]

// generated axioms
  axiom{R} \exists{R} (Val:SortOutputCellOpt{}, \equals{SortOutputCellOpt{}, R} (Val:SortOutputCellOpt{}, inj{SortOutputCell{}, SortOutputCellOpt{}} (From:SortOutputCell{}))) [subsort{SortOutputCell{}, SortOutputCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortExternal{}, SortKItem{}} (From:SortExternal{}))) [subsort{SortExternal{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStartupCell{}, SortKItem{}} (From:SortStartupCell{}))) [subsort{SortStartupCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStream{}, SortKItem{}} (From:SortStream{}))) [subsort{SortStream{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOInt{}, SortKItem{}} (From:SortIOInt{}))) [subsort{SortIOInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOFile{}, SortKItem{}} (From:SortIOFile{}))) [subsort{SortIOFile{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortThreadsCellOpt{}, \equals{SortThreadsCellOpt{}, R} (Val:SortThreadsCellOpt{}, inj{SortThreadsCell{}, SortThreadsCellOpt{}} (From:SortThreadsCell{}))) [subsort{SortThreadsCell{}, SortThreadsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMap{}, SortKItem{}} (From:SortMap{}))) [subsort{SortMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutputCell{}, SortKItem{}} (From:SortOutputCell{}))) [subsort{SortOutputCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInputCell{}, SortKItem{}} (From:SortInputCell{}))) [subsort{SortInputCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStartupCellOpt{}, SortKItem{}} (From:SortStartupCellOpt{}))) [subsort{SortStartupCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortExternalsCellOpt{}, SortKItem{}} (From:SortExternalsCellOpt{}))) [subsort{SortExternalsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBool{}, SortKItem{}} (From:SortBool{}))) [subsort{SortBool{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStartupCellOpt{}, \equals{SortStartupCellOpt{}, R} (Val:SortStartupCellOpt{}, inj{SortStartupCell{}, SortStartupCellOpt{}} (From:SortStartupCell{}))) [subsort{SortStartupCell{}, SortStartupCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortProcess{}, SortKItem{}} (From:SortProcess{}))) [subsort{SortProcess{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, inj{SortIOError{}, SortIOFile{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOFile{}}()] // subsort
  axiom{R} \exists{R} (Val:SortExternalsCellOpt{}, \equals{SortExternalsCellOpt{}, R} (Val:SortExternalsCellOpt{}, inj{SortExternalsCell{}, SortExternalsCellOpt{}} (From:SortExternalsCell{}))) [subsort{SortExternalsCell{}, SortExternalsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortThreadCellMap{}, \equals{SortThreadCellMap{}, R} (Val:SortThreadCellMap{}, inj{SortThreadCell{}, SortThreadCellMap{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortThreadCellMap{}}()] // subsort
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, inj{SortChannel{}, SortId{}} (From:SortChannel{}))) [subsort{SortChannel{}, SortId{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, inj{SortKCell{}, SortKCellOpt{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOString{}, SortKItem{}} (From:SortIOString{}))) [subsort{SortIOString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInputCellOpt{}, SortKItem{}} (From:SortInputCellOpt{}))) [subsort{SortInputCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, inj{SortId{}, SortExp{}} (From:SortId{}))) [subsort{SortId{}, SortExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortString{}, SortIOString{}} (From:SortString{}))) [subsort{SortString{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellFragment{}, SortKItem{}} (From:SortThreadCellFragment{}))) [subsort{SortThreadCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortInt{}, SortIOInt{}} (From:SortInt{}))) [subsort{SortInt{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortVariable{}, SortKItem{}} (From:SortVariable{}))) [subsort{SortVariable{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSet{}, SortKItem{}} (From:SortSet{}))) [subsort{SortSet{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortExternalsCell{}, SortKItem{}} (From:SortExternalsCell{}))) [subsort{SortExternalsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortExternals{}, SortKItem{}} (From:SortExternals{}))) [subsort{SortExternals{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInt{}, SortKItem{}} (From:SortInt{}))) [subsort{SortInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCell{}, SortKItem{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCellOpt{}, SortKItem{}} (From:SortKCellOpt{}))) [subsort{SortKCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortIOError{}, SortIOInt{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortExp{}, SortKItem{}} (From:SortExp{}))) [subsort{SortExp{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCell{}, SortKItem{}} (From:SortThreadsCell{}))) [subsort{SortThreadsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOError{}, SortKItem{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, inj{SortInt{}, SortExp{}} (From:SortInt{}))) [subsort{SortInt{}, SortExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (From:SortGeneratedTopCellFragment{}))) [subsort{SortGeneratedTopCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCell{}, SortKItem{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortProgram{}, SortKItem{}} (From:SortProgram{}))) [subsort{SortProgram{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortChannel{}, SortKItem{}} (From:SortChannel{}))) [subsort{SortChannel{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortEnvCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCell{}, SortKItem{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortId{}, SortKItem{}} (From:SortId{}))) [subsort{SortId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInputCellOpt{}, \equals{SortInputCellOpt{}, R} (Val:SortInputCellOpt{}, inj{SortInputCell{}, SortInputCellOpt{}} (From:SortInputCell{}))) [subsort{SortInputCell{}, SortInputCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortIOError{}, SortIOString{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortString{}, SortKItem{}} (From:SortString{}))) [subsort{SortString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFloat{}, SortKItem{}} (From:SortFloat{}))) [subsort{SortFloat{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCellFragment{}, SortKItem{}} (From:SortThreadsCellFragment{}))) [subsort{SortThreadsCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, inj{SortVariable{}, SortId{}} (From:SortVariable{}))) [subsort{SortVariable{}, SortId{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellMap{}, SortKItem{}} (From:SortThreadCellMap{}))) [subsort{SortThreadCellMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortList{}, SortKItem{}} (From:SortList{}))) [subsort{SortList{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutputCellOpt{}, SortKItem{}} (From:SortOutputCellOpt{}))) [subsort{SortOutputCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCell{}, SortKItem{}} (From:SortGeneratedTopCell{}))) [subsort{SortGeneratedTopCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCellOpt{}, SortKItem{}} (From:SortIdCellOpt{}))) [subsort{SortIdCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCellOpt{}, SortKItem{}} (From:SortThreadsCellOpt{}))) [subsort{SortThreadsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, inj{SortIdCell{}, SortIdCellOpt{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortIdCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCellOpt{}, SortKItem{}} (From:SortEnvCellOpt{}))) [subsort{SortEnvCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCell{}, SortKItem{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(K0:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(Y0:SortProcess{})), Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(\and{SortProcess{}} (X0:SortProcess{}, Y0:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(Y0:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(Y0:SortChannel{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(Y0:SortChannel{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EACCES{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortChannel{}, \equals{SortChannel{}, R} (Val:SortChannel{}, Lbl'Hash'freshChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R, SortSort} \exists{R} (Val:SortSort, \equals{SortSort, R} (Val:SortSort, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(K0:SortBool{}, K1:SortSort, K2:SortSort))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{})), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noParse{}(K0:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'noParse{}(Y0:SortString{})), Lbl'Hash'noParse{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{})), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(X0:SortString{}, X1:SortString{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{})), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(K0:SortVariable{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(Y0:SortVariable{})), Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(\and{SortVariable{}} (X0:SortVariable{}, Y0:SortVariable{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(Y0:SortChannel{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(Y0:SortChannel{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(K0:SortChannel{}, K1:SortVariable{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(Y0:SortChannel{}, Y1:SortVariable{})), Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(\and{SortChannel{}} (X0:SortChannel{}, Y0:SortChannel{}), \and{SortVariable{}} (X1:SortVariable{}, Y1:SortVariable{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(Y0:SortChannel{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(K0:SortChannel{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(Y0:SortChannel{}, Y1:SortExp{})), Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(\and{SortChannel{}} (X0:SortChannel{}, Y0:SortChannel{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, Lbl'Hash'tempFile{}(K0:SortString{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOFile{}} (\and{SortIOFile{}} (Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}), Lbl'Hash'tempFile{}(Y0:SortString{}, Y1:SortInt{})), Lbl'Hash'tempFile{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError{}(X0:SortInt{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{})), Lbl'Hash'unknownIOError{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(K0:SortProcess{}, K1:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{})), Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(\and{SortProcess{}} (X0:SortProcess{}, Y0:SortProcess{}), \and{SortProcess{}} (X1:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(K0:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortExp{}} (\and{SortExp{}} (Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{}), Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(Y0:SortExp{})), Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{}), Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{}), Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{}), Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{}), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExternals{}, \equals{SortExternals{}, R} (Val:SortExternals{}, Lbl'Stop'List'LBraQuotUndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals'QuotRBraUnds'Externals{}())) [functional{}()] // functional
  axiom{}\not{SortExternals{}} (\and{SortExternals{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals'QuotRBraUnds'Externals{}(), Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(Y0:SortExternal{}, Y1:SortExternals{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortEnvCell{}, \equals{SortEnvCell{}, R} (Val:SortEnvCell{}, Lbl'-LT-'env'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortEnvCell{}} (\and{SortEnvCell{}} (Lbl'-LT-'env'-GT-'{}(X0:SortMap{}), Lbl'-LT-'env'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'env'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortExternalsCell{}, \equals{SortExternalsCell{}, R} (Val:SortExternalsCell{}, Lbl'-LT-'externals'-GT-'{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{}\implies{SortExternalsCell{}} (\and{SortExternalsCell{}} (Lbl'-LT-'externals'-GT-'{}(X0:SortSet{}), Lbl'-LT-'externals'-GT-'{}(Y0:SortSet{})), Lbl'-LT-'externals'-GT-'{}(\and{SortSet{}} (X0:SortSet{}, Y0:SortSet{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, Lbl'-LT-'generatedCounter'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedCounterCell{}} (\and{SortGeneratedCounterCell{}} (Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{}), Lbl'-LT-'generatedCounter'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'generatedCounter'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCell{}, \equals{SortGeneratedTopCell{}, R} (Val:SortGeneratedTopCell{}, Lbl'-LT-'generatedTop'-GT-'{}(K0:SortStartupCell{}, K1:SortExternalsCell{}, K2:SortThreadsCell{}, K3:SortInputCell{}, K4:SortGeneratedCounterCell{}, K5:SortOutputCell{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCell{}} (\and{SortGeneratedTopCell{}} (Lbl'-LT-'generatedTop'-GT-'{}(X0:SortStartupCell{}, X1:SortExternalsCell{}, X2:SortThreadsCell{}, X3:SortInputCell{}, X4:SortGeneratedCounterCell{}, X5:SortOutputCell{}), Lbl'-LT-'generatedTop'-GT-'{}(Y0:SortStartupCell{}, Y1:SortExternalsCell{}, Y2:SortThreadsCell{}, Y3:SortInputCell{}, Y4:SortGeneratedCounterCell{}, Y5:SortOutputCell{})), Lbl'-LT-'generatedTop'-GT-'{}(\and{SortStartupCell{}} (X0:SortStartupCell{}, Y0:SortStartupCell{}), \and{SortExternalsCell{}} (X1:SortExternalsCell{}, Y1:SortExternalsCell{}), \and{SortThreadsCell{}} (X2:SortThreadsCell{}, Y2:SortThreadsCell{}), \and{SortInputCell{}} (X3:SortInputCell{}, Y3:SortInputCell{}), \and{SortGeneratedCounterCell{}} (X4:SortGeneratedCounterCell{}, Y4:SortGeneratedCounterCell{}), \and{SortOutputCell{}} (X5:SortOutputCell{}, Y5:SortOutputCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCellFragment{}, \equals{SortGeneratedTopCellFragment{}, R} (Val:SortGeneratedTopCellFragment{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(K0:SortStartupCellOpt{}, K1:SortExternalsCellOpt{}, K2:SortThreadsCellOpt{}, K3:SortInputCellOpt{}, K4:SortOutputCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCellFragment{}} (\and{SortGeneratedTopCellFragment{}} (Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortStartupCellOpt{}, X1:SortExternalsCellOpt{}, X2:SortThreadsCellOpt{}, X3:SortInputCellOpt{}, X4:SortOutputCellOpt{}), Lbl'-LT-'generatedTop'-GT-'-fragment{}(Y0:SortStartupCellOpt{}, Y1:SortExternalsCellOpt{}, Y2:SortThreadsCellOpt{}, Y3:SortInputCellOpt{}, Y4:SortOutputCellOpt{})), Lbl'-LT-'generatedTop'-GT-'-fragment{}(\and{SortStartupCellOpt{}} (X0:SortStartupCellOpt{}, Y0:SortStartupCellOpt{}), \and{SortExternalsCellOpt{}} (X1:SortExternalsCellOpt{}, Y1:SortExternalsCellOpt{}), \and{SortThreadsCellOpt{}} (X2:SortThreadsCellOpt{}, Y2:SortThreadsCellOpt{}), \and{SortInputCellOpt{}} (X3:SortInputCellOpt{}, Y3:SortInputCellOpt{}), \and{SortOutputCellOpt{}} (X4:SortOutputCellOpt{}, Y4:SortOutputCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIdCell{}, \equals{SortIdCell{}, R} (Val:SortIdCell{}, Lbl'-LT-'id'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIdCell{}} (\and{SortIdCell{}} (Lbl'-LT-'id'-GT-'{}(X0:SortInt{}), Lbl'-LT-'id'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'id'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInputCell{}, \equals{SortInputCell{}, R} (Val:SortInputCell{}, Lbl'-LT-'input'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortInputCell{}} (\and{SortInputCell{}} (Lbl'-LT-'input'-GT-'{}(X0:SortList{}), Lbl'-LT-'input'-GT-'{}(Y0:SortList{})), Lbl'-LT-'input'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortOutputCell{}, \equals{SortOutputCell{}, R} (Val:SortOutputCell{}, Lbl'-LT-'output'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortOutputCell{}} (\and{SortOutputCell{}} (Lbl'-LT-'output'-GT-'{}(X0:SortList{}), Lbl'-LT-'output'-GT-'{}(Y0:SortList{})), Lbl'-LT-'output'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStartupCell{}, \equals{SortStartupCell{}, R} (Val:SortStartupCell{}, Lbl'-LT-'startup'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStartupCell{}} (\and{SortStartupCell{}} (Lbl'-LT-'startup'-GT-'{}(X0:SortK{}), Lbl'-LT-'startup'-GT-'{}(Y0:SortK{})), Lbl'-LT-'startup'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadCell{}, \equals{SortThreadCell{}, R} (Val:SortThreadCell{}, Lbl'-LT-'thread'-GT-'{}(K0:SortIdCell{}, K1:SortKCell{}, K2:SortEnvCell{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCell{}} (\and{SortThreadCell{}} (Lbl'-LT-'thread'-GT-'{}(X0:SortIdCell{}, X1:SortKCell{}, X2:SortEnvCell{}), Lbl'-LT-'thread'-GT-'{}(Y0:SortIdCell{}, Y1:SortKCell{}, Y2:SortEnvCell{})), Lbl'-LT-'thread'-GT-'{}(\and{SortIdCell{}} (X0:SortIdCell{}, Y0:SortIdCell{}), \and{SortKCell{}} (X1:SortKCell{}, Y1:SortKCell{}), \and{SortEnvCell{}} (X2:SortEnvCell{}, Y2:SortEnvCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadCellFragment{}, \equals{SortThreadCellFragment{}, R} (Val:SortThreadCellFragment{}, Lbl'-LT-'thread'-GT-'-fragment{}(K0:SortIdCellOpt{}, K1:SortKCellOpt{}, K2:SortEnvCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCellFragment{}} (\and{SortThreadCellFragment{}} (Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortKCellOpt{}, X2:SortEnvCellOpt{}), Lbl'-LT-'thread'-GT-'-fragment{}(Y0:SortIdCellOpt{}, Y1:SortKCellOpt{}, Y2:SortEnvCellOpt{})), Lbl'-LT-'thread'-GT-'-fragment{}(\and{SortIdCellOpt{}} (X0:SortIdCellOpt{}, Y0:SortIdCellOpt{}), \and{SortKCellOpt{}} (X1:SortKCellOpt{}, Y1:SortKCellOpt{}), \and{SortEnvCellOpt{}} (X2:SortEnvCellOpt{}, Y2:SortEnvCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadsCell{}, \equals{SortThreadsCell{}, R} (Val:SortThreadsCell{}, Lbl'-LT-'threads'-GT-'{}(K0:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadsCell{}} (\and{SortThreadsCell{}} (Lbl'-LT-'threads'-GT-'{}(X0:SortThreadCellMap{}), Lbl'-LT-'threads'-GT-'{}(Y0:SortThreadCellMap{})), Lbl'-LT-'threads'-GT-'{}(\and{SortThreadCellMap{}} (X0:SortThreadCellMap{}, Y0:SortThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadsCellFragment{}, \equals{SortThreadsCellFragment{}, R} (Val:SortThreadsCellFragment{}, Lbl'-LT-'threads'-GT-'-fragment{}(K0:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadsCellFragment{}} (\and{SortThreadsCellFragment{}} (Lbl'-LT-'threads'-GT-'-fragment{}(X0:SortThreadCellMap{}), Lbl'-LT-'threads'-GT-'-fragment{}(Y0:SortThreadCellMap{})), Lbl'-LT-'threads'-GT-'-fragment{}(\and{SortThreadCellMap{}} (X0:SortThreadCellMap{}, Y0:SortThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblMap'Coln'update{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortKItem{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortChannel{}, \equals{SortChannel{}, R} (Val:SortChannel{}, LblStringToChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblThreadCellMap'Coln'in'Unds'keys{}(K0:SortIdCell{}, K1:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(K0:SortExp{}, K1:SortExp{}, K2:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Y0:SortExp{}, Y1:SortExp{}, Y2:SortProcess{})), Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}), \and{SortProcess{}} (X2:SortProcess{}, Y2:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(K0:SortExp{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortExp{}} (\and{SortExp{}} (Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{})), Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(K0:SortExp{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortExp{}} (\and{SortExp{}} (Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{})), Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(K0:SortExp{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortExp{}} (\and{SortExp{}} (Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{})), Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortExp{}} (\and{SortExp{}} (Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(K0:SortProcess{}, K1:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(Y0:SortProcess{}, Y1:SortProcess{})), Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(\and{SortProcess{}} (X0:SortProcess{}, Y0:SortProcess{}), \and{SortProcess{}} (X1:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortExp{}, \equals{SortExp{}, R} (Val:SortExp{}, Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(K0:SortExp{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortExp{}} (\and{SortExp{}} (Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(Y0:SortExp{}, Y1:SortExp{})), Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(\and{SortExp{}} (X0:SortExp{}, Y0:SortExp{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(K:SortList{},Lbl'Stop'List{}()),K:SortList{}) [unit{}()] // right unit
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),K:SortList{}),K:SortList{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K:SortMap{},Lbl'Stop'Map{}()),K:SortMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),K:SortMap{}),K:SortMap{}) [unit{}()] // left unit
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},Lbl'Stop'Set{}()),K:SortSet{}) [unit{}()] // right unit
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Stop'Set{}(),K:SortSet{}),K:SortSet{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Unds'Set'Unds'{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},K2:SortThreadCellMap{}),K3:SortThreadCellMap{}),Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},Lbl'Unds'ThreadCellMap'Unds'{}(K2:SortThreadCellMap{},K3:SortThreadCellMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},K2:SortThreadCellMap{}),Lbl'Unds'ThreadCellMap'Unds'{}(K2:SortThreadCellMap{},K1:SortThreadCellMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(K:SortThreadCellMap{},Lbl'Stop'ThreadCellMap{}()),K:SortThreadCellMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Stop'ThreadCellMap{}(),K:SortThreadCellMap{}),K:SortThreadCellMap{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExternals{}, \equals{SortExternals{}, R} (Val:SortExternals{}, Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(K0:SortExternal{}, K1:SortExternals{}))) [functional{}()] // functional
  axiom{}\implies{SortExternals{}} (\and{SortExternals{}} (Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(X0:SortExternal{}, X1:SortExternals{}), Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(Y0:SortExternal{}, Y1:SortExternals{})), Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(\and{SortExternal{}} (X0:SortExternal{}, Y0:SortExternal{}), \and{SortExternals{}} (X1:SortExternals{}, Y1:SortExternals{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortProgram{}, \equals{SortProgram{}, R} (Val:SortProgram{}, Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(K0:SortExternals{}, K1:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProgram{}} (\and{SortProgram{}} (Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(X0:SortExternals{}, X1:SortProcess{}), Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(Y0:SortExternals{}, Y1:SortProcess{})), Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(\and{SortExternals{}} (X0:SortExternals{}, Y0:SortExternals{}), \and{SortProcess{}} (X1:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(K0:SortKItem{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortKItem{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lblend'Unds'PCL-SYNTAX'Unds'Process{}())) [functional{}()] // functional
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortExternal{}, \equals{SortExternal{}, R} (Val:SortExternal{}, Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(K0:SortChannel{}))) [functional{}()] // functional
  axiom{}\implies{SortExternal{}} (\and{SortExternal{}} (Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(X0:SortChannel{}), Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(Y0:SortChannel{})), Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(\and{SortChannel{}} (X0:SortChannel{}, Y0:SortChannel{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(K0:SortVariable{}, K1:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(Y0:SortVariable{}, Y1:SortProcess{})), Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(\and{SortVariable{}} (X0:SortVariable{}, Y0:SortVariable{}), \and{SortProcess{}} (X1:SortProcess{}, Y1:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(K0:SortId{}, K1:SortVariable{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(X0:SortId{}, X1:SortVariable{}), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(Y0:SortId{}, Y1:SortVariable{})), Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortVariable{}} (X1:SortVariable{}, Y1:SortVariable{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(X0:SortId{}, X1:SortVariable{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(X0:SortId{}, X1:SortVariable{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(X0:SortId{}, X1:SortVariable{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBool{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisChannel{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisEnvCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisEnvCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisExp{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisExternal{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisExternals{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisExternalsCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisExternalsCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisFloat{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedCounterCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOError{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOFile{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOInt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOString{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisId{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIdCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIdCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInputCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInputCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisK{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKConfigVar{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisList{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisMap{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisOutputCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisOutputCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisProcess{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisProgram{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisSet{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStartupCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStartupCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStream{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisString{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCellMap{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisVariable{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(K0:SortVariable{}, K1:SortExp{}, K2:SortProcess{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(X0:SortVariable{}, X1:SortExp{}, X2:SortProcess{}), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(Y0:SortVariable{}, Y1:SortExp{}, Y2:SortProcess{})), Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(\and{SortVariable{}} (X0:SortVariable{}, Y0:SortVariable{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}), \and{SortProcess{}} (X2:SortProcess{}, Y2:SortProcess{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(X0:SortVariable{}, X1:SortExp{}, X2:SortProcess{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(X0:SortVariable{}, X1:SortExp{}, X2:SortProcess{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, LblnoEnvCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortExternalsCellOpt{}, \equals{SortExternalsCellOpt{}, R} (Val:SortExternalsCellOpt{}, LblnoExternalsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, LblnoIdCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInputCellOpt{}, \equals{SortInputCellOpt{}, R} (Val:SortInputCellOpt{}, LblnoInputCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortOutputCellOpt{}, \equals{SortOutputCellOpt{}, R} (Val:SortOutputCellOpt{}, LblnoOutputCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStartupCellOpt{}, \equals{SortStartupCellOpt{}, R} (Val:SortStartupCellOpt{}, LblnoStartupCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortThreadsCellOpt{}, \equals{SortThreadsCellOpt{}, R} (Val:SortThreadsCellOpt{}, LblnoThreadsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(K0:SortId{}, K1:SortExp{}))) [functional{}()] // functional
  axiom{}\implies{SortProcess{}} (\and{SortProcess{}} (Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(X0:SortId{}, X1:SortExp{}), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(Y0:SortId{}, Y1:SortExp{})), Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortExp{}} (X1:SortExp{}, Y1:SortExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortProcess{}} (\and{SortProcess{}} (Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(X0:SortId{}, X1:SortExp{}), Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortProcess{}, \equals{SortProcess{}, R} (Val:SortProcess{}, Lblstop'Unds'PCL-SYNTAX'Unds'Process{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(K0:SortString{}, K1:SortInt{}, K2:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'Unds'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortExternalsCell{}} (\exists{SortExternalsCell{}} (X0:SortSet{}, Lbl'-LT-'externals'-GT-'{}(X0:SortSet{})), \bottom{SortExternalsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellMap{}} (\exists{SortThreadCellMap{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortThreadCellMap{}} (Val:SortThreadCell{})), \bottom{SortThreadCellMap{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (LblnoKCell{}(), \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortSet{}}() [constructor{}()] // no junk
  axiom{} \or{SortExternals{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals'QuotRBraUnds'Externals{}(), \or{SortExternals{}} (\exists{SortExternals{}} (X0:SortExternal{}, \exists{SortExternals{}} (X1:SortExternals{}, Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(X0:SortExternal{}, X1:SortExternals{}))), \bottom{SortExternals{}}())) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortIdCellOpt{}} (LblnoIdCell{}(), \or{SortIdCellOpt{}} (\exists{SortIdCellOpt{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortIdCellOpt{}} (Val:SortIdCell{})), \bottom{SortIdCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortEnvCell{}} (\exists{SortEnvCell{}} (X0:SortMap{}, Lbl'-LT-'env'-GT-'{}(X0:SortMap{})), \bottom{SortEnvCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInputCellOpt{}} (LblnoInputCell{}(), \or{SortInputCellOpt{}} (\exists{SortInputCellOpt{}} (Val:SortInputCell{}, inj{SortInputCell{}, SortInputCellOpt{}} (Val:SortInputCell{})), \bottom{SortInputCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadsCellOpt{}} (LblnoThreadsCell{}(), \or{SortThreadsCellOpt{}} (\exists{SortThreadsCellOpt{}} (Val:SortThreadsCell{}, inj{SortThreadsCell{}, SortThreadsCellOpt{}} (Val:SortThreadsCell{})), \bottom{SortThreadsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadCell{}} (\exists{SortThreadCell{}} (X0:SortIdCell{}, \exists{SortThreadCell{}} (X1:SortKCell{}, \exists{SortThreadCell{}} (X2:SortEnvCell{}, Lbl'-LT-'thread'-GT-'{}(X0:SortIdCell{}, X1:SortKCell{}, X2:SortEnvCell{})))), \bottom{SortThreadCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortProcess{}, Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(X0:SortProcess{})), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortVariable{}, Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(X0:SortVariable{})), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortChannel{}, \exists{SortProcess{}} (X1:SortVariable{}, Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(X0:SortChannel{}, X1:SortVariable{}))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortChannel{}, \exists{SortProcess{}} (X1:SortExp{}, Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(X0:SortChannel{}, X1:SortExp{}))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortProcess{}, \exists{SortProcess{}} (X1:SortProcess{}, Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortExp{}, \exists{SortProcess{}} (X1:SortExp{}, \exists{SortProcess{}} (X2:SortProcess{}, Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(X0:SortExp{}, X1:SortExp{}, X2:SortProcess{})))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortProcess{}, \exists{SortProcess{}} (X1:SortProcess{}, Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(X0:SortProcess{}, X1:SortProcess{}))), \or{SortProcess{}} (Lblend'Unds'PCL-SYNTAX'Unds'Process{}(), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortVariable{}, \exists{SortProcess{}} (X1:SortProcess{}, Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(X0:SortVariable{}, X1:SortProcess{}))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortId{}, \exists{SortProcess{}} (X1:SortVariable{}, Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(X0:SortId{}, X1:SortVariable{}))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortVariable{}, \exists{SortProcess{}} (X1:SortExp{}, \exists{SortProcess{}} (X2:SortProcess{}, Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(X0:SortVariable{}, X1:SortExp{}, X2:SortProcess{})))), \or{SortProcess{}} (\exists{SortProcess{}} (X0:SortId{}, \exists{SortProcess{}} (X1:SortExp{}, Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(X0:SortId{}, X1:SortExp{}))), \or{SortProcess{}} (Lblstop'Unds'PCL-SYNTAX'Unds'Process{}(), \bottom{SortProcess{}}()))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortVariable{}} (\top{SortVariable{}}(), \bottom{SortVariable{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortChannel{}} (\top{SortChannel{}}(), \bottom{SortChannel{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortProgram{}} (\exists{SortProgram{}} (X0:SortExternals{}, \exists{SortProgram{}} (X1:SortProcess{}, Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(X0:SortExternals{}, X1:SortProcess{}))), \bottom{SortProgram{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIdCell{}} (\exists{SortIdCell{}} (X0:SortInt{}, Lbl'-LT-'id'-GT-'{}(X0:SortInt{})), \bottom{SortIdCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCell{}} (\exists{SortGeneratedCounterCell{}} (X0:SortInt{}, Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{})), \bottom{SortGeneratedCounterCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCell{}} (\exists{SortGeneratedTopCell{}} (X0:SortStartupCell{}, \exists{SortGeneratedTopCell{}} (X1:SortExternalsCell{}, \exists{SortGeneratedTopCell{}} (X2:SortThreadsCell{}, \exists{SortGeneratedTopCell{}} (X3:SortInputCell{}, \exists{SortGeneratedTopCell{}} (X4:SortGeneratedCounterCell{}, \exists{SortGeneratedTopCell{}} (X5:SortOutputCell{}, Lbl'-LT-'generatedTop'-GT-'{}(X0:SortStartupCell{}, X1:SortExternalsCell{}, X2:SortThreadsCell{}, X3:SortInputCell{}, X4:SortGeneratedCounterCell{}, X5:SortOutputCell{}))))))), \bottom{SortGeneratedTopCell{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortList{}}() [constructor{}()] // no junk
  axiom{} \or{SortStartupCell{}} (\exists{SortStartupCell{}} (X0:SortK{}, Lbl'-LT-'startup'-GT-'{}(X0:SortK{})), \bottom{SortStartupCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortOutputCellOpt{}} (LblnoOutputCell{}(), \or{SortOutputCellOpt{}} (\exists{SortOutputCellOpt{}} (Val:SortOutputCell{}, inj{SortOutputCell{}, SortOutputCellOpt{}} (Val:SortOutputCell{})), \bottom{SortOutputCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellFragment{}} (\exists{SortThreadCellFragment{}} (X0:SortIdCellOpt{}, \exists{SortThreadCellFragment{}} (X1:SortKCellOpt{}, \exists{SortThreadCellFragment{}} (X2:SortEnvCellOpt{}, Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortKCellOpt{}, X2:SortEnvCellOpt{})))), \bottom{SortThreadCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (Lbl'Hash'E2BIG{}(), \or{SortIOError{}} (Lbl'Hash'EACCES{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY{}(), \or{SortIOError{}} (Lbl'Hash'EBADF{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), \or{SortIOError{}} (Lbl'Hash'EDOM{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), \or{SortIOError{}} (Lbl'Hash'EINTR{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL{}(), \or{SortIOError{}} (Lbl'Hash'EIO{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO{}(), \or{SortIOError{}} (Lbl'Hash'EOF{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), \or{SortIOError{}} (Lbl'Hash'EPERM{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE{}(), \or{SortIOError{}} (Lbl'Hash'EROFS{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV{}(), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortString{}, Lbl'Hash'noParse{}(X0:SortString{})), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError{}(X0:SortInt{})), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortThreadsCellFragment{}} (\exists{SortThreadsCellFragment{}} (X0:SortThreadCellMap{}, Lbl'-LT-'threads'-GT-'-fragment{}(X0:SortThreadCellMap{})), \bottom{SortThreadsCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortEnvCellOpt{}} (LblnoEnvCell{}(), \or{SortEnvCellOpt{}} (\exists{SortEnvCellOpt{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (Val:SortEnvCell{})), \bottom{SortEnvCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortK{}}() [constructor{}()] // no junk
  axiom{} \or{SortExp{}} (\exists{SortExp{}} (X0:SortExp{}, Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(X0:SortExp{})), \or{SortExp{}} (\exists{SortExp{}} (X0:SortExp{}, \exists{SortExp{}} (X1:SortExp{}, Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}))), \or{SortExp{}} (\exists{SortExp{}} (X0:SortExp{}, \exists{SortExp{}} (X1:SortExp{}, Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}))), \or{SortExp{}} (\exists{SortExp{}} (X0:SortExp{}, \exists{SortExp{}} (X1:SortExp{}, Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}))), \or{SortExp{}} (\exists{SortExp{}} (X0:SortExp{}, \exists{SortExp{}} (X1:SortExp{}, Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(X0:SortExp{}, X1:SortExp{}))), \or{SortExp{}} (\exists{SortExp{}} (Val:SortInt{}, inj{SortInt{}, SortExp{}} (Val:SortInt{})), \or{SortExp{}} (\exists{SortExp{}} (Val:SortVariable{}, inj{SortVariable{}, SortExp{}} (Val:SortVariable{})), \or{SortExp{}} (\exists{SortExp{}} (Val:SortChannel{}, inj{SortChannel{}, SortExp{}} (Val:SortChannel{})), \or{SortExp{}} (\exists{SortExp{}} (Val:SortId{}, inj{SortId{}, SortExp{}} (Val:SortId{})), \bottom{SortExp{}}()))))))))) [constructor{}()] // no junk
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortExternalsCell{}, inj{SortExternalsCell{}, SortKItem{}} (Val:SortExternalsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellMap{}, inj{SortThreadCellMap{}, SortKItem{}} (Val:SortThreadCellMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortExternals{}, inj{SortExternals{}, SortKItem{}} (Val:SortExternals{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCellOpt{}, inj{SortIdCellOpt{}, SortKItem{}} (Val:SortIdCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortKItem{}} (Val:SortEnvCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInputCellOpt{}, inj{SortInputCellOpt{}, SortKItem{}} (Val:SortInputCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCellOpt{}, inj{SortThreadsCellOpt{}, SortKItem{}} (Val:SortThreadsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortKItem{}} (Val:SortThreadCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortProcess{}, inj{SortProcess{}, SortKItem{}} (Val:SortProcess{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortVariable{}, inj{SortVariable{}, SortKItem{}} (Val:SortVariable{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortChannel{}, inj{SortChannel{}, SortKItem{}} (Val:SortChannel{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortProgram{}, inj{SortProgram{}, SortKItem{}} (Val:SortProgram{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortKItem{}} (Val:SortIdCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (Val:SortGeneratedCounterCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortKItem{}} (Val:SortGeneratedTopCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStartupCell{}, inj{SortStartupCell{}, SortKItem{}} (Val:SortStartupCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutputCellOpt{}, inj{SortOutputCellOpt{}, SortKItem{}} (Val:SortOutputCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellFragment{}, inj{SortThreadCellFragment{}, SortKItem{}} (Val:SortThreadCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCellFragment{}, inj{SortThreadsCellFragment{}, SortKItem{}} (Val:SortThreadsCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCellOpt{}, inj{SortEnvCellOpt{}, SortKItem{}} (Val:SortEnvCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortExp{}, inj{SortExp{}, SortKItem{}} (Val:SortExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortExternalsCellOpt{}, inj{SortExternalsCellOpt{}, SortKItem{}} (Val:SortExternalsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCell{}, inj{SortThreadsCell{}, SortKItem{}} (Val:SortThreadsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOInt{}, inj{SortIOInt{}, SortKItem{}} (Val:SortIOInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOString{}, inj{SortIOString{}, SortKItem{}} (Val:SortIOString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInputCell{}, inj{SortInputCell{}, SortKItem{}} (Val:SortInputCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutputCell{}, inj{SortOutputCell{}, SortKItem{}} (Val:SortOutputCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortExternal{}, inj{SortExternal{}, SortKItem{}} (Val:SortExternal{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOFile{}, inj{SortIOFile{}, SortKItem{}} (Val:SortIOFile{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStartupCellOpt{}, inj{SortStartupCellOpt{}, SortKItem{}} (Val:SortStartupCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (Val:SortGeneratedTopCellFragment{})), \bottom{SortKItem{}}())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortExternalsCellOpt{}} (LblnoExternalsCell{}(), \or{SortExternalsCellOpt{}} (\exists{SortExternalsCellOpt{}} (Val:SortExternalsCell{}, inj{SortExternalsCell{}, SortExternalsCellOpt{}} (Val:SortExternalsCell{})), \bottom{SortExternalsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortThreadsCell{}} (\exists{SortThreadsCell{}} (X0:SortThreadCellMap{}, Lbl'-LT-'threads'-GT-'{}(X0:SortThreadCellMap{})), \bottom{SortThreadsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortInt{}, inj{SortInt{}, SortIOInt{}} (Val:SortInt{})), \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOInt{}} (Val:SortIOError{})), \bottom{SortIOInt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortString{}, inj{SortString{}, SortIOString{}} (Val:SortString{})), \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOString{}} (Val:SortIOError{})), \bottom{SortIOString{}}())) [constructor{}()] // no junk
  axiom{} \or{SortInputCell{}} (\exists{SortInputCell{}} (X0:SortList{}, Lbl'-LT-'input'-GT-'{}(X0:SortList{})), \bottom{SortInputCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\exists{SortId{}} (Val:SortVariable{}, inj{SortVariable{}, SortId{}} (Val:SortVariable{})), \or{SortId{}} (\exists{SortId{}} (Val:SortChannel{}, inj{SortChannel{}, SortId{}} (Val:SortChannel{})), \bottom{SortId{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortInt{}, Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortInt{}, Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortString{}, \exists{SortStream{}} (X1:SortString{}, Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(X0:SortString{}, X1:SortString{}))), \bottom{SortStream{}}())))) [constructor{}()] // no junk
  axiom{} \or{SortOutputCell{}} (\exists{SortOutputCell{}} (X0:SortList{}, Lbl'-LT-'output'-GT-'{}(X0:SortList{})), \bottom{SortOutputCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortExternal{}} (\exists{SortExternal{}} (X0:SortChannel{}, Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(X0:SortChannel{})), \bottom{SortExternal{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOFile{}} (\exists{SortIOFile{}} (X0:SortString{}, \exists{SortIOFile{}} (X1:SortInt{}, Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}))), \or{SortIOFile{}} (\exists{SortIOFile{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOFile{}} (Val:SortIOError{})), \bottom{SortIOFile{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortMap{}}() [constructor{}()] // no junk
  axiom{} \or{SortStartupCellOpt{}} (LblnoStartupCell{}(), \or{SortStartupCellOpt{}} (\exists{SortStartupCellOpt{}} (Val:SortStartupCell{}, inj{SortStartupCell{}, SortStartupCellOpt{}} (Val:SortStartupCell{})), \bottom{SortStartupCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCellFragment{}} (\exists{SortGeneratedTopCellFragment{}} (X0:SortStartupCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X1:SortExternalsCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X2:SortThreadsCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X3:SortInputCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X4:SortOutputCellOpt{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortStartupCellOpt{}, X1:SortExternalsCellOpt{}, X2:SortThreadsCellOpt{}, X3:SortInputCellOpt{}, X4:SortOutputCellOpt{})))))), \bottom{SortGeneratedTopCellFragment{}}()) [constructor{}()] // no junk

// rules
// rule `#freshChannel(_)_PCL_Channel_Int`(I)=>`StringToChannel(_)_PCL_Channel_String`(`_+String__STRING-COMMON_String_String_String`(#token("\"#c_\"","String"),`Int2String(_)_STRING-COMMON_String_Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8f0dc9ad68886e23ac8856ebb476cc1319d061bdd305aca8330f2c79d2e103a7), org.kframework.attributes.Location(Location(104,8,104,72)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )),
    \equals{SortChannel{},R} (
      Lbl'Hash'freshChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'Int{}(X0:SortInt{}),
     \and{SortChannel{}} (
       LblStringToChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(\dv{SortString{}}("#c_"),LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(VarI:SortInt{}))),
        \top{SortChannel{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,8,104,72)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8f0dc9ad68886e23ac8856ebb476cc1319d061bdd305aca8330f2c79d2e103a7")]

// rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{K}(C,B1,_0)=>B1 requires C ensures #token("true","Bool") [UNIQUE_ID(2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2), org.kframework.attributes.Location(Location(2087,8,2087,59)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarC:SortBool{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            VarB1:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X2:SortK{},
            Var'Unds'0:SortK{}
          ),
          \top{R} ()
        )))),
    \equals{SortK{},R} (
      Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(X0:SortBool{},X1:SortK{},X2:SortK{}),
     \and{SortK{}} (
       VarB1:SortK{},
        \top{SortK{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2087,8,2087,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2")]

// rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{K}(C,_0,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [UNIQUE_ID(651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa), org.kframework.attributes.Location(Location(2088,8,2088,67)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarC:SortBool{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            Var'Unds'0:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X2:SortK{},
            VarB2:SortK{}
          ),
          \top{R} ()
        )))),
    \equals{SortK{},R} (
      Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(X0:SortBool{},X1:SortK{},X2:SortK{}),
     \and{SortK{}} (
       VarB2:SortK{},
        \top{SortK{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2088,8,2088,67)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa")]

// rule `#open(_)_K-IO_IOInt_String`(S)=>`#open(_,_)_K-IO_IOInt_String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9), org.kframework.attributes.Location(Location(2276,8,2276,48)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS:SortString{}
          ),
          \top{R} ()
        )),
    \equals{SortIOInt{},R} (
      Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(X0:SortString{}),
     \and{SortIOInt{}} (
       Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("r+")),
        \top{SortIOInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2276,8,2276,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9")]

// rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162), org.kframework.attributes.Location(Location(2373,8,2373,20)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("2"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2373,8,2373,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162")]

// rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3), org.kframework.attributes.Location(Location(2371,8,2371,19)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("0"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2371,8,2371,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3")]

// rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c), org.kframework.attributes.Location(Location(2372,8,2372,20)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2372,8,2372,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c")]

// rule `<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Variable,KItem}(X)~>_DotVar3),`<env>`(`_Map_`(`_|->_`(inj{Variable,KItem}(X),C),_DotVar4)))),_DotVar1)),_2,_3,_4)=>`<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(C~>_DotVar3),`<env>`(`_Map_`(`_|->_`(inj{Variable,KItem}(X),C),_DotVar4)))),_DotVar1)),_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e25bcff5b522da2460ff0090e327cda708c234b3bafab514bbde09c0b315b85), cool-like, org.kframework.attributes.Location(Location(132,5,133,31)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule7LHS{}(SortKItem{},SortVariable{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortIdCell{},SortK{},SortMap{}) : SortGeneratedTopCell{}
  where rule7LHS{}(VarC:SortKItem{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar4:SortMap{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),VarC:SortKItem{}),Var'Unds'DotVar4:SortMap{})))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule7LHS{}(VarC:SortKItem{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar4:SortMap{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(VarC:SortKItem{},Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),VarC:SortKItem{}),Var'Unds'DotVar4:SortMap{})))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(132,5,133,31)"), UNIQUE'Unds'ID{}("8e25bcff5b522da2460ff0090e327cda708c234b3bafab514bbde09c0b315b85")]

// rule `<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(`fresh_{_}_PCL-SYNTAX_Process_Variable_Process`(X,P))~>_DotVar3),`<env>`(E))),_DotVar1)),_2,`<generatedCounter>`(#Fresh),_3)=>`<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(P)~>_DotVar3),`<env>`(`Map:update`(E,inj{Variable,KItem}(X),inj{Channel,KItem}(`#freshChannel(_)_PCL_Channel_Int`(`_+Int_`(#Fresh,#token("0","Int")))))))),_DotVar1)),_2,`<generatedCounter>`(`_+Int_`(#Fresh,#token("1","Int"))),_3) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(803be5d8c576ddd0367cf7ea8faf83600ab8edf24d699ac02aac40f6e0b60073), org.kframework.attributes.Location(Location(140,5,141,44)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule8LHS{}(SortInt{},SortMap{},SortProcess{},SortVariable{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortOutputCell{},SortThreadCellMap{},SortIdCell{},SortK{}) : SortGeneratedTopCell{}
  where rule8LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblfresh'UndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Process{}(VarX:SortVariable{},VarP:SortProcess{})),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Var'Hash'Fresh:SortInt{}),Var'Unds'3:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule8LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(LblMap'Coln'update{}(VarE:SortMap{},inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),inj{SortChannel{}, SortKItem{}}(Lbl'Hash'freshChannel'LParUndsRParUnds'PCL'Unds'Channel'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))))))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("1"))),Var'Unds'3:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(140,5,141,44)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("803be5d8c576ddd0367cf7ea8faf83600ab8edf24d699ac02aac40f6e0b60073")]

// rule `<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(`let_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process`(X,C,P))~>_DotVar3),`<env>`(E))),_DotVar1)),_2,_3,_4)=>`<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(P)~>_DotVar3),`<env>`(`Map:update`(E,inj{Variable,KItem}(X),inj{Exp,KItem}(C))))),_DotVar1)),_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(180dd1e8e6af65de80cdead6b0a4e30d2a4bbaa4265615fccd8a0fd76c141119), org.kframework.attributes.Location(Location(136,5,137,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule9LHS{}(SortExp{},SortMap{},SortProcess{},SortVariable{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortIdCell{},SortK{}) : SortGeneratedTopCell{}
  where rule9LHS{}(VarC:SortExp{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(VarX:SortVariable{},VarC:SortExp{},VarP:SortProcess{})),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule9LHS{}(VarC:SortExp{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(LblMap'Coln'update{}(VarE:SortMap{},inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),inj{SortExp{}, SortKItem{}}(VarC:SortExp{}))))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(136,5,137,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("180dd1e8e6af65de80cdead6b0a4e30d2a4bbaa4265615fccd8a0fd76c141119")]

// rule `<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{Process,KItem}(`#read(_)_PCL-HOOKS_Process_Variable`(X))~>_DotVar4),`<env>`(E))),_DotVar2)),`<input>`(`_List_`(`ListItem`(inj{Int,KItem}(V)),_DotVar1)),_2,_3)=>`<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(_DotVar4),`<env>`(`Map:update`(E,inj{Variable,KItem}(X),inj{Int,KItem}(V))))),_DotVar2)),`<input>`(`_List_`(`.List`(.KList),_DotVar1)),_2,_3) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c5558fbd01d5349e2994ef3d32c17884c0e120db929c0de46777642e12454222), org.kframework.attributes.Location(Location(83,5,85,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule10LHS{}(SortMap{},SortInt{},SortVariable{},SortStartupCell{},SortExternalsCell{},SortGeneratedCounterCell{},SortOutputCell{},SortList{},SortThreadCellMap{},SortIdCell{},SortK{}) : SortGeneratedTopCell{}
  where rule10LHS{}(VarE:SortMap{},VarV:SortInt{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(VarX:SortVariable{})),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(VarV:SortInt{})),Var'Unds'DotVar1:SortList{})),Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule10LHS{}(VarE:SortMap{},VarV:SortInt{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Lbl'-LT-'env'-GT-'{}(LblMap'Coln'update{}(VarE:SortMap{},inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{}))))),Var'Unds'DotVar2:SortThreadCellMap{})),Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),Var'Unds'DotVar1:SortList{})),Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(83,5,85,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c5558fbd01d5349e2994ef3d32c17884c0e120db929c0de46777642e12454222")]

// rule `<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(`(_|_)_PCL-SYNTAX_Process_Process_Process`(P,Q))~>_DotVar3),`<env>`(E))),`.ThreadCellMap`(.KList)),_DotVar1)),_2,`<generatedCounter>`(#Fresh),_3)=>`<generatedTop>`(_0,_1,`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(P)~>_DotVar3),`<env>`(E))),`ThreadCellMapItem`(`<id>`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))),`<thread>`(`<id>`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))),`<k>`(inj{Process,KItem}(Q)),`<env>`(E)))),_DotVar1)),_2,`<generatedCounter>`(`_+Int_`(#Fresh,#token("1","Int"))),_3) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(53d34c30935a593a934045e739181bd20a63c47681bb40cea2ffad637d2a3249), org.kframework.attributes.Location(Location(160,5,173,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule11LHS{}(SortInt{},SortMap{},SortProcess{},SortProcess{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortOutputCell{},SortThreadCellMap{},SortIdCell{},SortK{}) : SortGeneratedTopCell{}
  where rule11LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(VarP:SortProcess{},VarQ:SortProcess{})),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),Lbl'Stop'ThreadCellMap{}()),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Var'Hash'Fresh:SortInt{}),Var'Unds'3:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule11LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),LblThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))),Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))),Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarQ:SortProcess{}),dotk{}())),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{})))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("1"))),Var'Unds'3:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(160,5,173,15)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("53d34c30935a593a934045e739181bd20a63c47681bb40cea2ffad637d2a3249")]

// rule `<generatedTop>`(_1,_2,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{Process,KItem}(`#read(_)_PCL-HOOKS_Process_Variable`(X))~>_DotVar4),`<env>`(E))),_DotVar2)) #as _5,`<input>`(`_List_`(`_List_`(`.List`(.KList),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(_0))))),_DotVar1)),_3,_4)=>`<generatedTop>`(_1,_2,_5,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"Int\"","String"),#token("\" \\n\\t\\r\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(_0))))),_DotVar1)),_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6a185e7c5671af4b5170214ce70dcdb35a9b03dadc583c63c4a4779cd3da6c97), org.kframework.attributes.Location(Location(83,5,85,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule12LHS{}(SortMap{},SortVariable{},SortString{},SortStartupCell{},SortExternalsCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadsCell{},SortList{},SortThreadCellMap{},SortIdCell{},SortK{}) : SortGeneratedTopCell{}
  where rule12LHS{}(VarE:SortMap{},VarX:SortVariable{},Var'Unds'0:SortString{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},\and{SortThreadsCell{}}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(VarX:SortVariable{})),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'5:SortThreadsCell{}),Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'0:SortString{}),dotk{}()))))),Var'Unds'DotVar1:SortList{})),Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule12LHS{}(VarE:SortMap{},VarX:SortVariable{},Var'Unds'0:SortString{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("Int"),\dv{SortString{}}(" \n\t\r")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'0:SortString{}),dotk{}()))))),Var'Unds'DotVar1:SortList{})),Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(83,5,85,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("6a185e7c5671af4b5170214ce70dcdb35a9b03dadc583c63c4a4779cd3da6c97")]

// rule `<generatedTop>`(_1,_2,_3,_4,_5,`<output>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(N))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_0)))=>`<generatedTop>`(_1,_2,_3,_4,_5,`<output>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(`project:Int`(`#write(_,_)_K-IO_K_Int_String`(N,S)~>inj{Int,KItem}(N))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String")))))),_0))) requires `_=/=String__STRING-COMMON_Bool_String_String`(S,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(829e7a581bda9035541ca05d9bfdcdc5eaaead3bd4adcbcd0064665c87d15682), label(STDOUT-STREAM.stdoutWrite), org.kframework.attributes.Location(Location(2581,8,2587,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(30), stream]
  alias rule13LHS{}(SortInt{},SortString{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{}) : SortGeneratedTopCell{}
  where rule13LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'0:SortList{})))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE25{}()),
      rule13LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lblproject'Coln'Int{}(append{}(Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'String{}(VarN:SortInt{},VarS:SortString{}),kseq{}(inj{SortInt{}, SortKItem{}}(VarN:SortInt{}),dotk{}())))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}()))))),Var'Unds'0:SortList{})))))
  [label{}("STDOUT-STREAM.stdoutWrite"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2581,8,2587,28)"), stream{}(""), priority{}("30"), UNIQUE'Unds'ID{}("829e7a581bda9035541ca05d9bfdcdc5eaaead3bd4adcbcd0064665c87d15682")]

// rule `<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(Sort,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_0)),_4,_5)=>`<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(`#parseKAST(_)_K-REFLECTION_Sort_String`{KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,#token("0","Int"),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int"))))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,`_+Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("1","Int")),`lengthString(_)_STRING-COMMON_Int_String`(S))))))),_0)),_4,_5) requires `_andBool_`(`_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")),`_==String__STRING-COMMON_Bool_String_String`(Sort,#token("\"K\"","String"))),`_>Int_`(`lengthString(_)_STRING-COMMON_Int_String`(S),#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(96d169337c9fb07dd95393df3fd99efb7f2e7e9e15ad2259b3ac8c95905547e1), label(STDIN-STREAM.stdinParseArbitrarySort), org.kframework.attributes.Location(Location(2487,8,2495,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule14LHS{}(SortString{},SortString{},SortString{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortGeneratedCounterCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule14LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarSort:SortString{},\dv{SortString{}}("K"))),Lbl'Unds-GT-'Int'Unds'{}(LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}),\dv{SortInt{}}("1"))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(VarSort:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule14LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(Lbl'Hash'parseKAST'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},\dv{SortInt{}}("0"),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0"))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("1")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}))),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [label{}("STDIN-STREAM.stdinParseArbitrarySort"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2487,8,2495,38)"), stream{}(""), UNIQUE'Unds'ID{}("96d169337c9fb07dd95393df3fd99efb7f2e7e9e15ad2259b3ac8c95905547e1")]

// rule `<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(Sort,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_0)),_4,_5)=>`<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(Sort,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S))))))),_0)),_4,_5) requires `_andBool_`(`_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")),`_=/=String__STRING-COMMON_Bool_String_String`(Sort,#token("\"String\"","String"))),`_<=Int_`(`lengthString(_)_STRING-COMMON_Int_String`(S),#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(3460632040d4a6b6996153112abdd94b045405f44caa9ced1a89d5bc3ccfc51e), label(STDIN-STREAM.stdinTrim), org.kframework.attributes.Location(Location(2499,8,2506,39)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule15LHS{}(SortString{},SortString{},SortString{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortGeneratedCounterCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule15LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarSort:SortString{},\dv{SortString{}}("String"))),Lbl'Unds-LT-Eqls'Int'Unds'{}(LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}),\dv{SortInt{}}("1"))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(VarSort:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule15LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(VarSort:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}))),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [label{}("STDIN-STREAM.stdinTrim"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2499,8,2506,39)"), stream{}(""), UNIQUE'Unds'ID{}("3460632040d4a6b6996153112abdd94b045405f44caa9ced1a89d5bc3ccfc51e")]

// rule `<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"Int\"","String"),Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_0)),_4,_5)=>`<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Int,KItem}(`String2Int(_)_STRING-COMMON_Int_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,#token("0","Int"),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")))))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,`_+Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("1","Int")),`lengthString(_)_STRING-COMMON_Int_String`(S))))))),_0)),_4,_5) requires `_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")),`_>Int_`(`lengthString(_)_STRING-COMMON_Int_String`(S),#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(276cf77a317ebbe308a0a353690291cbf2a01f9dd3f1681037f881a9106caaa0), label(STDIN-STREAM.stdinParseInt), org.kframework.attributes.Location(Location(2476,8,2483,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule16LHS{}(SortString{},SortString{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortGeneratedCounterCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule16LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),Lbl'Unds-GT-'Int'Unds'{}(LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}),\dv{SortInt{}}("1"))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("Int"),VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule16LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(LblString2Int'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},\dv{SortInt{}}("0"),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("1")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}))),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [label{}("STDIN-STREAM.stdinParseInt"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2476,8,2483,38)"), stream{}(""), UNIQUE'Unds'ID{}("276cf77a317ebbe308a0a353690291cbf2a01f9dd3f1681037f881a9106caaa0")]

// rule `<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"String\"","String"),Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_0)),_4,_5)=>`<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{String,KItem}(S)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String")))))),_0)),_4,_5) requires `_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [UNIQUE_ID(3ae93598c3863f4e83c9e0f431bf1e1702334accac62a68621651783a7e8247a), label(STDIN-STREAM.stdinParseString), org.kframework.attributes.Location(Location(2466,8,2471,50)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule17LHS{}(SortString{},SortString{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortGeneratedCounterCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule17LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("String"),VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule17LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortString{}, SortKItem{}}(VarS:SortString{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}()))))),Var'Unds'0:SortList{})),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [label{}("STDIN-STREAM.stdinParseString"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2466,8,2471,50)"), stream{}(""), UNIQUE'Unds'ID{}("3ae93598c3863f4e83c9e0f431bf1e1702334accac62a68621651783a7e8247a")]

// rule `<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(_0,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(N))))),_4,_5)=>`<generatedTop>`(_1,_2,_3,`<input>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(_0,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(S,`chrChar(_)_STRING-COMMON_String_Int`(`project:Int`(inj{IOInt,KItem}(`#getc(_)_K-IO_IOInt_Int`(N)))))))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(N))))),_4,_5) requires `_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [UNIQUE_ID(b30d0d76abe8106854fc25ad1443e672cd6a0c1de7a1016001a5af430b38090b), label(STDIN-STREAM.stdinGetc), org.kframework.attributes.Location(Location(2455,8,2461,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(200), stream]
  alias rule18LHS{}(SortString{},SortInt{},SortString{},SortString{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortGeneratedCounterCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule18LHS{}(VarDelimiters:SortString{},VarN:SortInt{},VarS:SortString{},Var'Unds'0:SortString{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Var'Unds'0:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))))),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE110{}()),
      rule18LHS{}(VarDelimiters:SortString{},VarN:SortInt{},VarS:SortString{},Var'Unds'0:SortString{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Var'Unds'0:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarS:SortString{},LblchrChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(Lblproject'Coln'Int{}(kseq{}(inj{SortIOInt{}, SortKItem{}}(Lbl'Hash'getc'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(VarN:SortInt{})),dotk{}()))))),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))))),Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [label{}("STDIN-STREAM.stdinGetc"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2455,8,2461,49)"), stream{}(""), priority{}("200"), UNIQUE'Unds'ID{}("b30d0d76abe8106854fc25ad1443e672cd6a0c1de7a1016001a5af430b38090b")]

// rule `<generatedTop>`(_2,`<externals>`(E) #as _6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`in_(_)_PCL-SYNTAX_Process_Id_Variable`(inj{Channel,Id}(C),X))~>_DotVar3),_1)),_DotVar1)),_3,_4,_5)=>`<generatedTop>`(_2,_6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#recv(_,_)_PCL-HOOKS_Process_Channel_Variable`(C,X))~>_DotVar3),_1)),_DotVar1)),_3,_4,_5) requires `Set:in`(inj{Channel,KItem}(C),E) ensures #token("true","Bool") [UNIQUE_ID(1234a68448c2293f5db7b652c3a02133e538f61e05a0db6f59413cd5291c8aff), org.kframework.attributes.Location(Location(65,5,67,20)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(40)]
  alias rule19LHS{}(SortChannel{},SortSet{},SortVariable{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortExternalsCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule19LHS{}(VarC:SortChannel{},VarE:SortSet{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        LblSet'Coln'in{}(inj{SortChannel{}, SortKItem{}}(VarC:SortChannel{}),VarE:SortSet{}),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},\and{SortExternalsCell{}}(Lbl'-LT-'externals'-GT-'{}(VarE:SortSet{}),Var'Unds'6:SortExternalsCell{}),Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(inj{SortChannel{}, SortId{}}(VarC:SortChannel{}),VarX:SortVariable{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule19LHS{}(VarC:SortChannel{},VarE:SortSet{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(VarC:SortChannel{},VarX:SortVariable{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(65,5,67,20)"), priority{}("40"), UNIQUE'Unds'ID{}("1234a68448c2293f5db7b652c3a02133e538f61e05a0db6f59413cd5291c8aff")]

// rule `<generatedTop>`(_2,`<externals>`(E) #as _6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(inj{Channel,Id}(C),V))~>_DotVar3),_1)),_DotVar1)),_3,_4,_5)=>`<generatedTop>`(_2,_6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(C,V))~>_DotVar3),_1)),_DotVar1)),_3,_4,_5) requires `Set:in`(inj{Channel,KItem}(C),E) ensures #token("true","Bool") [UNIQUE_ID(b2d4f9574078304bee24b9f83055b9329de024794f0cefe7b0f93d4c4aae5082), org.kframework.attributes.Location(Location(71,5,73,20)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(40)]
  alias rule20LHS{}(SortChannel{},SortSet{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortExternalsCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule20LHS{}(VarC:SortChannel{},VarE:SortSet{},VarV:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        LblSet'Coln'in{}(inj{SortChannel{}, SortKItem{}}(VarC:SortChannel{}),VarE:SortSet{}),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},\and{SortExternalsCell{}}(Lbl'-LT-'externals'-GT-'{}(VarE:SortSet{}),Var'Unds'6:SortExternalsCell{}),Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(inj{SortChannel{}, SortId{}}(VarC:SortChannel{}),VarV:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule20LHS{}(VarC:SortChannel{},VarE:SortSet{},VarV:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(VarC:SortChannel{},VarV:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(71,5,73,20)"), priority{}("40"), UNIQUE'Unds'ID{}("b2d4f9574078304bee24b9f83055b9329de024794f0cefe7b0f93d4c4aae5082")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(.K),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`.ThreadCellMap`(.KList),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2fecdc377a60798274b37bdb4a82614f42a7cf05c646cef4121b77447512aa8e), org.kframework.attributes.Location(Location(180,5,183,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule21LHS{}(SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{}) : SortGeneratedTopCell{}
  where rule21LHS{}(Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule21LHS{}(Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Stop'ThreadCellMap{}(),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(180,5,183,15)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("2fecdc377a60798274b37bdb4a82614f42a7cf05c646cef4121b77447512aa8e")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer#send(_,_)_PCL-HOOKS_Process_Channel_Exp1_`(inj{Channel,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(3d17cfaa2e86989c60b4816cd0cc40007bcb2568d369044440431ebaf4bbb688), cool, cool-like, klabel(#send), org.kframework.attributes.Location(Location(61,22,61,52)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(2)]
  alias rule22LHS{}(SortExp{},SortChannel{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule22LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(kseq{}(inj{SortChannel{}, SortKItem{}}(VarK0:SortChannel{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule22LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(VarK0:SortChannel{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), klabel{}("#send"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(61,22,61,52)"), UNIQUE'Unds'ID{}("3d17cfaa2e86989c60b4816cd0cc40007bcb2568d369044440431ebaf4bbb688")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer-__PCL-SYNTAX_Exp_Exp0_`(.KList)~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`-__PCL-SYNTAX_Exp_Exp`(HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(ca99abbb635f2814948a8532e848a854b74502f4ecf97d97f5aa7ce81df5fe58), cool, cool-like, non-assoc, org.kframework.attributes.Location(Location(14,18,14,48)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule23LHS{}(SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule23LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule23LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), non-assoc{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,18,14,48)"), UNIQUE'Unds'ID{}("ca99abbb635f2814948a8532e848a854b74502f4ecf97d97f5aa7ce81df5fe58")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process0_`(inj{Exp,KItem}(K1),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(HOLE,K1,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(5a9ab72c283c0381ce8c21ecf9f1db0b53b0b0c225197c136a7ca7deb94fa907), cool, cool-like, org.kframework.attributes.Location(Location(31,22,31,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1, 2)]
  alias rule24LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule24LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule24LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}("1, 2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,22,31,71)"), UNIQUE'Unds'ID{}("5a9ab72c283c0381ce8c21ecf9f1db0b53b0b0c225197c136a7ca7deb94fa907")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process1_`(inj{Exp,KItem}(K0),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(K0,HOLE,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(ecc42ae915461764c71cac4a2a5045d9bf50e0250d78e504c10839bf8ccd673b), cool, cool-like, org.kframework.attributes.Location(Location(31,22,31,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1, 2)]
  alias rule25LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule25LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule25LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(VarK0:SortExp{},VarHOLE:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}("1, 2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,22,31,71)"), UNIQUE'Unds'ID{}("ecc42ae915461764c71cac4a2a5045d9bf50e0250d78e504c10839bf8ccd673b")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_*__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_*__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(0a2bf92087d278e1c27198b698fa9ef9ef6cdd33f21af7db6027376f284be463), cool, cool-like, left, org.kframework.attributes.Location(Location(15,18,15,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule26LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule26LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule26LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,18,15,43)"), UNIQUE'Unds'ID{}("0a2bf92087d278e1c27198b698fa9ef9ef6cdd33f21af7db6027376f284be463")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_*__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_*__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(b0fd28541e6577dbbf645d414da4ae38520689f75f0210cd8e92b8680fcf31e2), cool, cool-like, left, org.kframework.attributes.Location(Location(15,18,15,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule27LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule27LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule27LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,18,15,43)"), UNIQUE'Unds'ID{}("b0fd28541e6577dbbf645d414da4ae38520689f75f0210cd8e92b8680fcf31e2")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_+__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_+__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(b890b1f8eec7350ada9d347e01baabca80a5bd9eaabfac4fa7ae2ece0a5d4953), cool, cool-like, left, org.kframework.attributes.Location(Location(17,18,17,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule28LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule28LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule28LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,18,17,43)"), UNIQUE'Unds'ID{}("b890b1f8eec7350ada9d347e01baabca80a5bd9eaabfac4fa7ae2ece0a5d4953")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_+__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_+__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(77808493ab2f19ed7af2efb1db6648f94e6782a2879357ef0311113aa44f6cce), cool, cool-like, left, org.kframework.attributes.Location(Location(17,18,17,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule29LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule29LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule29LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,18,17,43)"), UNIQUE'Unds'ID{}("77808493ab2f19ed7af2efb1db6648f94e6782a2879357ef0311113aa44f6cce")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_-__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_-__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(2c19c41b167b50ed2b57263226174ec107b4091efeba633ca3e0489ebdefd30f), cool, cool-like, left, org.kframework.attributes.Location(Location(18,18,18,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule30LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule30LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule30LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,18,18,43)"), UNIQUE'Unds'ID{}("2c19c41b167b50ed2b57263226174ec107b4091efeba633ca3e0489ebdefd30f")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_-__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_-__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(c8a2a5fabdbac80d5275e298858ab39d4212a592ef0b3798e55178a5cbcaf55c), cool, cool-like, left, org.kframework.attributes.Location(Location(18,18,18,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule31LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule31LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule31LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,18,18,43)"), UNIQUE'Unds'ID{}("c8a2a5fabdbac80d5275e298858ab39d4212a592ef0b3798e55178a5cbcaf55c")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_/__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_/__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(524c56f588dba0596643484ecafcd9c7f509092b4b81480e27b2488ed2ffd404), cool, cool-like, left, org.kframework.attributes.Location(Location(16,18,16,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule32LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule32LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule32LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,18,16,43)"), UNIQUE'Unds'ID{}("524c56f588dba0596643484ecafcd9c7f509092b4b81480e27b2488ed2ffd404")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_/__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_/__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(226c30633ad6e5b8873c6e2e438811132051559db659a8904f6aa430bd7ea6d1), cool, cool-like, left, org.kframework.attributes.Location(Location(16,18,16,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule33LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule33LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule33LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,18,16,43)"), UNIQUE'Unds'ID{}("226c30633ad6e5b8873c6e2e438811132051559db659a8904f6aa430bd7ea6d1")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezerin_(_)_PCL-SYNTAX_Process_Id_Variable0_`(inj{Variable,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`in_(_)_PCL-SYNTAX_Process_Id_Variable`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(inj{Id,Exp}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8bad8e6985df508e51649568b6c0da59b08ff8e798b8bbcc014db751827a981d), cool, cool-like, org.kframework.attributes.Location(Location(23,22,23,58)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1)]
  alias rule34LHS{}(SortId{},SortVariable{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule34LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(inj{SortId{}, SortExp{}}(VarHOLE:SortId{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(kseq{}(inj{SortVariable{}, SortKItem{}}(VarK1:SortVariable{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule34LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(VarHOLE:SortId{},VarK1:SortVariable{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,22,23,58)"), UNIQUE'Unds'ID{}("8bad8e6985df508e51649568b6c0da59b08ff8e798b8bbcc014db751827a981d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezerlet_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process1_`(inj{Variable,KItem}(K0),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`let_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process`(K0,HOLE,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(12e7d809502d0d745db97c36870a9eb7f4e9aabfa0fe0eac9d68f2a18a7ce8df), cool, cool-like, org.kframework.attributes.Location(Location(30,22,30,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(2)]
  alias rule35LHS{}(SortExp{},SortVariable{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule35LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(kseq{}(inj{SortVariable{}, SortKItem{}}(VarK0:SortVariable{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule35LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(VarK0:SortVariable{},VarHOLE:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,22,30,71)"), UNIQUE'Unds'ID{}("12e7d809502d0d745db97c36870a9eb7f4e9aabfa0fe0eac9d68f2a18a7ce8df")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(inj{Id,Exp}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b622e60d280a163bcc94ddf3316ee7e98cb4d463c02400b23709121cb29a4fe0), cool, cool-like, org.kframework.attributes.Location(Location(24,22,24,55)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule36LHS{}(SortId{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule36LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(inj{SortId{}, SortExp{}}(VarHOLE:SortId{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule36LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(VarHOLE:SortId{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,22,24,55)"), UNIQUE'Unds'ID{}("b622e60d280a163bcc94ddf3316ee7e98cb4d463c02400b23709121cb29a4fe0")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp1_`(inj{Id,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),isKResult(HOLE)) ensures #token("true","Bool") [UNIQUE_ID(742853d7501988d8fb5ea7abbdc951ae9988181f4814418c79fcb37a778c3a89), cool, cool-like, org.kframework.attributes.Location(Location(24,22,24,55)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule37LHS{}(SortExp{},SortId{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule37LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(VarHOLE:SortExp{})),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule37LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(VarK0:SortId{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,22,24,55)"), UNIQUE'Unds'ID{}("742853d7501988d8fb5ea7abbdc951ae9988181f4814418c79fcb37a778c3a89")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`!(_)_PCL-SYNTAX_Process_Process`(P))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`(_|_)_PCL-SYNTAX_Process_Process_Process`(P,`!(_)_PCL-SYNTAX_Process_Process`(P)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(25c9f4e6ba8e10672e66d916198ba6796626385d9a2f6c96a5f450e9de1a6ab4), org.kframework.attributes.Location(Location(176,5,176,40)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(110)]
  alias rule38LHS{}(SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule38LHS{}(VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(VarP:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE50{}()),
      rule38LHS{}(VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LParUndsPipeUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(VarP:SortProcess{},Lbl'BangLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Process{}(VarP:SortProcess{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(176,5,176,40)"), priority{}("110"), UNIQUE'Unds'ID{}("25c9f4e6ba8e10672e66d916198ba6796626385d9a2f6c96a5f450e9de1a6ab4")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#recv(_,_)_PCL-HOOKS_Process_Channel_Variable`(#token("@stdio","Channel"),X))~>_DotVar4),_1)),_DotVar2)),_4,_5,`<output>`(`_List_`(_DotVar1,`.List`(.KList))))=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#read(_)_PCL-HOOKS_Process_Variable`(X))~>_DotVar4),_1)),_DotVar2)),_4,_5,`<output>`(`_List_`(_DotVar1,`ListItem`(inj{String,KItem}(#token("\"> \"","String")))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8d36086d29b4339d09641fb4c51df6f26500646eacf8494ffd82a5e35d471d9d), org.kframework.attributes.Location(Location(79,5,80,50)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule39LHS{}(SortVariable{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortList{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule39LHS{}(VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'recv'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Variable{}(\dv{SortChannel{}}("@stdio"),VarX:SortVariable{})),Var'Unds'DotVar4:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar1:SortList{},Lbl'Stop'List{}())))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule39LHS{}(VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'read'LParUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Variable{}(VarX:SortVariable{})),Var'Unds'DotVar4:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar1:SortList{},LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("> "))))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(79,5,80,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8d36086d29b4339d09641fb4c51df6f26500646eacf8494ffd82a5e35d471d9d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer#send(_,_)_PCL-HOOKS_Process_Channel_Exp1_`(inj{Channel,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1e2263240e13eacef06d7dc0e0fc597c23e087e5383cd5aa26dd301485abb3f6), heat, klabel(#send), org.kframework.attributes.Location(Location(61,22,61,52)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(2)]
  alias rule40LHS{}(SortExp{},SortChannel{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule40LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(VarK0:SortChannel{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule40LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp1'Unds'{}(kseq{}(inj{SortChannel{}, SortKItem{}}(VarK0:SortChannel{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), klabel{}("#send"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(61,22,61,52)"), UNIQUE'Unds'ID{}("1e2263240e13eacef06d7dc0e0fc597c23e087e5383cd5aa26dd301485abb3f6")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(#token("@stdio","Channel"),inj{Int,Exp}(V)))~>_DotVar4),_1)),_DotVar2)),_4,_5,`<output>`(`_List_`(_DotVar1,`.List`(.KList))))=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(_DotVar4),_1)),_DotVar2)),_4,_5,`<output>`(`_List_`(_DotVar1,`ListItem`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(`Int2String(_)_STRING-COMMON_String_Int`(V),#token("\"\\n\"","String"))))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(22a6e7fdf135c79aa5a116e8c8e3c3acbf423c46d207764522f70fcac89dbf6b), org.kframework.attributes.Location(Location(88,5,89,72)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule41LHS{}(SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortList{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule41LHS{}(VarV:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'Hash'send'LParUndsCommUndsRParUnds'PCL-HOOKS'Unds'Process'Unds'Channel'Unds'Exp{}(\dv{SortChannel{}}("@stdio"),inj{SortInt{}, SortExp{}}(VarV:SortInt{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar1:SortList{},Lbl'Stop'List{}())))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule41LHS{}(VarV:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar1:SortList{},LblListItem{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(VarV:SortInt{}),\dv{SortString{}}("\n")))))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(88,5,89,72)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("22a6e7fdf135c79aa5a116e8c8e3c3acbf423c46d207764522f70fcac89dbf6b")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`-__PCL-SYNTAX_Exp_Exp`(HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer-__PCL-SYNTAX_Exp_Exp0_`(.KList)~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(519e94d27bcb300a35b157a91afbaaca85c9d44b92efab68d77ffb584882098d), heat, non-assoc, org.kframework.attributes.Location(Location(14,18,14,48)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule42LHS{}(SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule42LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule42LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp0'Unds'{}(),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), non-assoc{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,18,14,48)"), UNIQUE'Unds'ID{}("519e94d27bcb300a35b157a91afbaaca85c9d44b92efab68d77ffb584882098d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`-__PCL-SYNTAX_Exp_Exp`(inj{Int,Exp}(I)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Int,KItem}(`_-Int_`(#token("0","Int"),I))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5e95ec641d694a304f0ce0899ac58e6c1b688fd651948b388ad153bed865a67b), org.kframework.attributes.Location(Location(205,8,205,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule43LHS{}(SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule43LHS{}(VarI:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp{}(inj{SortInt{}, SortExp{}}(VarI:SortInt{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule43LHS{}(VarI:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'Unds'{}(\dv{SortInt{}}("0"),VarI:SortInt{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(205,8,205,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5e95ec641d694a304f0ce0899ac58e6c1b688fd651948b388ad153bed865a67b")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(E1,E2,P))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(P)~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_==K_`(inj{Exp,KItem}(E1),inj{Exp,KItem}(E2)) ensures #token("true","Bool") [UNIQUE_ID(cad540ed1a72babf30ee02d39633c0b367bb4eca3371392e776191cf0725c0d3), org.kframework.attributes.Location(Location(186,5,187,23)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  alias rule44LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule44LHS{}(VarE1:SortExp{},VarE2:SortExp{},VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarE1:SortExp{}),dotk{}()),kseq{}(inj{SortExp{}, SortKItem{}}(VarE2:SortExp{}),dotk{}())),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(VarE1:SortExp{},VarE2:SortExp{},VarP:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule44LHS{}(VarE1:SortExp{},VarE2:SortExp{},VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(186,5,187,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("cad540ed1a72babf30ee02d39633c0b367bb4eca3371392e776191cf0725c0d3")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(HOLE,K1,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process0_`(inj{Exp,KItem}(K1),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1eab0ae0bd8fd0fe85d5666cc4237291612c627a9c86bb3ae539bde46f21b6f4), heat, org.kframework.attributes.Location(Location(31,22,31,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1, 2)]
  alias rule45LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule45LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule45LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}("1, 2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,22,31,71)"), UNIQUE'Unds'ID{}("1eab0ae0bd8fd0fe85d5666cc4237291612c627a9c86bb3ae539bde46f21b6f4")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(K0,HOLE,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process1_`(inj{Exp,KItem}(K0),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(cb3f517fd47831dcdad206b56f388496b1424d69bde792b8a46b2e5858906a0d), heat, org.kframework.attributes.Location(Location(31,22,31,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1, 2)]
  alias rule46LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule46LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(VarK0:SortExp{},VarHOLE:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule46LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}("1, 2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,22,31,71)"), UNIQUE'Unds'ID{}("cb3f517fd47831dcdad206b56f388496b1424d69bde792b8a46b2e5858906a0d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_*__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_*__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1deae160c4184beec2f3702bba59995fdd09de282d11d2f609c9b03959cc7f58), heat, left, org.kframework.attributes.Location(Location(15,18,15,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule47LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule47LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule47LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,18,15,43)"), UNIQUE'Unds'ID{}("1deae160c4184beec2f3702bba59995fdd09de282d11d2f609c9b03959cc7f58")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_*__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_*__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8b8d60b99d769b24e8b4a1780976102dfdf7b5214ec60df0914b4c86b8c6f61c), heat, left, org.kframework.attributes.Location(Location(15,18,15,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule48LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule48LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule48LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,18,15,43)"), UNIQUE'Unds'ID{}("8b8d60b99d769b24e8b4a1780976102dfdf7b5214ec60df0914b4c86b8c6f61c")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_*__PCL-SYNTAX_Exp_Exp_Exp`(inj{Int,Exp}(X),inj{Int,Exp}(Y)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Int,KItem}(`_*Int_`(X,Y))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6aaef278e4b7550c994bf0c844e7d886f2b96e06905ea7e1a7397acf54e26d79), org.kframework.attributes.Location(Location(206,8,206,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule49LHS{}(SortInt{},SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule49LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(inj{SortInt{}, SortExp{}}(VarX:SortInt{}),inj{SortInt{}, SortExp{}}(VarY:SortInt{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule49LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsStar'Int'Unds'{}(VarX:SortInt{},VarY:SortInt{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(206,8,206,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("6aaef278e4b7550c994bf0c844e7d886f2b96e06905ea7e1a7397acf54e26d79")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_+__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_+__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(5f84127ced68eb93a1d653685b0a5ae9fc0966a5acdaa78c346dd71882238d9d), heat, left, org.kframework.attributes.Location(Location(17,18,17,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule50LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule50LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule50LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,18,17,43)"), UNIQUE'Unds'ID{}("5f84127ced68eb93a1d653685b0a5ae9fc0966a5acdaa78c346dd71882238d9d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_+__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_+__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(bd980c11e0dfc01a683dc7aacf7cb30c10d8df8dab2794904ef88bfaaa836349), heat, left, org.kframework.attributes.Location(Location(17,18,17,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule51LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule51LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule51LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,18,17,43)"), UNIQUE'Unds'ID{}("bd980c11e0dfc01a683dc7aacf7cb30c10d8df8dab2794904ef88bfaaa836349")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_+__PCL-SYNTAX_Exp_Exp_Exp`(inj{Int,Exp}(X),inj{Int,Exp}(Y)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Int,KItem}(`_+Int_`(X,Y))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2c2189ee350555393f53a89859247d37176b48a135f9a0a31980313cb8aafc55), org.kframework.attributes.Location(Location(208,8,208,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule52LHS{}(SortInt{},SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule52LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(inj{SortInt{}, SortExp{}}(VarX:SortInt{}),inj{SortInt{}, SortExp{}}(VarY:SortInt{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule52LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarX:SortInt{},VarY:SortInt{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(208,8,208,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("2c2189ee350555393f53a89859247d37176b48a135f9a0a31980313cb8aafc55")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_-__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_-__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6dbadcba3942c4228901e9bb13a3536307ee533a46957bf7831e472df77d95fd), heat, left, org.kframework.attributes.Location(Location(18,18,18,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule53LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule53LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule53LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,18,18,43)"), UNIQUE'Unds'ID{}("6dbadcba3942c4228901e9bb13a3536307ee533a46957bf7831e472df77d95fd")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_-__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_-__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(00064625a63118afbed281c8a540e503f5bf00d0cbb783704ca46cf98f2823c7), heat, left, org.kframework.attributes.Location(Location(18,18,18,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule54LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule54LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule54LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,18,18,43)"), UNIQUE'Unds'ID{}("00064625a63118afbed281c8a540e503f5bf00d0cbb783704ca46cf98f2823c7")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_-__PCL-SYNTAX_Exp_Exp_Exp`(inj{Int,Exp}(X),inj{Int,Exp}(Y)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Int,KItem}(`_-Int_`(X,Y))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7c1760944b3519f20b9c0237394b682ada48a230af459d77fd9b87c63ee9bb06), org.kframework.attributes.Location(Location(209,8,209,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule55LHS{}(SortInt{},SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule55LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(inj{SortInt{}, SortExp{}}(VarX:SortInt{}),inj{SortInt{}, SortExp{}}(VarY:SortInt{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule55LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'Unds'{}(VarX:SortInt{},VarY:SortInt{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(209,8,209,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("7c1760944b3519f20b9c0237394b682ada48a230af459d77fd9b87c63ee9bb06")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`_.__PCL-SYNTAX_Process_Process_Process`(P,Q))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(P)~>inj{Process,KItem}(Q)~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(403a497bd1dd5752f266041d874924f2198fe4db424769126057e11b026349c2), org.kframework.attributes.Location(Location(129,5,129,32)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule56LHS{}(SortProcess{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule56LHS{}(VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'UndsStopUndsUnds'PCL-SYNTAX'Unds'Process'Unds'Process'Unds'Process{}(VarP:SortProcess{},VarQ:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule56LHS{}(VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),kseq{}(inj{SortProcess{}, SortKItem{}}(VarQ:SortProcess{}),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(129,5,129,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("403a497bd1dd5752f266041d874924f2198fe4db424769126057e11b026349c2")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_/__PCL-SYNTAX_Exp_Exp_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_/__PCL-SYNTAX_Exp_Exp_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b35d8ebc3a689cf396e6d87d90596d7ecbe0de7b2258a7a03151395482784f83), heat, left, org.kframework.attributes.Location(Location(16,18,16,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule57LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule57LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarHOLE:SortExp{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule57LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,18,16,43)"), UNIQUE'Unds'ID{}("b35d8ebc3a689cf396e6d87d90596d7ecbe0de7b2258a7a03151395482784f83")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_/__PCL-SYNTAX_Exp_Exp_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezer_/__PCL-SYNTAX_Exp_Exp_Exp1_`(inj{Exp,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(d36f8e623441ddd2bb72029a2676d1d4c70cc581076aa1f3aae3192b3fd36704), heat, left, org.kframework.attributes.Location(Location(16,18,16,43)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule58LHS{}(SortExp{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule58LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(VarK0:SortExp{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule58LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp1'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK0:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,18,16,43)"), UNIQUE'Unds'ID{}("d36f8e623441ddd2bb72029a2676d1d4c70cc581076aa1f3aae3192b3fd36704")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(`_/__PCL-SYNTAX_Exp_Exp_Exp`(inj{Int,Exp}(X),inj{Int,Exp}(Y)))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Int,KItem}(`_/Int_`(X,Y))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e319b68c22aea538f8622f39c826ac0fba8d83c320c20b48009abe6f6e92ba76), org.kframework.attributes.Location(Location(207,8,207,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule59LHS{}(SortInt{},SortInt{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule59LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'PCL-SYNTAX'Unds'Exp'Unds'Exp'Unds'Exp{}(inj{SortInt{}, SortExp{}}(VarX:SortInt{}),inj{SortInt{}, SortExp{}}(VarY:SortInt{}))),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule59LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsSlsh'Int'Unds'{}(VarX:SortInt{},VarY:SortInt{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(207,8,207,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("e319b68c22aea538f8622f39c826ac0fba8d83c320c20b48009abe6f6e92ba76")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`in_(_)_PCL-SYNTAX_Process_Id_Variable`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezerin_(_)_PCL-SYNTAX_Process_Id_Variable0_`(inj{Variable,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{Id,Exp}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(ed16834cf3bad5217622aaf330dab6b53a45b1f61d79408e86fbdff3165454b6), heat, org.kframework.attributes.Location(Location(23,22,23,58)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(1)]
  alias rule60LHS{}(SortId{},SortVariable{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule60LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(inj{SortId{}, SortExp{}}(VarHOLE:SortId{})))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(VarHOLE:SortId{},VarK1:SortVariable{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule60LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezerin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable0'Unds'{}(kseq{}(inj{SortVariable{}, SortKItem{}}(VarK1:SortVariable{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,22,23,58)"), UNIQUE'Unds'ID{}("ed16834cf3bad5217622aaf330dab6b53a45b1f61d79408e86fbdff3165454b6")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`let_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process`(K0,HOLE,K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezerlet_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process1_`(inj{Variable,KItem}(K0),inj{Process,KItem}(K2))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(9ed74cefd43a033d2f7704612711aec24db5571590118ed818183a9e632ecd7d), heat, org.kframework.attributes.Location(Location(30,22,30,71)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict(2)]
  alias rule61LHS{}(SortExp{},SortVariable{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule61LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbllet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process{}(VarK0:SortVariable{},VarHOLE:SortExp{},VarK2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule61LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezerlet'UndsEqlsUndsLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Variable'Unds'Exp'Unds'Process1'Unds'{}(kseq{}(inj{SortVariable{}, SortKItem{}}(VarK0:SortVariable{}),dotk{}()),kseq{}(inj{SortProcess{}, SortKItem{}}(VarK2:SortProcess{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,22,30,71)"), UNIQUE'Unds'ID{}("9ed74cefd43a033d2f7704612711aec24db5571590118ed818183a9e632ecd7d")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(HOLE,K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp0_`(inj{Exp,KItem}(K1))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{Id,Exp}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7dc4e1619ba59b97089de5efdfe47c3e9172715485596deb76604d404c6522c9), heat, org.kframework.attributes.Location(Location(24,22,24,55)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule62LHS{}(SortId{},SortExp{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule62LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(inj{SortId{}, SortExp{}}(VarHOLE:SortId{})))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(VarHOLE:SortId{},VarK1:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule62LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp0'Unds'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarK1:SortExp{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,22,24,55)"), UNIQUE'Unds'ID{}("7dc4e1619ba59b97089de5efdfe47c3e9172715485596deb76604d404c6522c9")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(K0,HOLE))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Exp,KItem}(HOLE)~>`#freezerout_(_)_PCL-SYNTAX_Process_Id_Exp1_`(inj{Id,KItem}(K0))~>_DotVar3),_1)),_DotVar1)),_4,_5,_6) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(897db5b8340b56132c0f812aa878c3fde82914b19896416951c8def476cc4cc5), heat, org.kframework.attributes.Location(Location(24,22,24,55)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), strict]
  alias rule63LHS{}(SortExp{},SortId{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule63LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(VarHOLE:SortExp{}))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(VarK0:SortId{},VarHOLE:SortExp{})),Var'Unds'DotVar3:SortK{})),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule63LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortExp{}, SortKItem{}}(VarHOLE:SortExp{}),kseq{}(Lbl'Hash'freezerout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar3:SortK{}))),Var'Unds'1:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,22,24,55)"), UNIQUE'Unds'ID{}("897db5b8340b56132c0f812aa878c3fde82914b19896416951c8def476cc4cc5")]

// rule `<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(inj{Process,KItem}(`in_(_)_PCL-SYNTAX_Process_Id_Variable`(C,X))~>_DotVar3),`<env>`(E))),`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(inj{Process,KItem}(`out_(_)_PCL-SYNTAX_Process_Id_Exp`(C,V))~>_DotVar5),_1))),_DotVar1)),_4,_5,_6)=>`<generatedTop>`(_2,_3,`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar2,`<thread>`(_DotVar2,`<k>`(_DotVar3),`<env>`(`Map:update`(E,inj{Variable,KItem}(X),inj{Exp,KItem}(V))))),`ThreadCellMapItem`(_0,`<thread>`(_0,`<k>`(_DotVar5),_1))),_DotVar1)),_4,_5,_6) requires isKResult(V) ensures #token("true","Bool") [UNIQUE_ID(d6799f748b0982dfb08dfe6b19a792e928180ec24d6096c6df185fc56cfa3c33), org.kframework.attributes.Location(Location(144,5,157,26)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  alias rule64LHS{}(SortId{},SortMap{},SortExp{},SortVariable{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortIdCell{},SortK{},SortK{}) : SortGeneratedTopCell{}
  where rule64LHS{}(VarC:SortId{},VarE:SortMap{},VarV:SortExp{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar5:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        LblisKResult{}(VarV:SortExp{}),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblin'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Variable{}(VarC:SortId{},VarX:SortVariable{})),Var'Unds'DotVar3:SortK{})),Lbl'-LT-'env'-GT-'{}(VarE:SortMap{}))),LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblout'UndsLParUndsRParUnds'PCL-SYNTAX'Unds'Process'Unds'Id'Unds'Exp{}(VarC:SortId{},VarV:SortExp{})),Var'Unds'DotVar5:SortK{})),Var'Unds'1:SortEnvCell{}))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule64LHS{}(VarC:SortId{},VarE:SortMap{},VarV:SortExp{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar5:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar3:SortK{}),Lbl'-LT-'env'-GT-'{}(LblMap'Coln'update{}(VarE:SortMap{},inj{SortVariable{}, SortKItem{}}(VarX:SortVariable{}),inj{SortExp{}, SortKItem{}}(VarV:SortExp{}))))),LblThreadCellMapItem{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar5:SortK{}),Var'Unds'1:SortEnvCell{}))),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(144,5,157,26)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("d6799f748b0982dfb08dfe6b19a792e928180ec24d6096c6df185fc56cfa3c33")]

// rule `<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{Float,KItem}(F))),_2)))=>`<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,`Float2String(_)_STRING-COMMON_String_Float`(F))))))),`.List`(.KList)),_2))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(89fef51abf440e0b5fb4f7e5124420710d920e33fd02d4b5f0a2bce24cf6bb6b), label(STDOUT-STREAM.stdoutBufferFloat), org.kframework.attributes.Location(Location(2549,8,2555,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule65LHS{}(SortString{},SortFloat{},SortInt{},SortKItem{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{}) : SortGeneratedTopCell{}
  where rule65LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortFloat{}, SortKItem{}}(VarF:SortFloat{}))),Var'Unds'2:SortList{})))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE20{}()),
      rule65LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(VarF:SortFloat{}))),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'2:SortList{})))))
  [label{}("STDOUT-STREAM.stdoutBufferFloat"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2549,8,2555,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("89fef51abf440e0b5fb4f7e5124420710d920e33fd02d4b5f0a2bce24cf6bb6b")]

// rule `<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{Int,KItem}(I))),_2)))=>`<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,`Int2String(_)_STRING-COMMON_String_Int`(I))))))),`.List`(.KList)),_2))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1b7e635260c20311589d096311bc20689afe150d1fe517d0d5c90f2911983bb), label(STDOUT-STREAM.stdoutBufferInt), org.kframework.attributes.Location(Location(2559,8,2565,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule66LHS{}(SortString{},SortInt{},SortInt{},SortKItem{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{}) : SortGeneratedTopCell{}
  where rule66LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}))),Var'Unds'2:SortList{})))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE20{}()),
      rule66LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(VarI:SortInt{}))),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'2:SortList{})))))
  [label{}("STDOUT-STREAM.stdoutBufferInt"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2559,8,2565,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("f1b7e635260c20311589d096311bc20689afe150d1fe517d0d5c90f2911983bb")]

// rule `<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{String,KItem}(S))),_2)))=>`<generatedTop>`(_3,_4,_5,_6,_7,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_0))),`ListItem`(_1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,S)))))),`.List`(.KList)),_2))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b0fe5129bd201b152b85e90ec5a8723a84094ae3ebdfc28487c9b99c7ea3fed9), label(STDOUT-STREAM.stdoutBufferString), org.kframework.attributes.Location(Location(2569,8,2575,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule67LHS{}(SortString{},SortString{},SortInt{},SortKItem{},SortList{},SortStartupCell{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{}) : SortGeneratedTopCell{}
  where rule67LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}))),Var'Unds'2:SortList{})))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE20{}()),
      rule67LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'0:SortInt{}))),LblListItem{}(Var'Unds'1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},VarS:SortString{})),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'2:SortList{})))))
  [label{}("STDOUT-STREAM.stdoutBufferString"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2569,8,2575,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("b0fe5129bd201b152b85e90ec5a8723a84094ae3ebdfc28487c9b99c7ea3fed9")]

// rule `<generatedTop>`(_3,_4,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_1,`<thread>`(_1,`<k>`(inj{Process,KItem}(`end_PCL-SYNTAX_Process`(.KList))~>_0),_2)),_DotVar1)),_5,_6,_7)=>`<generatedTop>`(_3,_4,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_1,`<thread>`(_1,`<k>`(.K),_2)),_DotVar1)),_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a42547f6bcb4ddd58813af13396903be64f22ca069611e7fbb7fc8c138170a32), org.kframework.attributes.Location(Location(194,5,194,27)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule68LHS{}(SortK{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{}) : SortGeneratedTopCell{}
  where rule68LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortIdCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblend'Unds'PCL-SYNTAX'Unds'Process{}()),Var'Unds'0:SortK{})),Var'Unds'2:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule68LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortIdCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'2:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(194,5,194,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("a42547f6bcb4ddd58813af13396903be64f22ca069611e7fbb7fc8c138170a32")]

// rule `<generatedTop>`(_5,_6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_3,`<thread>`(_3,`<k>`(inj{Process,KItem}(`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(_0,_1,_2))~>_DotVar3),_4)),_DotVar1)),_7,_8,_9)=>`<generatedTop>`(_5,_6,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_3,`<thread>`(_3,`<k>`(_DotVar3),_4)),_DotVar1)),_7,_8,_9) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(148f998832e74b6e7148ad1242bcf2003e3f9bc623f5ffebe7fe379da9f281e8), org.kframework.attributes.Location(Location(190,5,190,37)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), owise]
  alias rule69LHS{}(SortExp{},SortExp{},SortProcess{},SortIdCell{},SortEnvCell{},SortStartupCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{},SortK{}) : SortGeneratedTopCell{}
  where rule69LHS{}(Var'Unds'0:SortExp{},Var'Unds'1:SortExp{},Var'Unds'2:SortProcess{},Var'Unds'3:SortIdCell{},Var'Unds'4:SortEnvCell{},Var'Unds'5:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'7:SortInputCell{},Var'Unds'8:SortGeneratedCounterCell{},Var'Unds'9:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'5:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lbl'LSqBUndsEqlsUndsRSqBLBraUndsRBraUnds'PCL-SYNTAX'Unds'Process'Unds'Exp'Unds'Exp'Unds'Process{}(Var'Unds'0:SortExp{},Var'Unds'1:SortExp{},Var'Unds'2:SortProcess{})),Var'Unds'DotVar3:SortK{})),Var'Unds'4:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'7:SortInputCell{},Var'Unds'8:SortGeneratedCounterCell{},Var'Unds'9:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE110{}()),
      rule69LHS{}(Var'Unds'0:SortExp{},Var'Unds'1:SortExp{},Var'Unds'2:SortProcess{},Var'Unds'3:SortIdCell{},Var'Unds'4:SortEnvCell{},Var'Unds'5:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'7:SortInputCell{},Var'Unds'8:SortGeneratedCounterCell{},Var'Unds'9:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'5:SortStartupCell{},Var'Unds'6:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar3:SortK{}),Var'Unds'4:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'7:SortInputCell{},Var'Unds'8:SortGeneratedCounterCell{},Var'Unds'9:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(190,5,190,37)"), owise{}(), UNIQUE'Unds'ID{}("148f998832e74b6e7148ad1242bcf2003e3f9bc623f5ffebe7fe379da9f281e8")]

// rule `<generatedTop>`(`<startup>`(_1),_4,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_2,`<thread>`(_2,`<k>`(inj{Process,KItem}(`stop_PCL-SYNTAX_Process`(.KList))~>_0),_3)),_DotVar1)),_5,_6,_7)=>`<generatedTop>`(`<startup>`(inj{Process,KItem}(`stop_PCL-SYNTAX_Process`(.KList))),_4,`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_2,`<thread>`(_2,`<k>`(.K),_3)),_DotVar1)),_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(063e046367483c198c0f6e9741b2d3c4bc3b96ad4bbdf205101e77844111e4b4), org.kframework.attributes.Location(Location(197,5,198,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule70LHS{}(SortK{},SortK{},SortIdCell{},SortEnvCell{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortThreadCellMap{}) : SortGeneratedTopCell{}
  where rule70LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortK{},Var'Unds'2:SortIdCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(Var'Unds'1:SortK{}),Var'Unds'4:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblstop'Unds'PCL-SYNTAX'Unds'Process{}()),Var'Unds'0:SortK{})),Var'Unds'3:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule70LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortK{},Var'Unds'2:SortIdCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblstop'Unds'PCL-SYNTAX'Unds'Process{}()),dotk{}())),Var'Unds'4:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'2:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'2:SortIdCell{},Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'3:SortEnvCell{})),Var'Unds'DotVar1:SortThreadCellMap{})),Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(197,5,198,35)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("063e046367483c198c0f6e9741b2d3c4bc3b96ad4bbdf205101e77844111e4b4")]

// rule `<generatedTop>`(`<startup>`(``inj{Process,KItem}(P) #as _6``~>_DotVar1),_1,`<threads>`(_0),_2,`<generatedCounter>`(#Fresh),_3)=>`<generatedTop>`(`<startup>`(_DotVar1),_1,`<threads>`(`ThreadCellMapItem`(`<id>`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))),`<thread>`(`<id>`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))),`<k>`(_6),`<env>`(`.Map`(.KList))))),_2,`<generatedCounter>`(`_+Int_`(#Fresh,#token("1","Int"))),_3) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(20c88766be10cc973d85e4cfa7ebd1ab43401416b8087828d5a291dc1d8bbb7b), org.kframework.attributes.Location(Location(111,5,119,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule71LHS{}(SortInt{},SortProcess{},SortThreadCellMap{},SortExternalsCell{},SortInputCell{},SortOutputCell{},SortKItem{},SortK{}) : SortGeneratedTopCell{}
  where rule71LHS{}(Var'Hash'Fresh:SortInt{},VarP:SortProcess{},Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'6:SortKItem{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'6:SortKItem{}),Var'Unds'DotVar1:SortK{})),Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Var'Unds'0:SortThreadCellMap{}),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Var'Hash'Fresh:SortInt{}),Var'Unds'3:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule71LHS{}(Var'Hash'Fresh:SortInt{},VarP:SortProcess{},Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'6:SortKItem{},Var'Unds'DotVar1:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(Var'Unds'DotVar1:SortK{}),Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(LblThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))),Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))),Lbl'-LT-'k'-GT-'{}(kseq{}(Var'Unds'6:SortKItem{},dotk{}())),Lbl'-LT-'env'-GT-'{}(Lbl'Stop'Map{}())))),Var'Unds'2:SortInputCell{},Lbl'-LT-'generatedCounter'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("1"))),Var'Unds'3:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(111,5,119,15)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("20c88766be10cc973d85e4cfa7ebd1ab43401416b8087828d5a291dc1d8bbb7b")]

// rule `<generatedTop>`(`<startup>`(inj{Externals,KItem}(`.List{"___PCL-SYNTAX_Externals_External_Externals"}_Externals`(.KList))~>_DotVar1),_0,_1,_2,_3,_4)=>`<generatedTop>`(`<startup>`(_DotVar1),_0,_1,_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f6c64b8591205f48566bb7394ef07bfa74cab13d915a498c541459e30cb11d39), org.kframework.attributes.Location(Location(123,8,123,47)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule72LHS{}(SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortK{}) : SortGeneratedTopCell{}
  where rule72LHS{}(Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortExternals{}, SortKItem{}}(Lbl'Stop'List'LBraQuotUndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals'QuotRBraUnds'Externals{}()),Var'Unds'DotVar1:SortK{})),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule72LHS{}(Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(Var'Unds'DotVar1:SortK{}),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(123,8,123,47)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f6c64b8591205f48566bb7394ef07bfa74cab13d915a498c541459e30cb11d39")]

// rule `<generatedTop>`(`<startup>`(inj{Externals,KItem}(`___PCL-SYNTAX_Externals_External_Externals`(E,ES))~>_DotVar1),_0,_1,_2,_3,_4)=>`<generatedTop>`(`<startup>`(inj{External,KItem}(E)~>inj{Externals,KItem}(ES)~>_DotVar1),_0,_1,_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eab52527274552ef4b9dbb5f99ff914bb3f60d6cc44c49fc0c8f1a37ce622124), org.kframework.attributes.Location(Location(122,8,122,57)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule73LHS{}(SortExternal{},SortExternals{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortK{}) : SortGeneratedTopCell{}
  where rule73LHS{}(VarE:SortExternal{},VarES:SortExternals{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortExternals{}, SortKItem{}}(Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Externals'Unds'External'Unds'Externals{}(VarE:SortExternal{},VarES:SortExternals{})),Var'Unds'DotVar1:SortK{})),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule73LHS{}(VarE:SortExternal{},VarES:SortExternals{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortExternal{}, SortKItem{}}(VarE:SortExternal{}),kseq{}(inj{SortExternals{}, SortKItem{}}(VarES:SortExternals{}),Var'Unds'DotVar1:SortK{}))),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(122,8,122,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("eab52527274552ef4b9dbb5f99ff914bb3f60d6cc44c49fc0c8f1a37ce622124")]

// rule `<generatedTop>`(`<startup>`(inj{Program,KItem}(`___PCL-SYNTAX_Program_Externals_Process`(ES,P))~>_DotVar1),_0,_1,_2,_3,_4)=>`<generatedTop>`(`<startup>`(inj{Externals,KItem}(ES)~>inj{Process,KItem}(P)~>_DotVar1),_0,_1,_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8de2c73e9327c0d6bb140d7f0aa8307f190f8394cda8f43bbf99b0f2ea3373ba), org.kframework.attributes.Location(Location(121,8,121,65)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule74LHS{}(SortExternals{},SortProcess{},SortExternalsCell{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortK{}) : SortGeneratedTopCell{}
  where rule74LHS{}(VarES:SortExternals{},VarP:SortProcess{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortProgram{}, SortKItem{}}(Lbl'UndsUndsUnds'PCL-SYNTAX'Unds'Program'Unds'Externals'Unds'Process{}(VarES:SortExternals{},VarP:SortProcess{})),Var'Unds'DotVar1:SortK{})),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule74LHS{}(VarES:SortExternals{},VarP:SortProcess{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortExternals{}, SortKItem{}}(VarES:SortExternals{}),kseq{}(inj{SortProcess{}, SortKItem{}}(VarP:SortProcess{}),Var'Unds'DotVar1:SortK{}))),Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(121,8,121,65)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8de2c73e9327c0d6bb140d7f0aa8307f190f8394cda8f43bbf99b0f2ea3373ba")]

// rule `<generatedTop>`(`<startup>`(inj{External,KItem}(`external_;_PCL-SYNTAX_External_Channel`(C))~>_DotVar1),`<externals>`(S),_0,_1,_2,_3)=>`<generatedTop>`(`<startup>`(_DotVar1),`<externals>`(`_Set_`(S,`SetItem`(inj{Channel,KItem}(C)))),_0,_1,_2,_3) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a4524275f008576074c53c562a1f25eac894b38271921e97d2b5d469cbc8c99), org.kframework.attributes.Location(Location(125,5,126,47)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule75LHS{}(SortChannel{},SortSet{},SortThreadsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortK{}) : SortGeneratedTopCell{}
  where rule75LHS{}(VarC:SortChannel{},VarS:SortSet{},Var'Unds'0:SortThreadsCell{},Var'Unds'1:SortInputCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortExternal{}, SortKItem{}}(Lblexternal'UndsSClnUnds'PCL-SYNTAX'Unds'External'Unds'Channel{}(VarC:SortChannel{})),Var'Unds'DotVar1:SortK{})),Lbl'-LT-'externals'-GT-'{}(VarS:SortSet{}),Var'Unds'0:SortThreadsCell{},Var'Unds'1:SortInputCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE40{}()),
      rule75LHS{}(VarC:SortChannel{},VarS:SortSet{},Var'Unds'0:SortThreadsCell{},Var'Unds'1:SortInputCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortK{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(Var'Unds'DotVar1:SortK{}),Lbl'-LT-'externals'-GT-'{}(Lbl'Unds'Set'Unds'{}(VarS:SortSet{},LblSetItem{}(inj{SortChannel{}, SortKItem{}}(VarC:SortChannel{})))),Var'Unds'0:SortThreadsCell{},Var'Unds'1:SortInputCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(125,5,126,47)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9a4524275f008576074c53c562a1f25eac894b38271921e97d2b5d469cbc8c99")]

// rule `<generatedTop>`(`<startup>`(inj{Process,KItem}(`stop_PCL-SYNTAX_Process`(.KList))~>_DotVar1),_1,`<threads>`(_0),_2,_3,_4)=>`<generatedTop>`(`<startup>`(_DotVar1),_1,`<threads>`(`.ThreadCellMap`(.KList)),_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(54a71371b79ceff68b305178f57b5263ceb2c033a68b76c9c9c14c0bd0c2a93a), org.kframework.attributes.Location(Location(201,5,202,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(20)]
  alias rule76LHS{}(SortThreadCellMap{},SortExternalsCell{},SortInputCell{},SortGeneratedCounterCell{},SortOutputCell{},SortK{}) : SortGeneratedTopCell{}
  where rule76LHS{}(Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(kseq{}(inj{SortProcess{}, SortKItem{}}(Lblstop'Unds'PCL-SYNTAX'Unds'Process{}()),Var'Unds'DotVar1:SortK{})),Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Var'Unds'0:SortThreadCellMap{}),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule76LHS{}(Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'startup'-GT-'{}(Var'Unds'DotVar1:SortK{}),Var'Unds'1:SortExternalsCell{},Lbl'-LT-'threads'-GT-'{}(Lbl'Stop'ThreadCellMap{}()),Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(201,5,202,35)"), priority{}("20"), UNIQUE'Unds'ID{}("54a71371b79ceff68b305178f57b5263ceb2c033a68b76c9c9c14c0bd0c2a93a")]

// rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("false","Bool"))=>#token("\"false\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cca4780e4e7660055f781b9643f3125234a0f4f08ba76cacf8e5a18fe7fc999f), org.kframework.attributes.Location(Location(1458,8,1458,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(X0:SortBool{}),
     \and{SortString{}} (
       \dv{SortString{}}("false"),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1458,8,1458,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("cca4780e4e7660055f781b9643f3125234a0f4f08ba76cacf8e5a18fe7fc999f")]

// rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("true","Bool"))=>#token("\"true\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(365df37345a5a44ac061f8741369c7bd74a49f0f6e7b716be0374806dd1add3d), org.kframework.attributes.Location(Location(1457,8,1457,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(X0:SortBool{}),
     \and{SortString{}} (
       \dv{SortString{}}("true"),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1457,8,1457,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("365df37345a5a44ac061f8741369c7bd74a49f0f6e7b716be0374806dd1add3d")]

// rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"false\"","String"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b73b5c8e0ae45020f2b9b8170d366691fee01a63763b79653a2075703ec4e835), org.kframework.attributes.Location(Location(1464,8,1464,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            \dv{SortString{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(X0:SortString{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1464,8,1464,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("b73b5c8e0ae45020f2b9b8170d366691fee01a63763b79653a2075703ec4e835")]

// rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"true\"","String"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(27a5d1d7872d61f82556a4e44bda13846dde7dc2d9c54304d7858de9a8b9d6b8), org.kframework.attributes.Location(Location(1463,8,1463,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            \dv{SortString{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(X0:SortString{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1463,8,1463,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("27a5d1d7872d61f82556a4e44bda13846dde7dc2d9c54304d7858de9a8b9d6b8")]

// rule `_<=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80), org.kframework.attributes.Location(Location(1557,8,1557,63)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1557,8,1557,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80")]

// rule `_=/=Bool_`(B1,B2)=>`notBool_`(`_==Bool_`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f), org.kframework.attributes.Location(Location(861,8,861,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB1:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB2:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(VarB1:SortBool{},VarB2:SortBool{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(861,8,861,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f")]

// rule `_=/=Int_`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3), org.kframework.attributes.Location(Location(1123,8,1123,53)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'Int'Unds'{}(X0:SortInt{},X1:SortInt{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1123,8,1123,53)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3")]

// rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c), org.kframework.attributes.Location(Location(2085,8,2085,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK1:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            VarK2:SortK{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'K'Unds'{}(X0:SortK{},X1:SortK{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2085,8,2085,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c")]

// rule `_=/=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_==String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7), org.kframework.attributes.Location(Location(1537,8,1537,65)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1537,8,1537,65)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7")]

// rule `_==K_`(inj{Int,KItem}(I1),inj{Int,KItem}(I2))=>`_==Int_`(I1,I2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8bf41fa14e6cef57ebcd77d165461911b0f45874319eafd20a311466ff77ac6f), org.kframework.attributes.Location(Location(1096,8,1096,40)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),dotk{}())
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),dotk{}())
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsEqls'K'Unds'{}(X0:SortK{},X1:SortK{}),
     \and{SortBool{}} (
       Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1096,8,1096,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8bf41fa14e6cef57ebcd77d165461911b0f45874319eafd20a311466ff77ac6f")]

// rule `_==K_`(inj{Bool,KItem}(K1),inj{Bool,KItem}(K2))=>`_==Bool_`(K1,K2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(51ca403f7048793055685a9e3a051e86807f14b2d4901ae81d0b4eedff7b1d77), org.kframework.attributes.Location(Location(2067,8,2067,43)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarK1:SortBool{}),dotk{}())
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarK2:SortBool{}),dotk{}())
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsEqls'K'Unds'{}(X0:SortK{},X1:SortK{}),
     \and{SortBool{}} (
       Lbl'UndsEqlsEqls'Bool'Unds'{}(VarK1:SortBool{},VarK2:SortBool{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2067,8,2067,43)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("51ca403f7048793055685a9e3a051e86807f14b2d4901ae81d0b4eedff7b1d77")]

// rule `_==K_`(inj{String,KItem}(S1),inj{String,KItem}(S2))=>`_==String__STRING-COMMON_Bool_String_String`(S1,S2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(512288fc69c52cbd01cf38881d419b391f66a3d428beddb746e0012a9f880325), org.kframework.attributes.Location(Location(1599,8,1599,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarS1:SortString{}),dotk{}())
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarS2:SortString{}),dotk{}())
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsEqls'K'Unds'{}(X0:SortK{},X1:SortK{}),
     \and{SortBool{}} (
       Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1599,8,1599,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("512288fc69c52cbd01cf38881d419b391f66a3d428beddb746e0012a9f880325")]

// rule `_>=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17), org.kframework.attributes.Location(Location(1559,8,1559,63)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1559,8,1559,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17")]

// rule `_>String__STRING-COMMON_Bool_String_String`(S1,S2)=>`_<String__STRING-COMMON_Bool_String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0), org.kframework.attributes.Location(Location(1558,8,1558,52)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1558,8,1558,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0")]

// rule `_andBool_`(#token("false","Bool") #as _1,_0)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497), org.kframework.attributes.Location(Location(834,8,834,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(834,8,834,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497")]

// rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98), org.kframework.attributes.Location(Location(833,8,833,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(833,8,833,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98")]

// rule `_andBool_`(_0,#token("false","Bool") #as _1)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca), org.kframework.attributes.Location(Location(835,8,835,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(835,8,835,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca")]

// rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f), org.kframework.attributes.Location(Location(832,8,832,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(832,8,832,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f")]

// rule `_andThenBool_`(#token("false","Bool") #as _1,_0)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d), org.kframework.attributes.Location(Location(839,8,839,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(839,8,839,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d")]

// rule `_andThenBool_`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c), org.kframework.attributes.Location(Location(838,8,838,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarK:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(838,8,838,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c")]

// rule `_andThenBool_`(_0,#token("false","Bool") #as _1)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2), org.kframework.attributes.Location(Location(840,8,840,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(840,8,840,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2")]

// rule `_andThenBool_`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689), org.kframework.attributes.Location(Location(837,8,837,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarK:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(837,8,837,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689")]

// rule `_divInt_`(I1,I2)=>`_/Int_`(`_-Int_`(I1,`_modInt_`(I1,I2)),I2) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4), org.kframework.attributes.Location(Location(1112,8,1113,23)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      Lbl'Unds'divInt'Unds'{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       Lbl'UndsSlsh'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(VarI1:SortInt{},Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{}),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1112,8,1113,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4")]

// rule `_dividesInt__INT-COMMON_Bool_Int_Int`(I1,I2)=>`_==Int_`(`_%Int_`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5), org.kframework.attributes.Location(Location(1124,8,1124,58)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortBool{}} (
       Lbl'UndsEqlsEqls'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0")),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1124,8,1124,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5")]

// rule `_impliesBool_`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96), org.kframework.attributes.Location(Location(859,8,859,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(VarB:SortBool{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(859,8,859,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96")]

// rule `_impliesBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712), org.kframework.attributes.Location(Location(858,8,858,39)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(858,8,858,39)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712")]

// rule `_impliesBool_`(#token("false","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e), org.kframework.attributes.Location(Location(857,8,857,40)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(857,8,857,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e")]

// rule `_impliesBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d), org.kframework.attributes.Location(Location(856,8,856,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(856,8,856,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d")]

// rule `_modInt_`(I1,I2)=>`_%Int_`(`_+Int_`(`_%Int_`(I1,`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6), concrete, org.kframework.attributes.Location(Location(1115,5,1118,23)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \equals{SortInt{},R} (
      Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
     \and{SortInt{}} (
       Lbl'UndsPerc'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1115,5,1118,23)"), simplification{}(), UNIQUE'Unds'ID{}("adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6")]

// rule `_orBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26), org.kframework.attributes.Location(Location(849,8,849,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(849,8,849,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26")]

// rule `_orBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3), org.kframework.attributes.Location(Location(847,8,847,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(847,8,847,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3")]

// rule `_orBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b), org.kframework.attributes.Location(Location(848,8,848,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(848,8,848,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b")]

// rule `_orBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2), org.kframework.attributes.Location(Location(846,8,846,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(846,8,846,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2")]

// rule `_orElseBool_`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480), org.kframework.attributes.Location(Location(854,8,854,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarK:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(854,8,854,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480")]

// rule `_orElseBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14), org.kframework.attributes.Location(Location(852,8,852,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(852,8,852,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14")]

// rule `_orElseBool_`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf), org.kframework.attributes.Location(Location(853,8,853,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarK:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(853,8,853,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf")]

// rule `_orElseBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6), org.kframework.attributes.Location(Location(851,8,851,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(851,8,851,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6")]

// rule `_xorBool_`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f), org.kframework.attributes.Location(Location(844,8,844,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(844,8,844,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f")]

// rule `_xorBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75), org.kframework.attributes.Location(Location(843,8,843,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(843,8,843,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75")]

// rule `_xorBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf), org.kframework.attributes.Location(Location(842,8,842,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(842,8,842,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf")]

// rule `_|Set__SET_Set_Set_Set`(S1,S2)=>`_Set_`(S1,`Set:difference`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62), org.kframework.attributes.Location(Location(548,8,548,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortSet{}, R} (
            X0:SortSet{},
            VarS1:SortSet{}
          ),\and{R} (
          \in{SortSet{}, R} (
            X1:SortSet{},
            VarS2:SortSet{}
          ),
          \top{R} ()
        ))),
    \equals{SortSet{},R} (
      Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(X0:SortSet{},X1:SortSet{}),
     \and{SortSet{}} (
       Lbl'Unds'Set'Unds'{}(VarS1:SortSet{},LblSet'Coln'difference{}(VarS2:SortSet{},VarS1:SortSet{})),
        \top{SortSet{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(548,8,548,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62")]

// rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_modInt_`(`_>>Int_`(I,IDX),`_<<Int_`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119), org.kframework.attributes.Location(Location(1108,8,1108,85)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarIDX:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarLEN:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Unds'modInt'Unds'{}(Lbl'Unds-GT--GT-'Int'Unds'{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1108,8,1108,85)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119")]

// rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToCount)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToCount)) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e), org.kframework.attributes.Location(Location(1568,8,1569,60)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToCount:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortInt{}} (
       Lbl'UndsPlus'Int'Unds'{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToCount:SortString{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1568,8,1569,60)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e")]

// rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84), org.kframework.attributes.Location(Location(1566,8,1567,59)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToCount:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("0"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1566,8,1567,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84")]

// rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)))) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295), org.kframework.attributes.Location(Location(1561,8,1561,431)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{})))),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1561,8,1561,431)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295")]

// rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117), org.kframework.attributes.Location(Location(1562,8,1562,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            Var'Unds'0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            \dv{SortString{}}("")
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            Var'Unds'1:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("-1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1562,8,1562,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117")]

// rule `freshInt(_)_INT_Int_Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b), org.kframework.attributes.Location(Location(1127,8,1127,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(X0:SortInt{}),
     \and{SortInt{}} (
       VarI:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1127,8,1127,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b")]

// rule getGeneratedCounterCell(`<generatedTop>`(_0,_1,_2,_3,Cell,_4))=>Cell requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortGeneratedTopCell{}, R} (
            X0:SortGeneratedTopCell{},
            Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortThreadsCell{},Var'Unds'3:SortInputCell{},VarCell:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{})
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      LblgetGeneratedCounterCell{}(X0:SortGeneratedTopCell{}),
     \and{SortGeneratedCounterCell{}} (
       VarCell:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  []

// rule initEnvCell(.KList)=>`<env>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(00d428bbba5e1be4a85aba1c6d8e92413cb67f2b9e9b8fc00940b647db49b07a), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortEnvCell{},R} (
      LblinitEnvCell{}(),
     \and{SortEnvCell{}} (
       Lbl'-LT-'env'-GT-'{}(Lbl'Stop'Map{}()),
        \top{SortEnvCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("00d428bbba5e1be4a85aba1c6d8e92413cb67f2b9e9b8fc00940b647db49b07a")]

// rule initExternalsCell(.KList)=>`<externals>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d5cf7a79caa02f3234853467bf2d0e6985669569d80f3902f71b3b55a7958331), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortExternalsCell{},R} (
      LblinitExternalsCell{}(),
     \and{SortExternalsCell{}} (
       Lbl'-LT-'externals'-GT-'{}(Lbl'Stop'Set{}()),
        \top{SortExternalsCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("d5cf7a79caa02f3234853467bf2d0e6985669569d80f3902f71b3b55a7958331")]

// rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortGeneratedCounterCell{},R} (
      LblinitGeneratedCounterCell{}(),
     \and{SortGeneratedCounterCell{}} (
       Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0")),
        \top{SortGeneratedCounterCell{}}())))
  [initializer{}()]

// rule initGeneratedTopCell(Init)=>`<generatedTop>`(initStartupCell(Init),initExternalsCell(.KList),initThreadsCell(.KList),initInputCell(Init),initGeneratedCounterCell(.KList),initOutputCell(Init)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(db259e328815a035c2896c65d1d7d2d250fd5c8b758c9a33f5f80224f99cb9b2), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      LblinitGeneratedTopCell{}(X0:SortMap{}),
     \and{SortGeneratedTopCell{}} (
       Lbl'-LT-'generatedTop'-GT-'{}(LblinitStartupCell{}(VarInit:SortMap{}),LblinitExternalsCell{}(),LblinitThreadsCell{}(),LblinitInputCell{}(VarInit:SortMap{}),LblinitGeneratedCounterCell{}(),LblinitOutputCell{}(VarInit:SortMap{})),
        \top{SortGeneratedTopCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("db259e328815a035c2896c65d1d7d2d250fd5c8b758c9a33f5f80224f99cb9b2")]

// rule initIdCell(.KList)=>`<id>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2a06b6a27a201eff054d451215437e05883ac11cae719271694b12cb59b7c6df), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortIdCell{},R} (
      LblinitIdCell{}(),
     \and{SortIdCell{}} (
       Lbl'-LT-'id'-GT-'{}(\dv{SortInt{}}("0")),
        \top{SortIdCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("2a06b6a27a201eff054d451215437e05883ac11cae719271694b12cb59b7c6df")]

// rule initInputCell(Init)=>`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$STDIN","KConfigVar")))))))),`ListItem`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$IO","KConfigVar"))))))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(`#stdin_K-IO_Int`(.KList)))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(02dab0fdd06e535dc7414d9921d25b84e5e7b2a5ed0e971b567aee1acbd0ef48), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortInputCell{},R} (
      LblinitInputCell{}(X0:SortMap{}),
     \and{SortInputCell{}} (
       Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$STDIN"))),dotk{}()))),dotk{}())))),LblListItem{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$IO"))),dotk{}()))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}()))))),
        \top{SortInputCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("02dab0fdd06e535dc7414d9921d25b84e5e7b2a5ed0e971b567aee1acbd0ef48")]

// rule initKCell(.KList)=>`<k>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0c61e6b803bacc9fd0b12934d2630cf88de8add4426fb9fce3e25f3431d527e7), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortKCell{},R} (
      LblinitKCell{}(),
     \and{SortKCell{}} (
       Lbl'-LT-'k'-GT-'{}(dotk{}()),
        \top{SortKCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("0c61e6b803bacc9fd0b12934d2630cf88de8add4426fb9fce3e25f3431d527e7")]

// rule initOutputCell(Init)=>`<output>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(`#stdout_K-IO_Int`(.KList)))),`ListItem`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$IO","KConfigVar"))))))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String"))))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fe4bbac01b7ae18be478d157df9368bcc1dd048a5bfb0e334cd02c0fc7d3c6a2), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortOutputCell{},R} (
      LblinitOutputCell{}(X0:SortMap{}),
     \and{SortOutputCell{}} (
       Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}()))),LblListItem{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$IO"))),dotk{}()))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}())))))),
        \top{SortOutputCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("fe4bbac01b7ae18be478d157df9368bcc1dd048a5bfb0e334cd02c0fc7d3c6a2")]

// rule initStartupCell(Init)=>`<startup>`(`project:KItem`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar"))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4345ccd9fc8105ec8dbc496c3cb45739897f0cd4a49943d5400405070dce947e), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortStartupCell{},R} (
      LblinitStartupCell{}(X0:SortMap{}),
     \and{SortStartupCell{}} (
       Lbl'-LT-'startup'-GT-'{}(kseq{}(Lblproject'Coln'KItem{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM"))),dotk{}())),dotk{}())),
        \top{SortStartupCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("4345ccd9fc8105ec8dbc496c3cb45739897f0cd4a49943d5400405070dce947e")]

// rule initThreadCell(.KList)=>`ThreadCellMapItem`(initIdCell(.KList),`<thread>`(initIdCell(.KList),initKCell(.KList),initEnvCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7aa65df887cf3050097aa3c2c3312171c50b8174c942a2d23ac74254a0d66d09), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortThreadCellMap{},R} (
      LblinitThreadCell{}(),
     \and{SortThreadCellMap{}} (
       LblThreadCellMapItem{}(LblinitIdCell{}(),Lbl'-LT-'thread'-GT-'{}(LblinitIdCell{}(),LblinitKCell{}(),LblinitEnvCell{}())),
        \top{SortThreadCellMap{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("7aa65df887cf3050097aa3c2c3312171c50b8174c942a2d23ac74254a0d66d09")]

// rule initThreadsCell(.KList)=>`<threads>`(`.ThreadCellMap`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c2ab0a23878bf6bb50876b4a5bdd3f028cecd2a9fb4838adb2aa4eedb333cf6b), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortThreadsCell{},R} (
      LblinitThreadsCell{}(),
     \and{SortThreadsCell{}} (
       Lbl'-LT-'threads'-GT-'{}(Lbl'Stop'ThreadCellMap{}()),
        \top{SortThreadsCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("c2ab0a23878bf6bb50876b4a5bdd3f028cecd2a9fb4838adb2aa4eedb333cf6b")]

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortBool{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBool{}, SortKItem{}}(Var'Unds'0:SortBool{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isChannel(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortChannel{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortChannel{}, SortKItem{}}(Var'Unds'1:SortChannel{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisChannel{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isChannel(inj{Channel,KItem}(Channel))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChannel{}, SortKItem{}}(VarChannel:SortChannel{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisChannel{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isEnvCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortEnvCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortEnvCell{}, SortKItem{}}(Var'Unds'1:SortEnvCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisEnvCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isEnvCell(inj{EnvCell,KItem}(EnvCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarEnvCell:SortEnvCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisEnvCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isEnvCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortEnvCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(Var'Unds'1:SortEnvCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisEnvCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isEnvCellOpt(inj{EnvCellOpt,KItem}(EnvCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarEnvCellOpt:SortEnvCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisEnvCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortExp{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortExp{}, SortKItem{}}(Var'Unds'0:SortExp{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isExp(inj{Exp,KItem}(Exp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExp{}, SortKItem{}}(VarExp:SortExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isExternal(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortExternal{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortExternal{}, SortKItem{}}(Var'Unds'1:SortExternal{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisExternal{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isExternal(inj{External,KItem}(External))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternal{}, SortKItem{}}(VarExternal:SortExternal{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisExternal{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isExternals(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortExternals{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortExternals{}, SortKItem{}}(Var'Unds'1:SortExternals{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisExternals{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isExternals(inj{Externals,KItem}(Externals))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternals{}, SortKItem{}}(VarExternals:SortExternals{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisExternals{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isExternalsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortExternalsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortExternalsCell{}, SortKItem{}}(Var'Unds'1:SortExternalsCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisExternalsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isExternalsCell(inj{ExternalsCell,KItem}(ExternalsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternalsCell{}, SortKItem{}}(VarExternalsCell:SortExternalsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisExternalsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isExternalsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortExternalsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortExternalsCellOpt{}, SortKItem{}}(Var'Unds'1:SortExternalsCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisExternalsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isExternalsCellOpt(inj{ExternalsCellOpt,KItem}(ExternalsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternalsCellOpt{}, SortKItem{}}(VarExternalsCellOpt:SortExternalsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisExternalsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFloat{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortFloat{}, SortKItem{}}(Var'Unds'1:SortFloat{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisFloat{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisFloat{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedCounterCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortGeneratedCounterCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(Var'Unds'1:SortGeneratedCounterCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedCounterCell(inj{GeneratedCounterCell,KItem}(GeneratedCounterCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortGeneratedTopCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(Var'Unds'1:SortGeneratedTopCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedTopCell(inj{GeneratedTopCell,KItem}(GeneratedTopCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortGeneratedTopCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(Var'Unds'0:SortGeneratedTopCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedTopCellFragment(inj{GeneratedTopCellFragment,KItem}(GeneratedTopCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOError{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOError{}, SortKItem{}}(Var'Unds'1:SortIOError{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOError{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOError{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOFile(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortIOFile{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOFile{}, SortKItem{}}(Var'Unds'0:SortIOFile{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOFile{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOFile(inj{IOFile,KItem}(IOFile))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOFile{}, SortKItem{}}(VarIOFile:SortIOFile{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOFile{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortIOInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOInt{}, SortKItem{}}(Var'Unds'0:SortIOInt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOInt(inj{IOInt,KItem}(IOInt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOInt{}, SortKItem{}}(VarIOInt:SortIOInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOString{}, SortKItem{}}(Var'Unds'1:SortIOString{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOString(inj{IOString,KItem}(IOString))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOString{}, SortKItem{}}(VarIOString:SortIOString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortId{}, SortKItem{}}(Var'Unds'0:SortId{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIdCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIdCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIdCell{}, SortKItem{}}(Var'Unds'1:SortIdCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIdCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIdCell(inj{IdCell,KItem}(IdCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCell{}, SortKItem{}}(VarIdCell:SortIdCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIdCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIdCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIdCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(Var'Unds'1:SortIdCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIdCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIdCellOpt(inj{IdCellOpt,KItem}(IdCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarIdCellOpt:SortIdCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIdCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInputCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortInputCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInputCell{}, SortKItem{}}(Var'Unds'1:SortInputCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInputCell(inj{InputCell,KItem}(InputCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCell{}, SortKItem{}}(VarInputCell:SortInputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInputCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortInputCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(Var'Unds'1:SortInputCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInputCellOpt(inj{InputCellOpt,KItem}(InputCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(VarInputCellOpt:SortInputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInt{}, SortKItem{}}(Var'Unds'1:SortInt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisK{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCell{}, SortKItem{}}(Var'Unds'1:SortKCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortKCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCellOpt{}, SortKItem{}}(Var'Unds'0:SortKCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKConfigVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKConfigVar{}, SortKItem{}}(Var'Unds'1:SortKConfigVar{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKItem{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(Var'Unds'1:SortKItem{},dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKItem(KItem)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarKItem:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKResult(_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9ae4e8e91afda90defaf5ee862f05b8cd40f2b1cc709deee40824eb6bde35cb1), org.kframework.attributes.Location(Location(108,8,108,29)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortChannel{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortExp{}, R} (
                  X0:SortExp{},
                  inj{SortChannel{}, SortExp{}}(Var'Unds'1:SortChannel{})
                ),
                \top{R} ()
              )
          )),
          \or{R} (
          \exists{R} (Var'Unds'2:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortExp{}, R} (
                  X0:SortExp{},
                  inj{SortInt{}, SortExp{}}(Var'Unds'2:SortInt{})
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        ))
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortExp{}, R} (
            X0:SortExp{},
            Var'Unds'0:SortExp{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKResult{}(X0:SortExp{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(108,8,108,29)"), owise{}(), UNIQUE'Unds'ID{}("9ae4e8e91afda90defaf5ee862f05b8cd40f2b1cc709deee40824eb6bde35cb1")]

// rule isKResult(inj{Channel,Exp}(_0))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1b32985399f9b2290b41267687ba1c00482f1d99e3829067636ea06d8542a826), org.kframework.attributes.Location(Location(106,8,106,36)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortExp{}, R} (
            X0:SortExp{},
            inj{SortChannel{}, SortExp{}}(Var'Unds'0:SortChannel{})
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKResult{}(X0:SortExp{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(106,8,106,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("1b32985399f9b2290b41267687ba1c00482f1d99e3829067636ea06d8542a826")]

// rule isKResult(inj{Int,Exp}(_0))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d097a138e6f656d012ee2464d1fa156f4c66b21007de1d529f773c64143d965d), org.kframework.attributes.Location(Location(107,8,107,32)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortExp{}, R} (
            X0:SortExp{},
            inj{SortInt{}, SortExp{}}(Var'Unds'0:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKResult{}(X0:SortExp{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(107,8,107,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("d097a138e6f656d012ee2464d1fa156f4c66b21007de1d529f773c64143d965d")]

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortList{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortList{}, SortKItem{}}(Var'Unds'0:SortList{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortMap{}, SortKItem{}}(Var'Unds'1:SortMap{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isOutputCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortOutputCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortOutputCell{}, SortKItem{}}(Var'Unds'0:SortOutputCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisOutputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isOutputCell(inj{OutputCell,KItem}(OutputCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCell{}, SortKItem{}}(VarOutputCell:SortOutputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisOutputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isOutputCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortOutputCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(Var'Unds'1:SortOutputCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisOutputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isOutputCellOpt(inj{OutputCellOpt,KItem}(OutputCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(VarOutputCellOpt:SortOutputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisOutputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isProcess(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortProcess{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortProcess{}, SortKItem{}}(Var'Unds'1:SortProcess{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisProcess{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isProcess(inj{Process,KItem}(Process))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProcess{}, SortKItem{}}(VarProcess:SortProcess{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisProcess{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isProgram(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortProgram{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortProgram{}, SortKItem{}}(Var'Unds'1:SortProgram{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisProgram{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isProgram(inj{Program,KItem}(Program))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProgram{}, SortKItem{}}(VarProgram:SortProgram{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisProgram{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortSet{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortSet{}, SortKItem{}}(Var'Unds'0:SortSet{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStartupCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortStartupCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStartupCell{}, SortKItem{}}(Var'Unds'1:SortStartupCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStartupCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStartupCell(inj{StartupCell,KItem}(StartupCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStartupCell{}, SortKItem{}}(VarStartupCell:SortStartupCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStartupCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStartupCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortStartupCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStartupCellOpt{}, SortKItem{}}(Var'Unds'1:SortStartupCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStartupCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStartupCellOpt(inj{StartupCellOpt,KItem}(StartupCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStartupCellOpt{}, SortKItem{}}(VarStartupCellOpt:SortStartupCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStartupCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortStream{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStream{}, SortKItem{}}(Var'Unds'1:SortStream{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStream{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStream{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'1:SortString{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortThreadCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCell{}, SortKItem{}}(Var'Unds'1:SortThreadCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCell(inj{ThreadCell,KItem}(ThreadCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarThreadCell:SortThreadCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortThreadCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(Var'Unds'1:SortThreadCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCellFragment(inj{ThreadCellFragment,KItem}(ThreadCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarThreadCellFragment:SortThreadCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortThreadCellMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(Var'Unds'1:SortThreadCellMap{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCellMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCellMap(inj{ThreadCellMap,KItem}(ThreadCellMap))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(VarThreadCellMap:SortThreadCellMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCellMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortThreadsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCell{}, SortKItem{}}(Var'Unds'0:SortThreadsCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCell(inj{ThreadsCell,KItem}(ThreadsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCell{}, SortKItem{}}(VarThreadsCell:SortThreadsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortThreadsCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(Var'Unds'1:SortThreadsCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCellFragment(inj{ThreadsCellFragment,KItem}(ThreadsCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(VarThreadsCellFragment:SortThreadsCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortThreadsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(Var'Unds'0:SortThreadsCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCellOpt(inj{ThreadsCellOpt,KItem}(ThreadsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(VarThreadsCellOpt:SortThreadsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isVariable(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortVariable{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortVariable{}, SortKItem{}}(Var'Unds'1:SortVariable{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisVariable{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isVariable(inj{Variable,KItem}(Variable))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariable{}, SortKItem{}}(VarVariable:SortVariable{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisVariable{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I1 requires `_<=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6), org.kframework.attributes.Location(Location(1120,8,1120,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       VarI1:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1120,8,1120,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6")]

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I2 requires `_>=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3), org.kframework.attributes.Location(Location(1121,8,1121,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       VarI2:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1121,8,1121,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3")]

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415), org.kframework.attributes.Location(Location(830,8,830,29)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblnotBool'Unds'{}(X0:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,8,830,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415")]

// rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c), org.kframework.attributes.Location(Location(829,8,829,29)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblnotBool'Unds'{}(X0:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(829,8,829,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c")]

// rule `project:#tempFile:fd`(#tempFile(K0,K1))=>K1 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOFile{}, R} (
            X0:SortIOFile{},
            Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'ColnHash'tempFile'Coln'fd{}(X0:SortIOFile{}),
     \and{SortInt{}} (
       VarK1:SortInt{},
        \top{SortInt{}}())))
  []

// rule `project:#tempFile:path`(#tempFile(K0,K1))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOFile{}, R} (
            X0:SortIOFile{},
            Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      Lblproject'ColnHash'tempFile'Coln'path{}(X0:SortIOFile{}),
     \and{SortString{}} (
       VarK0:SortString{},
        \top{SortString{}}())))
  []

// rule `project:#unknownIOError:errno`(#unknownIOError(K0))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOError{}, R} (
            X0:SortIOError{},
            Lbl'Hash'unknownIOError{}(VarK0:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'ColnHash'unknownIOError'Coln'errno{}(X0:SortIOError{}),
     \and{SortInt{}} (
       VarK0:SortInt{},
        \top{SortInt{}}())))
  []

// rule `project:Bool`(inj{Bool,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarK:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      Lblproject'Coln'Bool{}(X0:SortK{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [projection{}()]

// rule `project:Channel`(inj{Channel,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChannel{}, SortKItem{}}(VarK:SortChannel{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortChannel{},R} (
      Lblproject'Coln'Channel{}(X0:SortK{}),
     \and{SortChannel{}} (
       VarK:SortChannel{},
        \top{SortChannel{}}())))
  [projection{}()]

// rule `project:EnvCell`(inj{EnvCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarK:SortEnvCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortEnvCell{},R} (
      Lblproject'Coln'EnvCell{}(X0:SortK{}),
     \and{SortEnvCell{}} (
       VarK:SortEnvCell{},
        \top{SortEnvCell{}}())))
  [projection{}()]

// rule `project:EnvCellOpt`(inj{EnvCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarK:SortEnvCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortEnvCellOpt{},R} (
      Lblproject'Coln'EnvCellOpt{}(X0:SortK{}),
     \and{SortEnvCellOpt{}} (
       VarK:SortEnvCellOpt{},
        \top{SortEnvCellOpt{}}())))
  [projection{}()]

// rule `project:Exp`(inj{Exp,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExp{}, SortKItem{}}(VarK:SortExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortExp{},R} (
      Lblproject'Coln'Exp{}(X0:SortK{}),
     \and{SortExp{}} (
       VarK:SortExp{},
        \top{SortExp{}}())))
  [projection{}()]

// rule `project:External`(inj{External,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternal{}, SortKItem{}}(VarK:SortExternal{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortExternal{},R} (
      Lblproject'Coln'External{}(X0:SortK{}),
     \and{SortExternal{}} (
       VarK:SortExternal{},
        \top{SortExternal{}}())))
  [projection{}()]

// rule `project:Externals`(inj{Externals,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternals{}, SortKItem{}}(VarK:SortExternals{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortExternals{},R} (
      Lblproject'Coln'Externals{}(X0:SortK{}),
     \and{SortExternals{}} (
       VarK:SortExternals{},
        \top{SortExternals{}}())))
  [projection{}()]

// rule `project:ExternalsCell`(inj{ExternalsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternalsCell{}, SortKItem{}}(VarK:SortExternalsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortExternalsCell{},R} (
      Lblproject'Coln'ExternalsCell{}(X0:SortK{}),
     \and{SortExternalsCell{}} (
       VarK:SortExternalsCell{},
        \top{SortExternalsCell{}}())))
  [projection{}()]

// rule `project:ExternalsCellOpt`(inj{ExternalsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortExternalsCellOpt{}, SortKItem{}}(VarK:SortExternalsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortExternalsCellOpt{},R} (
      Lblproject'Coln'ExternalsCellOpt{}(X0:SortK{}),
     \and{SortExternalsCellOpt{}} (
       VarK:SortExternalsCellOpt{},
        \top{SortExternalsCellOpt{}}())))
  [projection{}()]

// rule `project:Float`(inj{Float,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortFloat{}, SortKItem{}}(VarK:SortFloat{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortFloat{},R} (
      Lblproject'Coln'Float{}(X0:SortK{}),
     \and{SortFloat{}} (
       VarK:SortFloat{},
        \top{SortFloat{}}())))
  [projection{}()]

// rule `project:GeneratedCounterCell`(inj{GeneratedCounterCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarK:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      Lblproject'Coln'GeneratedCounterCell{}(X0:SortK{}),
     \and{SortGeneratedCounterCell{}} (
       VarK:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  [projection{}()]

// rule `project:GeneratedTopCell`(inj{GeneratedTopCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarK:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      Lblproject'Coln'GeneratedTopCell{}(X0:SortK{}),
     \and{SortGeneratedTopCell{}} (
       VarK:SortGeneratedTopCell{},
        \top{SortGeneratedTopCell{}}())))
  [projection{}()]

// rule `project:GeneratedTopCellFragment`(inj{GeneratedTopCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarK:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCellFragment{},R} (
      Lblproject'Coln'GeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortGeneratedTopCellFragment{}} (
       VarK:SortGeneratedTopCellFragment{},
        \top{SortGeneratedTopCellFragment{}}())))
  [projection{}()]

// rule `project:IOError`(inj{IOError,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOError{}, SortKItem{}}(VarK:SortIOError{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOError{},R} (
      Lblproject'Coln'IOError{}(X0:SortK{}),
     \and{SortIOError{}} (
       VarK:SortIOError{},
        \top{SortIOError{}}())))
  [projection{}()]

// rule `project:IOFile`(inj{IOFile,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOFile{}, SortKItem{}}(VarK:SortIOFile{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOFile{},R} (
      Lblproject'Coln'IOFile{}(X0:SortK{}),
     \and{SortIOFile{}} (
       VarK:SortIOFile{},
        \top{SortIOFile{}}())))
  [projection{}()]

// rule `project:IOInt`(inj{IOInt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOInt{}, SortKItem{}}(VarK:SortIOInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOInt{},R} (
      Lblproject'Coln'IOInt{}(X0:SortK{}),
     \and{SortIOInt{}} (
       VarK:SortIOInt{},
        \top{SortIOInt{}}())))
  [projection{}()]

// rule `project:IOString`(inj{IOString,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOString{}, SortKItem{}}(VarK:SortIOString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOString{},R} (
      Lblproject'Coln'IOString{}(X0:SortK{}),
     \and{SortIOString{}} (
       VarK:SortIOString{},
        \top{SortIOString{}}())))
  [projection{}()]

// rule `project:Id`(inj{Id,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarK:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortId{},R} (
      Lblproject'Coln'Id{}(X0:SortK{}),
     \and{SortId{}} (
       VarK:SortId{},
        \top{SortId{}}())))
  [projection{}()]

// rule `project:IdCell`(inj{IdCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCell{}, SortKItem{}}(VarK:SortIdCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIdCell{},R} (
      Lblproject'Coln'IdCell{}(X0:SortK{}),
     \and{SortIdCell{}} (
       VarK:SortIdCell{},
        \top{SortIdCell{}}())))
  [projection{}()]

// rule `project:IdCellOpt`(inj{IdCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarK:SortIdCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIdCellOpt{},R} (
      Lblproject'Coln'IdCellOpt{}(X0:SortK{}),
     \and{SortIdCellOpt{}} (
       VarK:SortIdCellOpt{},
        \top{SortIdCellOpt{}}())))
  [projection{}()]

// rule `project:InputCell`(inj{InputCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCell{}, SortKItem{}}(VarK:SortInputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInputCell{},R} (
      Lblproject'Coln'InputCell{}(X0:SortK{}),
     \and{SortInputCell{}} (
       VarK:SortInputCell{},
        \top{SortInputCell{}}())))
  [projection{}()]

// rule `project:InputCellOpt`(inj{InputCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(VarK:SortInputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInputCellOpt{},R} (
      Lblproject'Coln'InputCellOpt{}(X0:SortK{}),
     \and{SortInputCellOpt{}} (
       VarK:SortInputCellOpt{},
        \top{SortInputCellOpt{}}())))
  [projection{}()]

// rule `project:Int`(inj{Int,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarK:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'Coln'Int{}(X0:SortK{}),
     \and{SortInt{}} (
       VarK:SortInt{},
        \top{SortInt{}}())))
  [projection{}()]

// rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortK{},R} (
      Lblproject'Coln'K{}(X0:SortK{}),
     \and{SortK{}} (
       VarK:SortK{},
        \top{SortK{}}())))
  [projection{}()]

// rule `project:KCell`(inj{KCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarK:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCell{},R} (
      Lblproject'Coln'KCell{}(X0:SortK{}),
     \and{SortKCell{}} (
       VarK:SortKCell{},
        \top{SortKCell{}}())))
  [projection{}()]

// rule `project:KCellOpt`(inj{KCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarK:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCellOpt{},R} (
      Lblproject'Coln'KCellOpt{}(X0:SortK{}),
     \and{SortKCellOpt{}} (
       VarK:SortKCellOpt{},
        \top{SortKCellOpt{}}())))
  [projection{}()]

// rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarK:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKItem{},R} (
      Lblproject'Coln'KItem{}(X0:SortK{}),
     \and{SortKItem{}} (
       VarK:SortKItem{},
        \top{SortKItem{}}())))
  [projection{}()]

// rule `project:List`(inj{List,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarK:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortList{},R} (
      Lblproject'Coln'List{}(X0:SortK{}),
     \and{SortList{}} (
       VarK:SortList{},
        \top{SortList{}}())))
  [projection{}()]

// rule `project:Map`(inj{Map,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarK:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortMap{},R} (
      Lblproject'Coln'Map{}(X0:SortK{}),
     \and{SortMap{}} (
       VarK:SortMap{},
        \top{SortMap{}}())))
  [projection{}()]

// rule `project:OutputCell`(inj{OutputCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCell{}, SortKItem{}}(VarK:SortOutputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortOutputCell{},R} (
      Lblproject'Coln'OutputCell{}(X0:SortK{}),
     \and{SortOutputCell{}} (
       VarK:SortOutputCell{},
        \top{SortOutputCell{}}())))
  [projection{}()]

// rule `project:OutputCellOpt`(inj{OutputCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(VarK:SortOutputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortOutputCellOpt{},R} (
      Lblproject'Coln'OutputCellOpt{}(X0:SortK{}),
     \and{SortOutputCellOpt{}} (
       VarK:SortOutputCellOpt{},
        \top{SortOutputCellOpt{}}())))
  [projection{}()]

// rule `project:Process`(inj{Process,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProcess{}, SortKItem{}}(VarK:SortProcess{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortProcess{},R} (
      Lblproject'Coln'Process{}(X0:SortK{}),
     \and{SortProcess{}} (
       VarK:SortProcess{},
        \top{SortProcess{}}())))
  [projection{}()]

// rule `project:Program`(inj{Program,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProgram{}, SortKItem{}}(VarK:SortProgram{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortProgram{},R} (
      Lblproject'Coln'Program{}(X0:SortK{}),
     \and{SortProgram{}} (
       VarK:SortProgram{},
        \top{SortProgram{}}())))
  [projection{}()]

// rule `project:Set`(inj{Set,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarK:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortSet{},R} (
      Lblproject'Coln'Set{}(X0:SortK{}),
     \and{SortSet{}} (
       VarK:SortSet{},
        \top{SortSet{}}())))
  [projection{}()]

// rule `project:StartupCell`(inj{StartupCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStartupCell{}, SortKItem{}}(VarK:SortStartupCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStartupCell{},R} (
      Lblproject'Coln'StartupCell{}(X0:SortK{}),
     \and{SortStartupCell{}} (
       VarK:SortStartupCell{},
        \top{SortStartupCell{}}())))
  [projection{}()]

// rule `project:StartupCellOpt`(inj{StartupCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStartupCellOpt{}, SortKItem{}}(VarK:SortStartupCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStartupCellOpt{},R} (
      Lblproject'Coln'StartupCellOpt{}(X0:SortK{}),
     \and{SortStartupCellOpt{}} (
       VarK:SortStartupCellOpt{},
        \top{SortStartupCellOpt{}}())))
  [projection{}()]

// rule `project:Stream`(inj{Stream,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStream{}, SortKItem{}}(VarK:SortStream{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStream{},R} (
      Lblproject'Coln'Stream{}(X0:SortK{}),
     \and{SortStream{}} (
       VarK:SortStream{},
        \top{SortStream{}}())))
  [projection{}()]

// rule `project:String`(inj{String,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarK:SortString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      Lblproject'Coln'String{}(X0:SortK{}),
     \and{SortString{}} (
       VarK:SortString{},
        \top{SortString{}}())))
  [projection{}()]

// rule `project:ThreadCell`(inj{ThreadCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarK:SortThreadCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCell{},R} (
      Lblproject'Coln'ThreadCell{}(X0:SortK{}),
     \and{SortThreadCell{}} (
       VarK:SortThreadCell{},
        \top{SortThreadCell{}}())))
  [projection{}()]

// rule `project:ThreadCellFragment`(inj{ThreadCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarK:SortThreadCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCellFragment{},R} (
      Lblproject'Coln'ThreadCellFragment{}(X0:SortK{}),
     \and{SortThreadCellFragment{}} (
       VarK:SortThreadCellFragment{},
        \top{SortThreadCellFragment{}}())))
  [projection{}()]

// rule `project:ThreadCellMap`(inj{ThreadCellMap,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(VarK:SortThreadCellMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCellMap{},R} (
      Lblproject'Coln'ThreadCellMap{}(X0:SortK{}),
     \and{SortThreadCellMap{}} (
       VarK:SortThreadCellMap{},
        \top{SortThreadCellMap{}}())))
  [projection{}()]

// rule `project:ThreadsCell`(inj{ThreadsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCell{}, SortKItem{}}(VarK:SortThreadsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCell{},R} (
      Lblproject'Coln'ThreadsCell{}(X0:SortK{}),
     \and{SortThreadsCell{}} (
       VarK:SortThreadsCell{},
        \top{SortThreadsCell{}}())))
  [projection{}()]

// rule `project:ThreadsCellFragment`(inj{ThreadsCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(VarK:SortThreadsCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCellFragment{},R} (
      Lblproject'Coln'ThreadsCellFragment{}(X0:SortK{}),
     \and{SortThreadsCellFragment{}} (
       VarK:SortThreadsCellFragment{},
        \top{SortThreadsCellFragment{}}())))
  [projection{}()]

// rule `project:ThreadsCellOpt`(inj{ThreadsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(VarK:SortThreadsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCellOpt{},R} (
      Lblproject'Coln'ThreadsCellOpt{}(X0:SortK{}),
     \and{SortThreadsCellOpt{}} (
       VarK:SortThreadsCellOpt{},
        \top{SortThreadsCellOpt{}}())))
  [projection{}()]

// rule `project:Variable`(inj{Variable,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariable{}, SortKItem{}}(VarK:SortVariable{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortVariable{},R} (
      Lblproject'Coln'Variable{}(X0:SortK{}),
     \and{SortVariable{}} (
       VarK:SortVariable{},
        \top{SortVariable{}}())))
  [projection{}()]

// rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToReplace,Replacement,`_-Int_`(Count,#token("1","Int")))) requires `_>Int_`(Count,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9), org.kframework.attributes.Location(Location(1578,8,1581,30)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X3:SortInt{},
            VarCount:SortInt{}
          ),
          \top{R} ()
        ))))),
    \equals{SortString{},R} (
      Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortString{},X3:SortInt{}),
     \and{SortString{}} (
       Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("1")))),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1578,8,1581,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9")]

// rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,_0,_1,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5), org.kframework.attributes.Location(Location(1582,8,1582,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            Var'Unds'0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            Var'Unds'1:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X3:SortInt{},
            \dv{SortInt{}}("0")
          ),
          \top{R} ()
        ))))),
    \equals{SortString{},R} (
      Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortString{},X3:SortInt{}),
     \and{SortString{}} (
       VarSource:SortString{},
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1582,8,1582,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5")]

// rule `replaceAll(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5), org.kframework.attributes.Location(Location(1583,8,1583,154)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{})),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1583,8,1583,154)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5")]

// rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c), org.kframework.attributes.Location(Location(1571,8,1573,66)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{}))),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1571,8,1573,66)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c")]

// rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,_0)=>Source requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34), org.kframework.attributes.Location(Location(1574,8,1575,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            Var'Unds'0:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       VarSource:SortString{},
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1574,8,1575,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34")]

// rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205), org.kframework.attributes.Location(Location(1563,8,1563,182)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1563,8,1563,182)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205")]

// rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6), org.kframework.attributes.Location(Location(1564,8,1564,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            Var'Unds'0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            \dv{SortString{}}("")
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            Var'Unds'1:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("-1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1564,8,1564,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6")]

// rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))),`_<<Int_`(#token("1","Int"),LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f), org.kframework.attributes.Location(Location(1110,8,1110,164)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarIDX:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarLEN:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Unds'-Int'Unds'{}(Lbl'Unds'modInt'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1110,8,1110,164)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f")]


// priority groups
  alias priorityLE20{}() : SortGeneratedTopCell{}
  where priorityLE20{}() := \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'0:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule76LHS{}(Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}))))))), \bottom{SortGeneratedTopCell{}}()) []

  alias priorityLE25{}() : SortGeneratedTopCell{}
  where priorityLE25{}() := \or{SortGeneratedTopCell{}}(
    priorityLE20{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarF:SortFloat{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'7:SortGeneratedCounterCell{},rule65LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'7:SortGeneratedCounterCell{},rule66LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'7:SortGeneratedCounterCell{},rule67LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'0:SortInt{},Var'Unds'1:SortKItem{},Var'Unds'2:SortList{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'6:SortInputCell{},Var'Unds'7:SortGeneratedCounterCell{}))))))))))), \bottom{SortGeneratedTopCell{}}())))) []

  alias priorityLE30{}() : SortGeneratedTopCell{}
  where priorityLE30{}() := \or{SortGeneratedTopCell{}}(
    priorityLE25{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarN:SortInt{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},rule13LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{}))))))))), \bottom{SortGeneratedTopCell{}}())) []

  alias priorityLE40{}() : SortGeneratedTopCell{}
  where priorityLE40{}() := \or{SortGeneratedTopCell{}}(
    priorityLE30{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortChannel{},\exists{SortGeneratedTopCell{}}(VarE:SortSet{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule19LHS{}(VarC:SortChannel{},VarE:SortSet{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortChannel{},\exists{SortGeneratedTopCell{}}(VarE:SortSet{},\exists{SortGeneratedTopCell{}}(VarV:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule20LHS{}(VarC:SortChannel{},VarE:SortSet{},VarV:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortInputCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{},Var'Unds'6:SortExternalsCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \bottom{SortGeneratedTopCell{}}()))) []

  alias priorityLE50{}() : SortGeneratedTopCell{}
  where priorityLE50{}() := \or{SortGeneratedTopCell{}}(
    priorityLE40{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortKItem{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortMap{},rule7LHS{}(VarC:SortKItem{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar4:SortMap{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Hash'Fresh:SortInt{},\exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule8LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortExp{},\exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule9LHS{}(VarC:SortExp{},VarE:SortMap{},VarP:SortProcess{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},rule10LHS{}(VarE:SortMap{},VarV:SortInt{},VarX:SortVariable{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Hash'Fresh:SortInt{},\exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(VarQ:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule11LHS{}(Var'Hash'Fresh:SortInt{},VarE:SortMap{},VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortStartupCell{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},rule12LHS{}(VarE:SortMap{},VarX:SortVariable{},Var'Unds'0:SortString{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'5:SortThreadsCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(VarSort:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},rule14LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(VarSort:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},rule15LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},rule16LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutputCell{},rule17LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'0:SortList{},Var'Unds'1:SortStartupCell{},Var'Unds'2:SortExternalsCell{},Var'Unds'3:SortThreadsCell{},Var'Unds'4:SortGeneratedCounterCell{},Var'Unds'5:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},rule21LHS{}(Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortChannel{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule22LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule23LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule24LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule25LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule26LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule27LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule28LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule29LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule30LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule31LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule32LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule33LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule34LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortVariable{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule35LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule36LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule37LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},rule39LHS{}(VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortChannel{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule40LHS{}(VarHOLE:SortExp{},VarK0:SortChannel{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},rule41LHS{}(VarV:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'DotVar1:SortList{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule42LHS{}(VarHOLE:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule43LHS{}(VarI:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarE1:SortExp{},\exists{SortGeneratedTopCell{}}(VarE2:SortExp{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule44LHS{}(VarE1:SortExp{},VarE2:SortExp{},VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule45LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule46LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule47LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule48LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarX:SortInt{},\exists{SortGeneratedTopCell{}}(VarY:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule49LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule50LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule51LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarX:SortInt{},\exists{SortGeneratedTopCell{}}(VarY:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule52LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule53LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule54LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarX:SortInt{},\exists{SortGeneratedTopCell{}}(VarY:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule55LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(VarQ:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule56LHS{}(VarP:SortProcess{},VarQ:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule57LHS{}(VarHOLE:SortExp{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule58LHS{}(VarHOLE:SortExp{},VarK0:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarX:SortInt{},\exists{SortGeneratedTopCell{}}(VarY:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule59LHS{}(VarX:SortInt{},VarY:SortInt{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule60LHS{}(VarHOLE:SortId{},VarK1:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortVariable{},\exists{SortGeneratedTopCell{}}(VarK2:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule61LHS{}(VarHOLE:SortExp{},VarK0:SortVariable{},VarK2:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule62LHS{}(VarHOLE:SortId{},VarK1:SortExp{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule63LHS{}(VarHOLE:SortExp{},VarK0:SortId{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortId{},\exists{SortGeneratedTopCell{}}(VarE:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortExp{},\exists{SortGeneratedTopCell{}}(VarX:SortVariable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},rule64LHS{}(VarC:SortId{},VarE:SortMap{},VarV:SortExp{},VarX:SortVariable{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar2:SortIdCell{},Var'Unds'DotVar3:SortK{},Var'Unds'DotVar5:SortK{})))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'0:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'7:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},rule68LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortIdCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStartupCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'0:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'7:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},rule70LHS{}(Var'Unds'0:SortK{},Var'Unds'1:SortK{},Var'Unds'2:SortIdCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortExternalsCell{},Var'Unds'5:SortInputCell{},Var'Unds'6:SortGeneratedCounterCell{},Var'Unds'7:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Hash'Fresh:SortInt{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule71LHS{}(Var'Hash'Fresh:SortInt{},VarP:SortProcess{},Var'Unds'0:SortThreadCellMap{},Var'Unds'1:SortExternalsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortOutputCell{},Var'Unds'6:SortKItem{},Var'Unds'DotVar1:SortK{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'0:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule72LHS{}(Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarE:SortExternal{},\exists{SortGeneratedTopCell{}}(VarES:SortExternals{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule73LHS{}(VarE:SortExternal{},VarES:SortExternals{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarES:SortExternals{},\exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule74LHS{}(VarES:SortExternals{},VarP:SortProcess{},Var'Unds'0:SortExternalsCell{},Var'Unds'1:SortThreadsCell{},Var'Unds'2:SortInputCell{},Var'Unds'3:SortGeneratedCounterCell{},Var'Unds'4:SortOutputCell{},Var'Unds'DotVar1:SortK{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarC:SortChannel{},\exists{SortGeneratedTopCell{}}(VarS:SortSet{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortK{},rule75LHS{}(VarC:SortChannel{},VarS:SortSet{},Var'Unds'0:SortThreadsCell{},Var'Unds'1:SortInputCell{},Var'Unds'2:SortGeneratedCounterCell{},Var'Unds'3:SortOutputCell{},Var'Unds'DotVar1:SortK{})))))))), \bottom{SortGeneratedTopCell{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) []

  alias priorityLE110{}() : SortGeneratedTopCell{}
  where priorityLE110{}() := \or{SortGeneratedTopCell{}}(
    priorityLE50{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarP:SortProcess{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStartupCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortExternalsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar1:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},rule38LHS{}(VarP:SortProcess{},Var'Unds'0:SortIdCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStartupCell{},Var'Unds'3:SortExternalsCell{},Var'Unds'4:SortInputCell{},Var'Unds'5:SortGeneratedCounterCell{},Var'Unds'6:SortOutputCell{},Var'Unds'DotVar1:SortThreadCellMap{},Var'Unds'DotVar3:SortK{}))))))))))), \bottom{SortGeneratedTopCell{}}())) []

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(92,1,211,9)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/bruce/code/scratch/pcl-k/pcl.k)")]
