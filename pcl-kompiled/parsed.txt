module ARRAY-SYNTAX [org.kframework.attributes.Location(Location(73,1,136,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports LIST
  syntax KItem ::= Array "[" Int "]" [function, hook(ARRAY.lookup)]
  syntax Bool ::= Int "in_keys" "(" Array ")" [function, functional, hook(ARRAY.in_keys)]
  syntax Array [element(_[_<-_]), hook(ARRAY.Array), org.kframework.attributes.Location(Location(76,3,76,69)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), unit(arrayCtor)]
  syntax Array ::= Array "[" Int "<-" KItem "]" [function, hook(ARRAY.update), klabel(_[_<-_]), symbol]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function, hook(ARRAY.remove)]
  syntax Array ::= "updateArray" "(" Array "," Int "," List ")" [function, hook(ARRAY.updateAll), klabel(updateArray)]
  syntax Array ::= "fillArray" "(" Array "," Int "," Int "," KItem ")" [function, hook(ARRAY.fill), klabel(fillArray)]
endmodule


module AUTO-CASTS [org.kframework.attributes.Location(Location(373,1,381,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module AUTO-FOLLOW [org.kframework.attributes.Location(Location(383,1,394,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module BASIC-K [org.kframework.attributes.Location(Location(35,1,41,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-BOOL
  imports ML-SYNTAX
  syntax KItem [hook(K.KItem), org.kframework.attributes.Location(Location(38,3,38,30)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax KConfigVar [org.kframework.attributes.Location(Location(40,3,40,27)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md)), token]
  syntax K ::= KItem
endmodule


module BOOL [org.kframework.attributes.Location(Location(788,1,862,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports BOOL-SYNTAX
  imports BASIC-K
  syntax priority notBool_ > _orElseBool_ _orBool_ _andThenBool_ _impliesBool_ _andBool_ _xorBool_ > _==Bool_ _=/=Bool_
  syntax associativity left _xorBool_
  syntax associativity left _orElseBool_
  syntax associativity left _orBool_
  syntax associativity left _impliesBool_
  syntax associativity left _andThenBool_
  syntax associativity left _andBool_
  syntax associativity left _==Bool_ _=/=Bool_
  syntax associativity left _==Bool_
  syntax associativity left _=/=Bool_
  syntax Bool ::= Bool "xorBool" Bool [boolOperation, function, functional, hook(BOOL.xor), klabel(_xorBool_), left, smt-hook(xor), symbol]
  syntax Bool ::= Bool "orElseBool" Bool [boolOperation, function, functional, hook(BOOL.orElse), klabel(_orElseBool_), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "orBool" Bool [boolOperation, function, functional, hook(BOOL.or), klabel(_orBool_), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "impliesBool" Bool [boolOperation, function, functional, hook(BOOL.implies), klabel(_impliesBool_), left, smt-hook(=>), symbol]
  syntax Bool ::= Bool "andThenBool" Bool [boolOperation, function, functional, hook(BOOL.andThen), klabel(_andThenBool_), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "andBool" Bool [boolOperation, function, functional, hook(BOOL.and), klabel(_andBool_), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "==Bool" Bool [function, functional, hook(BOOL.eq), klabel(_==Bool_), left, smt-hook(=), symbol]
  syntax Bool ::= Bool "=/=Bool" Bool [function, functional, hook(BOOL.ne), klabel(_=/=Bool_), left, smt-hook(distinct), symbol]
  syntax Bool ::= "notBool" Bool [boolOperation, function, functional, hook(BOOL.not), klabel(notBool_), latex(\neg_{\scriptstyle\it Bool}{#1}), smt-hook(not), symbol]
  rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(829,8,829,29)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(830,8,830,29)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(842,8,842,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(843,8,843,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(#SemanticCastToBool(B),#SemanticCastToBool(B))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(844,8,844,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(851,8,851,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("false","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(853,8,853,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(852,8,852,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#SemanticCastToBool(K),#token("false","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(854,8,854,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(846,8,846,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(848,8,848,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(847,8,847,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(849,8,849,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(856,8,856,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(857,8,857,40)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(858,8,858,39)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>`notBool_`(#SemanticCastToBool(B)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(859,8,859,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("true","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(837,8,837,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(839,8,839,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(840,8,840,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#SemanticCastToBool(K),#token("true","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(838,8,838,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(832,8,832,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(834,8,834,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(835,8,835,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#SemanticCastToBool(B),#token("true","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(833,8,833,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=Bool_`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))=>`notBool_`(`_==Bool_`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(861,8,861,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module BOOL-SYNTAX [org.kframework.attributes.Location(Location(782,1,786,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports SORT-BOOL
  syntax Bool ::= "true" [token]
  syntax Bool ::= "false" [token]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
endmodule


module BYTES-CONCRETE [concrete, org.kframework.attributes.Location(Location(1948,1,1950,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports BYTES-HOOKED
endmodule


module BYTES-HOOKED [org.kframework.attributes.Location(Location(1695,1,1855,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  imports BYTES-SYNTAX
  syntax associativity right _+Bytes__BYTES-HOOKED_Bytes_Bytes_Bytes
  syntax String ::= "Bytes2String" "(" Bytes ")" [function, functional, hook(BYTES.bytes2string), klabel(Bytes2String)]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes), symbol]
  syntax Signedness ::= "Signed" [klabel(signedBytes), symbol]
  syntax Int ::= Bytes "[" Int "]" [function, hook(BYTES.get)]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function, functional, hook(BYTES.length), klabel(lengthBytes), smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function, functional, hook(BYTES.bytes2int), klabel(Bytes2Int)]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes), symbol]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes), symbol]
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function, hook(BYTES.update)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function, functional, hook(BYTES.concat), right]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.substr), klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function, functional, hook(BYTES.reverse), klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function, hook(BYTES.replaceAt), klabel(replaceAtBytes)]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padRight), klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padLeft), klabel(padLeftBytes)]
  syntax Bytes ::= "String2Bytes" "(" String ")" [function, functional, hook(BYTES.string2bytes), klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function, functional, hook(BYTES.int2bytes), klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function, functional, klabel(Int2BytesNoLen)]
  syntax Bytes ::= ".Bytes" [function, functional, hook(BYTES.empty)]
endmodule


module BYTES-SYNTAX [org.kframework.attributes.Location(Location(1672,1,1677,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  syntax Bytes [hook(BYTES.Bytes), org.kframework.attributes.Location(Location(1675,3,1675,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Bytes ::= r"b[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
endmodule


module CONFIG-CELLS [org.kframework.attributes.Location(Location(299,1,312,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports KCELLS
  syntax Cell ::= "<" #CellName #CellProperties ">" K "</" #CellName ">" [klabel(#configCell), symbol]
  syntax Cell ::= "<" #CellName "/>" [klabel(#externalCell), symbol]
  syntax #CellProperty ::= #CellName "=" KString [klabel(#cellProperty), symbol]
  syntax #CellProperties ::= #CellProperty #CellProperties [klabel(#cellPropertyList), symbol]
  syntax #CellProperties ::= "" [klabel(#cellPropertyListTerminator), symbol]
  syntax #CellName ::= r"[a-zA-Z][a-zA-Z0-9\\-]*" [prec(1), token]
  syntax #CellName ::= #UpperId [token]
  syntax #CellName ::= #LowerId [token]
endmodule


module DEFAULT-LAYOUT [org.kframework.attributes.Location(Location(506,1,510,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax #Layout ::= r"(\\/\\/[^\\n\\r]*)"
  syntax #Layout ::= r"(\\/\\*([^\\*]|(\\*+([^\\*\\/])))*\\*+\\/)"
  syntax #Layout ::= r"([\\ \\n\\r\\t])"
endmodule


module DOMAINS-SYNTAX [org.kframework.attributes.Location(Location(39,1,45,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  imports STRING-SYNTAX
  imports SORT-K
  imports ID-SYNTAX
  imports BOOL-SYNTAX
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(1163,1,1168,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1164,3,1164,34)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(2007,1,2009,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Id [org.kframework.attributes.Location(Location(2008,3,2008,19)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), token]
endmodule


module ID-SYNTAX-PROGRAM-PARSING [org.kframework.attributes.Location(Location(2000,1,2005,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [prec(1), token]
  syntax Id ::= #UpperId [token]
  syntax Id ::= #LowerId [token]
endmodule


module INT [org.kframework.attributes.Location(Location(1100,1,1128,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-KORE
  imports INT-COMMON
  imports BOOL
  syntax Int ::= "freshInt" "(" Int ")" [freshGenerator, function, functional, klabel(freshInt), private]
  rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(LEN),#token("1","Int")))),`_<<Int_`(#token("1","Int"),#SemanticCastToInt(LEN))),`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(LEN),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1110,8,1110,164)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I2) requires `_>=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1121,8,1121,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I1) requires `_<=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1120,8,1120,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `freshInt(_)_INT_Int_Int`(#SemanticCastToInt(I))=>#SemanticCastToInt(I) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1127,8,1127,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_modInt_`(`_>>Int_`(#SemanticCastToInt(I),#SemanticCastToInt(IDX)),`_<<Int_`(#token("1","Int"),#SemanticCastToInt(LEN))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1108,8,1108,85)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_modInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_%Int_`(`_+Int_`(`_%Int_`(#SemanticCastToInt(I1),`absInt(_)_INT-COMMON_Int_Int`(#SemanticCastToInt(I2))),`absInt(_)_INT-COMMON_Int_Int`(#SemanticCastToInt(I2))),`absInt(_)_INT-COMMON_Int_Int`(#SemanticCastToInt(I2))) requires `_=/=Int_`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [concrete, org.kframework.attributes.Location(Location(1115,5,1118,23)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  rule `_dividesInt__INT-COMMON_Bool_Int_Int`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==Int_`(`_%Int_`(#SemanticCastToInt(I2),#SemanticCastToInt(I1)),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1124,8,1124,58)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_divInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_/Int_`(`_-Int_`(#SemanticCastToInt(I1),`_modInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))),#SemanticCastToInt(I2)) requires `_=/=Int_`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1112,8,1113,23)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_=/=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`notBool_`(`_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1123,8,1123,53)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT-COMMON [org.kframework.attributes.Location(Location(890,1,1033,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BOOL
  syntax priority ~Int_ > _^Int_ _^%Int__ > _divInt_ _%Int_ _/Int_ _*Int_ _modInt_ > _+Int_ _-Int_ > _>>Int_ _<<Int_ > _&Int_ > _xorInt_ > _|Int_
  syntax associativity left _|Int_
  syntax associativity left _xorInt_
  syntax associativity left _modInt_
  syntax associativity left _divInt_ _%Int_ _/Int_ _*Int_ _modInt_
  syntax associativity left _divInt_
  syntax associativity left _^Int_ _^%Int__
  syntax associativity left _^Int_
  syntax associativity left _^%Int__
  syntax associativity left _>Int_
  syntax associativity left _>>Int_ _<<Int_
  syntax associativity left _>>Int_
  syntax associativity left _>=Int_
  syntax associativity left _==Int_
  syntax associativity left _=/=Int_
  syntax associativity left _<Int_
  syntax associativity left _<=Int_
  syntax associativity left _<<Int_
  syntax associativity left _/Int_
  syntax associativity left _-Int_
  syntax associativity left _+Int_ _-Int_
  syntax associativity left _+Int_
  syntax associativity left _*Int_
  syntax associativity left _&Int_
  syntax associativity left _%Int_
  syntax K ::= "srandInt" "(" Int ")" [function, hook(INT.srand), impure, klabel(srandInt)]
  syntax Int ::= Int "|Int" Int [function, functional, hook(INT.or), klabel(_|Int_), latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}), left, smtlib(orInt), symbol]
  syntax Int ::= Int "xorInt" Int [function, functional, hook(INT.xor), klabel(_xorInt_), latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}), left, smtlib(xorInt), symbol]
  syntax Int ::= Int "modInt" Int [function, hook(INT.emod), klabel(_modInt_), left, smt-hook(mod), symbol]
  syntax Int ::= Int "divInt" Int [function, hook(INT.ediv), klabel(_divInt_), left, smt-hook(div), symbol]
  syntax Int ::= Int "^Int" Int [function, hook(INT.pow), klabel(_^Int_), latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}), left, smt-hook(^), symbol]
  syntax Int ::= Int "^%Int" Int Int [function, hook(INT.powmod), klabel(_^%Int__), left, smt-hook((mod (^ #1 #2) #3)), symbol]
  syntax Int ::= Int ">>Int" Int [function, hook(INT.shr), klabel(_>>Int_), latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}), left, smtlib(shrInt), symbol]
  syntax Int ::= Int "<<Int" Int [function, hook(INT.shl), klabel(_<<Int_), latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}), left, smtlib(shlInt), symbol]
  syntax Int ::= Int "/Int" Int [function, hook(INT.tdiv), klabel(_/Int_), latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}), left, smt-hook(div), symbol]
  syntax Int ::= Int "-Int" Int [function, functional, hook(INT.sub), klabel(_-Int_), latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}), left, smt-hook(-), symbol]
  syntax Int ::= Int "+Int" Int [function, functional, hook(INT.add), klabel(_+Int_), latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}), left, smt-hook(+), symbol]
  syntax Int ::= Int "*Int" Int [function, functional, hook(INT.mul), klabel(_*Int_), latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}), left, smt-hook(*), symbol]
  syntax Int ::= Int "&Int" Int [function, functional, hook(INT.and), klabel(_&Int_), latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}), left, smtlib(andInt), symbol]
  syntax Int ::= Int "%Int" Int [function, hook(INT.tmod), klabel(_%Int_), latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}), left, smt-hook(mod), symbol]
  syntax Int ::= "~Int" Int [function, functional, hook(INT.not), klabel(~Int_), latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}), smtlib(notInt), symbol]
  syntax Int ::= "signExtendBitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.signExtendBitRange), klabel(signExtendBitRangeInt)]
  syntax Int ::= "randInt" "(" Int ")" [function, hook(INT.rand), impure, klabel(randInt)]
  syntax Int ::= "minInt" "(" Int "," Int ")" [function, functional, hook(INT.min), smt-hook((ite (< #1 #2) #1 #2))]
  syntax Int ::= "maxInt" "(" Int "," Int ")" [function, functional, hook(INT.max), smt-hook((ite (< #1 #2) #2 #1))]
  syntax Int ::= "log2Int" "(" Int ")" [function, hook(INT.log2), klabel(log2Int)]
  syntax Int ::= "bitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.bitRange), klabel(bitRangeInt)]
  syntax Int ::= "absInt" "(" Int ")" [function, functional, hook(INT.abs), klabel(absInt), smt-hook((ite (< #1 0) (- 0 #1) #1))]
  syntax Bool ::= Int "dividesInt" Int [function]
  syntax Bool ::= Int ">Int" Int [function, functional, hook(INT.gt), klabel(_>Int_), latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}), left, smt-hook(>), symbol]
  syntax Bool ::= Int ">=Int" Int [function, functional, hook(INT.ge), klabel(_>=Int_), latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}), left, smt-hook(>=), symbol]
  syntax Bool ::= Int "==Int" Int [function, functional, hook(INT.eq), klabel(_==Int_), latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(=), symbol]
  syntax Bool ::= Int "=/=Int" Int [function, functional, hook(INT.ne), klabel(_=/=Int_), latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(distinct), symbol]
  syntax Bool ::= Int "<Int" Int [function, functional, hook(INT.lt), klabel(_<Int_), latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}), left, smt-hook(<), symbol]
  syntax Bool ::= Int "<=Int" Int [function, functional, hook(INT.le), klabel(_<=Int_), latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}), left, smt-hook(<=), symbol]
endmodule


module INT-KORE [kore, org.kframework.attributes.Location(Location(1092,1,1098,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-COMMON
  rule `_==K_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1096,8,1096,40)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(885,1,888,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2), prefer, token]
endmodule


module K [org.kframework.attributes.Location(Location(447,1,477,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports REQUIRES-ENSURES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
  syntax {Sort} Sort ::= Sort "#as" Sort [klabel(#KAs), symbol]
  syntax {Sort} Sort ::= "#fun" "(" Sort ")" "(" Sort ")" [klabel(#fun2), prefer, symbol]
  syntax {Sort1, Sort2} Sort1 ::= "#let" Sort2 "=" Sort2 "#in" Sort1 [klabel(#let), symbol]
  syntax {Sort1, Sort2} Sort1 ::= "#fun" "(" Sort2 "=>" Sort1 ")" "(" Sort2 ")" [klabel(#fun3), symbol]
  syntax associativity left _:=K_ _:/=K_
  syntax Bool ::= K ":=K" K [equalEqualK, function, functional, klabel(_:=K_), symbol]
  syntax Bool ::= K ":/=K" K [function, functional, klabel(_:/=K_), notEqualEqualK, symbol]
endmodule


module K-AMBIGUITIES [org.kframework.attributes.Location(Location(542,1,546,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= "amb" "(" Sort "," Sort ")" [klabel(amb), symbol]
endmodule


module K-BOTTOM-SORT [org.kframework.attributes.Location(Location(362,1,366,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  syntax {Sort} Sort ::= KBott
  syntax KItem ::= KBott
endmodule


module K-EQUAL [org.kframework.attributes.Location(Location(2079,1,2090,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports K-EQUAL-KORE
  imports BOOL
  rule `_=/=K_`(#SemanticCastToK(K1),#SemanticCastToK(K2))=>`notBool_`(`_==K_`(#SemanticCastToK(K1),#SemanticCastToK(K2))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2085,8,2085,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(#SemanticCastToBool(C),#SemanticCastToK(_),#SemanticCastToK(B2))=>#SemanticCastToK(B2) requires `notBool_`(#SemanticCastToBool(C)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2088,8,2088,67)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(#SemanticCastToBool(C),#SemanticCastToK(B1),#SemanticCastToK(_))=>#SemanticCastToK(B1) requires #SemanticCastToBool(C) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2087,8,2087,59)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
endmodule


module K-EQUAL-KORE [kore, org.kframework.attributes.Location(Location(2063,1,2069,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports BOOL
  rule `_==K_`(#SemanticCastToBool(K1),#SemanticCastToBool(K2))=>`_==Bool_`(#SemanticCastToBool(K1),#SemanticCastToBool(K2)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2067,8,2067,43)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-EQUAL-SYNTAX [org.kframework.attributes.Location(Location(2049,1,2061,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports BOOL
  imports BASIC-K
  syntax {Sort} Sort ::= "#if" Bool "#then" Sort "#else" Sort "#fi" [function, functional, hook(KEQUAL.ite), smt-hook(ite)]
  syntax priority _:=K_ _=/=K_ _:/=K_ _==K_ > weakAlwaysFinally #And _orElseBool_ weakExistsFinally _orBool_ #Implies _andThenBool_ _impliesBool_ #Floor #Exists #Ceil _andBool_ #Forall #Not #Or notBool_ #AG #Equals _xorBool_
  syntax associativity left _=/=K_ _==K_
  syntax Bool ::= K "==K" K [equalEqualK, function, functional, hook(KEQUAL.eq), klabel(_==K_), latex({#1}\mathrel{=_K}{#2}), smt-hook(=), symbol]
  syntax Bool ::= K "=/=K" K [function, functional, hook(KEQUAL.ne), klabel(_=/=K_), latex({#1}\mathrel{\neq_K}{#2}), notEqualEqualK, smt-hook(distinct), symbol]
endmodule


module K-IO [org.kframework.attributes.Location(Location(2168,1,2436,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING
  imports LIST
  imports INT
  syntax Stream ::= "#parseInput" "(" String "," String ")" [klabel(#parseInput)]
  syntax Stream ::= "#ostream" "(" Int ")" [klabel(#ostream)]
  syntax Stream ::= "#istream" "(" Int ")" [klabel(#istream)]
  syntax Stream ::= "#buffer" "(" K ")" [klabel(#buffer)]
  syntax KItem ::= "#systemResult" "(" Int "," String "," String ")" [klabel(#systemResult), symbol]
  syntax KItem ::= "#system" "(" String ")" [function, hook(IO.system), impure, klabel(#system)]
  syntax K ::= "#write" "(" Int "," String ")" [function, hook(IO.write), impure]
  syntax K ::= "#unlock" "(" Int "," Int ")" [function, hook(IO.unlock), impure]
  syntax K ::= "#shutdownWrite" "(" Int ")" [function, hook(IO.shutdownWrite), impure]
  syntax K ::= "#seekEnd" "(" Int "," Int ")" [function, hook(IO.seekEnd), impure]
  syntax K ::= "#seek" "(" Int "," Int ")" [function, hook(IO.seek), impure]
  syntax K ::= "#remove" "(" String ")" [function, functional, hook(IO.remove), impure, klabel(#remove)]
  syntax K ::= "#putc" "(" Int "," Int ")" [function, hook(IO.putc), impure]
  syntax K ::= "#logToFile" "(" String "," String ")" [function, functional, hook(IO.log), impure, klabel(#logToFile), returnsUnit, symbol]
  syntax K ::= "#lock" "(" Int "," Int ")" [function, hook(IO.lock), impure]
  syntax K ::= "#close" "(" Int ")" [function, hook(IO.close), impure]
  syntax Int ::= "#time" "(" ")" [function, hook(IO.time), impure]
  syntax Int ::= "#stdout" [function, functional]
  syntax Int ::= "#stdin" [function, functional]
  syntax Int ::= "#stderr" [function, functional]
  syntax IOString ::= String
  syntax IOString ::= IOError
  syntax IOString ::= "#read" "(" Int "," Int ")" [function, hook(IO.read), impure]
  syntax IOInt ::= Int
  syntax IOInt ::= IOError
  syntax IOInt ::= "#tell" "(" Int ")" [function, hook(IO.tell), impure]
  syntax IOInt ::= "#open" "(" String "," String ")" [function, hook(IO.open), impure]
  syntax IOInt ::= "#open" "(" String ")" [function]
  syntax IOInt ::= "#getc" "(" Int ")" [function, hook(IO.getc), impure]
  syntax IOInt ::= "#accept" "(" Int ")" [function, hook(IO.accept), impure]
  syntax IOFile ::= IOError
  syntax IOFile ::= "#tempFile" "(" String "," Int ")" [klabel(#tempFile), symbol]
  syntax IOFile ::= "#mkstemp" "(" String ")" [function, hook(IO.mkstemp), impure, klabel(#mkstemp)]
  syntax IOError ::= "#unknownIOError" "(" Int ")" [klabel(#unknownIOError), symbol]
  syntax IOError ::= "#EXDEV" [klabel(#EXDEV), symbol]
  syntax IOError ::= "#EWOULDBLOCK" [klabel(#EWOULDBLOCK), symbol]
  syntax IOError ::= "#ETOOMANYREFS" [klabel(#ETOOMANYREFS), symbol]
  syntax IOError ::= "#ETIMEDOUT" [klabel(#ETIMEDOUT), symbol]
  syntax IOError ::= "#ESRCH" [klabel(#ESRCH), symbol]
  syntax IOError ::= "#ESPIPE" [klabel(#ESPIPE), symbol]
  syntax IOError ::= "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT), symbol]
  syntax IOError ::= "#ESHUTDOWN" [klabel(#ESHUTDOWN), symbol]
  syntax IOError ::= "#EROFS" [klabel(#EROFS), symbol]
  syntax IOError ::= "#ERANGE" [klabel(#ERANGE), symbol]
  syntax IOError ::= "#EPROTOTYPE" [klabel(#EPROTOTYPE), symbol]
  syntax IOError ::= "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT), symbol]
  syntax IOError ::= "#EPIPE" [klabel(#EPIPE), symbol]
  syntax IOError ::= "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT), symbol]
  syntax IOError ::= "#EPERM" [klabel(#EPERM), symbol]
  syntax IOError ::= "#EOVERFLOW" [klabel(#EOVERFLOW), symbol]
  syntax IOError ::= "#EOPNOTSUPP" [klabel(#EOPNOTSUPP), symbol]
  syntax IOError ::= "#EOF" [klabel(#EOF), symbol]
  syntax IOError ::= "#ENXIO" [klabel(#ENXIO), symbol]
  syntax IOError ::= "#ENOTTY" [klabel(#ENOTTY), symbol]
  syntax IOError ::= "#ENOTSOCK" [klabel(#ENOTSOCK), symbol]
  syntax IOError ::= "#ENOTEMPTY" [klabel(#ENOTEMPTY), symbol]
  syntax IOError ::= "#ENOTDIR" [klabel(#ENOTDIR), symbol]
  syntax IOError ::= "#ENOTCONN" [klabel(#ENOTCONN), symbol]
  syntax IOError ::= "#ENOSYS" [klabel(#ENOSYS), symbol]
  syntax IOError ::= "#ENOSPC" [klabel(#ENOSPC), symbol]
  syntax IOError ::= "#ENOPROTOOPT" [klabel(#ENOPROTOOPT), symbol]
  syntax IOError ::= "#ENOMEM" [klabel(#ENOMEM), symbol]
  syntax IOError ::= "#ENOLCK" [klabel(#ENOLCK), symbol]
  syntax IOError ::= "#ENOEXEC" [klabel(#ENOEXEC), symbol]
  syntax IOError ::= "#ENOENT" [klabel(#ENOENT), symbol]
  syntax IOError ::= "#ENODEV" [klabel(#ENODEV), symbol]
  syntax IOError ::= "#ENOBUFS" [klabel(#ENOBUFS), symbol]
  syntax IOError ::= "#ENFILE" [klabel(#ENFILE), symbol]
  syntax IOError ::= "#ENETUNREACH" [klabel(#ENETUNREACH), symbol]
  syntax IOError ::= "#ENETRESET" [klabel(#ENETRESET), symbol]
  syntax IOError ::= "#ENETDOWN" [klabel(#ENETDOWN), symbol]
  syntax IOError ::= "#ENAMETOOLONG" [klabel(#ENAMETOOLONG), symbol]
  syntax IOError ::= "#EMSGSIZE" [klabel(#EMSGSIZE), symbol]
  syntax IOError ::= "#EMLINK" [klabel(#EMLINK), symbol]
  syntax IOError ::= "#EMFILE" [klabel(#EMFILE), symbol]
  syntax IOError ::= "#ELOOP" [klabel(#ELOOP), symbol]
  syntax IOError ::= "#EISDIR" [klabel(#EISDIR), symbol]
  syntax IOError ::= "#EISCONN" [klabel(#EISCONN), symbol]
  syntax IOError ::= "#EIO" [klabel(#EIO), symbol]
  syntax IOError ::= "#EINVAL" [klabel(#EINVAL), symbol]
  syntax IOError ::= "#EINTR" [klabel(#EINTR), symbol]
  syntax IOError ::= "#EINPROGRESS" [klabel(#EINPROGRESS), symbol]
  syntax IOError ::= "#EHOSTUNREACH" [klabel(#EHOSTUNREACH), symbol]
  syntax IOError ::= "#EHOSTDOWN" [klabel(#EHOSTDOWN), symbol]
  syntax IOError ::= "#EFBIG" [klabel(#EFBIG), symbol]
  syntax IOError ::= "#EFAULT" [klabel(#EFAULT), symbol]
  syntax IOError ::= "#EEXIST" [klabel(#EEXIST), symbol]
  syntax IOError ::= "#EDOM" [klabel(#EDOM), symbol]
  syntax IOError ::= "#EDESTADDRREQ" [klabel(#EDESTADDRREQ), symbol]
  syntax IOError ::= "#EDEADLK" [klabel(#EDEADLK), symbol]
  syntax IOError ::= "#ECONNRESET" [klabel(#ECONNRESET), symbol]
  syntax IOError ::= "#ECONNREFUSED" [klabel(#ECONNREFUSED), symbol]
  syntax IOError ::= "#ECONNABORTED" [klabel(#ECONNABORTED), symbol]
  syntax IOError ::= "#ECHILD" [klabel(#ECHILD), symbol]
  syntax IOError ::= "#EBUSY" [klabel(#EBUSY), symbol]
  syntax IOError ::= "#EBADF" [klabel(#EBADF), symbol]
  syntax IOError ::= "#EALREADY" [klabel(#EALREADY), symbol]
  syntax IOError ::= "#EAGAIN" [klabel(#EAGAIN), symbol]
  syntax IOError ::= "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT), symbol]
  syntax IOError ::= "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL), symbol]
  syntax IOError ::= "#EADDRINUSE" [klabel(#EADDRINUSE), symbol]
  syntax IOError ::= "#EACCES" [klabel(#EACCES), symbol]
  syntax IOError ::= "#E2BIG" [klabel(#E2BIG), symbol]
  rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2372,8,2372,20)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2371,8,2371,19)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2373,8,2373,20)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#open(_)_K-IO_IOInt_String`(#SemanticCastToString(S))=>`#open(_,_)_K-IO_IOInt_String_String`(#SemanticCastToString(S),#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(2276,8,2276,48)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-LOCATIONS [org.kframework.attributes.Location(Location(559,1,566,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports STRING-SYNTAX
  imports INT-SYNTAX
  syntax {Sort} Sort ::= "#location" "(" Sort "," String "," Int "," Int "," Int "," Int ")" [format(%3), klabel(#location), symbol]
endmodule


module K-REFLECTION [org.kframework.attributes.Location(Location(2111,1,2135,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING
  imports BASIC-K
  syntax {Sort} String ::= "#unparseKORE" "(" Sort ")" [function, hook(KREFLECTION.printKORE), klabel(#unparseKORE)]
  syntax {Sort} Sort ::= "#parseKORE" "(" String ")" [function, hook(KREFLECTION.parseKORE), klabel(#parseKORE)]
  syntax {Sort} Sort ::= "#parseKAST" "(" String ")" [function, hook(KREFLECTION.parseKAST), klabel(#parseKAST)]
  syntax String ::= "#sort" "(" K ")" [function, hook(KREFLECTION.sort), klabel(#sort)]
  syntax String ::= "#kompiledDirectory" "(" ")" [function, hook(KREFLECTION.kompiledDir), klabel(#kompiledDirectory)]
  syntax List ::= "#argv" "(" ")" [function, hook(KREFLECTION.argv), klabel(#argv)]
  syntax KItem ::= "getKLabel" "(" K ")" [function, hook(KREFLECTION.getKLabel), klabel(getKLabel)]
  syntax KItem ::= "#fresh" "(" String ")" [function, hook(KREFLECTION.fresh), impure, klabel(#fresh)]
  syntax K ::= "#getenv" "(" String ")" [function, hook(KREFLECTION.getenv), impure, klabel(#getenv)]
  syntax K ::= "#configuration" [function, hook(KREFLECTION.configuration), impure]
  syntax IOError ::= "#noParse" "(" String ")" [klabel(#noParse), symbol]
endmodule


module K-SORT-LATTICE [org.kframework.attributes.Location(Location(368,1,371,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports K-TOP-SORT
  imports K-BOTTOM-SORT
endmodule


module K-TERM [org.kframework.attributes.Location(Location(480,1,488,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K-TOP-SORT [org.kframework.attributes.Location(Location(356,1,360,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  syntax {Sort} KItem ::= Sort
  syntax KItem ::= KBott
endmodule


module KAST [org.kframework.attributes.Location(Location(72,1,92,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  imports KSTRING
  imports BUILTIN-ID-TOKENS
  imports BASIC-K
  syntax associativity left #KList
  syntax KList ::= KList "," KList [assoc, klabel(#KList), left, prefer, symbol, unit(#EmptyKList)]
  syntax KList ::= K
  syntax KList ::= ".KList" [klabel(#EmptyKList), symbol]
  syntax KList ::= ".::KList" [klabel(#EmptyKList), symbol]
  syntax KLabel ::= r"`(\\\\`|\\\\\\\\|[^`\\\\\\n\\r])+`" [token]
  syntax KLabel ::= r"(?<![a-zA-Z0-9])[#a-z][a-zA-Z0-9]*" [prec(1), token]
  syntax KLabel ::= #LowerId [token]
  syntax KItem ::= KBott
  syntax KBott ::= KLabel "(" KList ")" [klabel(#KApply), symbol]
  syntax KBott ::= "#token" "(" KString "," KString ")" [klabel(#KToken), symbol]
  syntax KBott ::= "#klabel" "(" KLabel ")" [klabel(#WrappedKLabel), symbol]
endmodule


module KCELLS [org.kframework.attributes.Location(Location(240,1,253,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports KAST
  syntax associativity non-assoc #withConfig
  syntax associativity left #cells
  syntax KItem ::= Bag
  syntax Cell [org.kframework.attributes.Location(Location(243,3,243,13)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax Bag ::= KBott
  syntax Bag ::= Cell
  syntax Bag ::= Bag Bag [assoc, klabel(#cells), left, symbol, unit(#cells)]
  syntax Bag ::= ".Bag" [klabel(#cells), symbol]
  syntax Bag ::= ".::Bag" [klabel(#cells), symbol]
  syntax Bag ::= "(" Bag ")" [bracket, bracketLabel((_)_KCELLS_Bag_Bag)]
  syntax #RuleBody ::= "[" "[" K "]" "]" Bag [avoid, klabel(#withConfig), symbol]
endmodule


module KREWRITE [org.kframework.attributes.Location(Location(440,1,444,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= Sort "=>" Sort [klabel(#KRewrite), symbol]
  syntax priority #KRewrite > #withConfig
  syntax associativity non-assoc #KRewrite
endmodule


module KSEQ [org.kframework.attributes.Location(Location(96,1,105,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports KAST
  imports K-TOP-SORT
  syntax {Sort} Sort ::= "(" Sort ")" [applyPriority(1), bracket, bracketLabel((_)_KSEQ_Sort_Sort{Sort}), defaultBracket]
  syntax associativity left #KSequence
  syntax K ::= K "~>" K [assoc, klabel(#KSequence), left, symbol, unit(#EmptyK)]
  syntax K ::= ".K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= ".::K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= "." [klabel(#EmptyK), symbol]
endmodule


module KSEQ-SYMBOLIC [org.kframework.attributes.Location(Location(205,1,216,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports ML-SYNTAX
  imports KVARIABLE-SYNTAX
  imports KSEQ
  syntax KLabel ::= #KVariable
  syntax KConfigVar ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\$)([A-Z][A-Za-z0-9'_]*)" [token]
  syntax KBott ::= KConfigVar
  syntax KBott ::= #KVariable
  syntax #KVariable ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\!|\\?|@)?([A-Z][A-Za-z0-9'_]*|_|_[A-Z][A-Za-z0-9'_]*)" [prec(1), token]
  syntax #KVariable ::= #UpperId [token]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
endmodule


module KVARIABLE-SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax #KVariable [org.kframework.attributes.Location(Location(201,3,201,19)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module LIST [org.kframework.attributes.Location(Location(620,1,735,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BASIC-K
  syntax associativity left _List_
  syntax List [hook(LIST.List), org.kframework.attributes.Location(Location(624,3,624,31)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax List ::= List List [assoc, element(ListItem), format(%1%n%2), function, functional, hook(LIST.concat), klabel(_List_), left, smtlib(smt_seq_concat), symbol, unit(.List)]
  syntax List ::= List "[" Int "<-" KItem "]" [function, hook(LIST.update), klabel(List:set)]
  syntax List ::= "updateList" "(" List "," Int "," List ")" [function, hook(LIST.updateAll), klabel(updateList)]
  syntax List ::= "range" "(" List "," Int "," Int ")" [function, hook(LIST.range), klabel(List:range), symbol]
  syntax List ::= "makeList" "(" Int "," KItem ")" [function, hook(LIST.make), klabel(makeList)]
  syntax List ::= "fillList" "(" List "," Int "," Int "," KItem ")" [function, hook(LIST.fill), klabel(fillList)]
  syntax List ::= "ListItem" "(" KItem ")" [function, functional, hook(LIST.element), klabel(ListItem), smtlib(smt_seq_elem), symbol]
  syntax List ::= ".List" [function, functional, hook(LIST.unit), klabel(.List), latex(\dotCt{List}), smtlib(smt_seq_nil), symbol]
  syntax KItem ::= List "[" Int "]" [function, hook(LIST.get), klabel(List:get), symbol]
  syntax Int ::= "size" "(" List ")" [function, functional, hook(LIST.size), klabel(sizeList), smtlib(smt_seq_len)]
  syntax Bool ::= KItem "in" List [function, functional, hook(LIST.in), klabel(_inList_)]
endmodule


module MAP [org.kframework.attributes.Location(Location(212,1,404,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports SET
  imports LIST
  imports INT-SYNTAX
  imports BOOL-SYNTAX
  syntax priority _|->_ > .Map _Map_
  syntax associativity non-assoc _|->_
  syntax associativity left _Map_
  syntax Set ::= "keys" "(" Map ")" [function, functional, hook(MAP.keys), klabel(keys)]
  syntax Map [hook(MAP.Map), org.kframework.attributes.Location(Location(218,3,218,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Map ::= Map Map [assoc, comm, element(_|->_), format(%1%n%2), function, hook(MAP.concat), index(0), klabel(_Map_), left, symbol, unit(.Map)]
  syntax Map ::= Map "[" KItem "<-" KItem "]" [function, functional, hook(MAP.update), klabel(Map:update), prefer, symbol]
  syntax Map ::= Map "[" KItem "<-" "undef" "]" [function, functional, hook(MAP.remove), klabel(_[_<-undef]), symbol]
  syntax Map ::= Map "-Map" Map [function, functional, hook(MAP.difference), latex({#1}-_{\it Map}{#2})]
  syntax Map ::= KItem "|->" KItem [function, functional, hook(MAP.element), klabel(_|->_), latex({#1}\mapsto{#2}), symbol]
  syntax Map ::= "updateMap" "(" Map "," Map ")" [function, functional, hook(MAP.updateAll), klabel(updateMap)]
  syntax Map ::= "removeAll" "(" Map "," Set ")" [function, functional, hook(MAP.removeAll), klabel(removeAll)]
  syntax Map ::= ".Map" [function, functional, hook(MAP.unit), klabel(.Map), latex(\dotCt{Map}), symbol]
  syntax List ::= "values" "(" Map ")" [function, hook(MAP.values), klabel(values)]
  syntax List ::= "keys_list" "(" Map ")" [function, hook(MAP.keys_list)]
  syntax KItem ::= Map "[" KItem "]" [function, hook(MAP.lookup), klabel(Map:lookup), symbol]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem [function, functional, hook(MAP.lookupOrDefault), klabel(Map:lookupOrDefault)]
  syntax KItem ::= "choice" "(" Map ")" [function, hook(MAP.choice), klabel(Map:choice)]
  syntax Int ::= "size" "(" Map ")" [function, functional, hook(MAP.size), klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map [function, functional, hook(MAP.inclusion)]
  syntax Bool ::= KItem "in_keys" "(" Map ")" [function, functional, hook(MAP.in_keys)]
endmodule


module MINT-SYNTAX [org.kframework.attributes.Location(Location(2627,1,2634,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax {Width} MInt{Width} ::= r"[\\+-]?[0-9]+[pP][0-9]+" [hook(MINT.literal), prec(2), token]
  syntax MInt{Width} [hook(MINT.MInt), org.kframework.attributes.Location(Location(2630,3,2630,46)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
endmodule


module ML-SYNTAX [not-lr1, org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#Or), left, mlOp, symbol, unit(#Bottom)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d), klabel(#Implies), mlImplies, mlOp, symbol]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#And), left, mlAnd, mlOp, symbol, unit(#Top)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#wAF" "(" Sort ")" [klabel(weakAlwaysFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#True" [klabel(#Top), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Top" [klabel(#Top), mlUnary, symbol]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not), mlOp, mlUnary, symbol]
  syntax {Sort} Sort ::= "#False" [klabel(#Bottom), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Bottom" [klabel(#Bottom), mlUnary, symbol]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG), mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5), klabel(#Equals), mlEquals, mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor), mlOp, mlUnary, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil), mlOp, mlUnary, symbol]
  syntax priority #Top #Floor #Ceil #Not #Bottom > #Equals > #And
  syntax priority #Implies > #Exists #Forall
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
endmodule


module PCL [org.kframework.attributes.Location(Location(92,1,211,9)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k))]
  imports STRING
  imports SET
  imports PCL-SYNTAX
  imports PCL-HOOKS
  imports PCL-CONFIGURATION
  imports K-EQUAL
  imports INT
  imports BOOL
  syntax Channel ::= "StringToChannel" "(" String ")" [function, functional, hook(STRING.string2token), klabel(StringToChannel)]
  syntax Channel ::= "#freshChannel" "(" Int ")" [freshGenerator, function, functional, klabel(#freshChannel)]
  rule isKResult(#SemanticCastToInt(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(107,8,107,32)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule isKResult(#SemanticCastToExp(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(108,8,108,29)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), owise]
  rule isKResult(#SemanticCastToChannel(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(106,8,106,36)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_/__PCL-SYNTAX_Exp_Exp_Exp`(#SemanticCastToInt(X),#SemanticCastToInt(Y))=>`_/Int_`(#SemanticCastToInt(X),#SemanticCastToInt(Y)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(207,8,207,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_-__PCL-SYNTAX_Exp_Exp_Exp`(#SemanticCastToInt(X),#SemanticCastToInt(Y))=>`_-Int_`(#SemanticCastToInt(X),#SemanticCastToInt(Y)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(209,8,209,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_+__PCL-SYNTAX_Exp_Exp_Exp`(#SemanticCastToInt(X),#SemanticCastToInt(Y))=>`_+Int_`(#SemanticCastToInt(X),#SemanticCastToInt(Y)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(208,8,208,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_*__PCL-SYNTAX_Exp_Exp_Exp`(#SemanticCastToInt(X),#SemanticCastToInt(Y))=>`_*Int_`(#SemanticCastToInt(X),#SemanticCastToInt(Y)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(206,8,206,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<threads>`(#noDots(.KList),`<thread>`(#dots(.KList),`<k>`(#noDots(.KList),.K,#noDots(.KList)),#dots(.KList))=>#cells(.KList),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(180,5,183,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<threads>`(#noDots(.KList),#cells(`<thread>`(#dots(.KList),#cells(`<k>`(#noDots(.KList),`(_|_)_PCL-SYNTAX_Process_Process_Process`(#SemanticCastToProcess(P),#SemanticCastToProcess(Q))=>#SemanticCastToProcess(P),#dots(.KList)),`<env>`(#noDots(.KList),#SemanticCastToMap(E),#noDots(.KList))),#noDots(.KList)),#cells(.KList)=>`<thread>`(#noDots(.KList),#cells(#cells(`<id>`(#noDots(.KList),#SemanticCastToInt(!_),#noDots(.KList)),`<k>`(#noDots(.KList),#SemanticCastToProcess(Q),#noDots(.KList))),`<env>`(#noDots(.KList),#SemanticCastToMap(E),#noDots(.KList))),#noDots(.KList))),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(160,5,173,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<threads>`(#dots(.KList),#cells(`<thread>`(#noDots(.KList),#cells(`<k>`(#noDots(.KList),`in_(_)_PCL-SYNTAX_Process_Id_Variable`(#SemanticCastToId(C),#SemanticCastToVariable(X))=>.K,#dots(.KList)),`<env>`(#noDots(.KList),#SemanticCastToMap(E)=>`Map:update`(#SemanticCastToMap(E),#SemanticCastToVariable(X),#SemanticCastToExp(V)),#noDots(.KList))),#dots(.KList)),`<thread>`(#noDots(.KList),`<k>`(#noDots(.KList),`out_(_)_PCL-SYNTAX_Process_Id_Exp`(#SemanticCastToId(C),#SemanticCastToExp(V))=>.K,#dots(.KList)),#dots(.KList))),#dots(.KList)) requires isKResult(#SemanticCastToExp(V)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(144,5,157,26)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `<startup>`(#noDots(.KList),`___PCL-SYNTAX_Program_Externals_Process`(#SemanticCastToExternals(ES),#SemanticCastToProcess(P))=>#SemanticCastToExternals(ES)~>#SemanticCastToProcess(P),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(121,8,121,65)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<startup>`(#noDots(.KList),`___PCL-SYNTAX_Externals_External_Externals`(#SemanticCastToExternal(E),#SemanticCastToExternals(ES))=>#SemanticCastToExternal(E)~>#SemanticCastToExternals(ES),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(122,8,122,57)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<startup>`(#noDots(.KList),`.List{"___PCL-SYNTAX_Externals_External_Externals"}_Externals`(.KList)=>.K,#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(123,8,123,47)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<k>`(#noDots(.KList),`end_PCL-SYNTAX_Process`(.KList)~>#SemanticCastToK(_)=>.K,#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(194,5,194,27)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<k>`(#noDots(.KList),`_.__PCL-SYNTAX_Process_Process_Process`(#SemanticCastToProcess(P),#SemanticCastToProcess(Q))=>#SemanticCastToProcess(P)~>#SemanticCastToProcess(Q),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(129,5,129,32)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<k>`(#noDots(.KList),`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(#SemanticCastToExp(_),#SemanticCastToExp(_),#SemanticCastToProcess(_))=>.K,#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(190,5,190,37)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), owise]
  rule `<k>`(#noDots(.KList),`[_=_]{_}_PCL-SYNTAX_Process_Exp_Exp_Process`(#SemanticCastToExp(E1),#SemanticCastToExp(E2),#SemanticCastToProcess(P))=>#SemanticCastToProcess(P),#dots(.KList)) requires `_==K_`(#SemanticCastToExp(E1),#SemanticCastToExp(E2)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(186,5,187,23)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `<k>`(#noDots(.KList),`!(_)_PCL-SYNTAX_Process_Process`(#SemanticCastToProcess(P))=>`(_|_)_PCL-SYNTAX_Process_Process_Process`(#SemanticCastToProcess(P),`!(_)_PCL-SYNTAX_Process_Process`(#SemanticCastToProcess(P))),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(176,5,176,40)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(110)]
  rule `-__PCL-SYNTAX_Exp_Exp`(#SemanticCastToInt(I))=>`_-Int_`(#token("0","Int"),#SemanticCastToInt(I)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(205,8,205,34)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#freshChannel(_)_PCL_Channel_Int`(#SemanticCastToInt(I))=>`StringToChannel(_)_PCL_Channel_String`(`_+String__STRING-COMMON_String_String_String`(#token("\"#c_\"","String"),`Int2String(_)_STRING-COMMON_String_Int`(#SemanticCastToInt(I)))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(104,8,104,72)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<startup>`(#noDots(.KList),`stop_PCL-SYNTAX_Process`(.KList)=>.K,#dots(.KList)),`<threads>`(#noDots(.KList),#SemanticCastToBag(_)=>#cells(.KList),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(201,5,202,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(20)]
  rule #cells(`<startup>`(#noDots(.KList),`external_;_PCL-SYNTAX_External_Channel`(#SemanticCastToChannel(C))=>.K,#dots(.KList)),`<externals>`(#noDots(.KList),#SemanticCastToSet(S)=>`_Set_`(#SemanticCastToSet(S),`SetItem`(#SemanticCastToChannel(C))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(125,5,126,47)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<startup>`(#noDots(.KList),#SemanticCastToProcess(P)=>.K,#dots(.KList)),`<threads>`(#noDots(.KList),#SemanticCastToBag(_)=>`<thread>`(#noDots(.KList),#cells(#cells(`<id>`(#noDots(.KList),#SemanticCastToInt(!_),#noDots(.KList)),`<k>`(#noDots(.KList),#SemanticCastToProcess(P),#noDots(.KList))),`<env>`(#noDots(.KList),`.Map`(.KList),#noDots(.KList))),#noDots(.KList)),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(111,5,119,15)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<k>`(#noDots(.KList),`stop_PCL-SYNTAX_Process`(.KList)~>#SemanticCastToK(_)=>.K,#noDots(.KList)),`<startup>`(#noDots(.KList),#SemanticCastToK(_)=>`stop_PCL-SYNTAX_Process`(.KList),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(197,5,198,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<k>`(#noDots(.KList),`let_=_{_}_PCL-SYNTAX_Process_Variable_Exp_Process`(#SemanticCastToVariable(X),#SemanticCastToExp(C),#SemanticCastToProcess(P))=>#SemanticCastToProcess(P),#dots(.KList)),`<env>`(#noDots(.KList),#SemanticCastToMap(E)=>`Map:update`(#SemanticCastToMap(E),#SemanticCastToVariable(X),#SemanticCastToExp(C)),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(136,5,137,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<k>`(#noDots(.KList),`fresh_{_}_PCL-SYNTAX_Process_Variable_Process`(#SemanticCastToVariable(X),#SemanticCastToProcess(P))=>#SemanticCastToProcess(P),#dots(.KList)),`<env>`(#noDots(.KList),#SemanticCastToMap(E)=>`Map:update`(#SemanticCastToMap(E),#SemanticCastToVariable(X),#SemanticCastToChannel(!_)),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(140,5,141,44)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<k>`(#noDots(.KList),#SemanticCastToVariable(X)=>#SemanticCastToKItem(C),#dots(.KList)),`<env>`(#dots(.KList),`_|->_`(#SemanticCastToVariable(X),#SemanticCastToKItem(C)),#dots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(132,5,133,31)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module PCL-CONFIGURATION [org.kframework.attributes.Location(Location(37,1,54,9)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k))]
  imports SET
  imports MAP
  imports LIST
  imports INT
  syntax ThreadsCellOpt ::= ThreadsCell
  syntax ThreadsCellOpt ::= "noThreadsCell" [cellOptAbsent(ThreadsCell)]
  syntax ThreadsCellFragment ::= "<threads>-fragment" ThreadCellMap "</threads>-fragment" [cellFragment(ThreadsCell)]
  syntax ThreadsCell ::= "initThreadsCell" [function, initializer, noThread]
  syntax ThreadsCell ::= "<threads>" ThreadCellMap "</threads>" [cell, cellName(threads), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax ThreadCellMap [cellCollection, hook(MAP.Map)]
  syntax ThreadCellMap ::= ThreadCellMap ThreadCellMap [assoc, avoid, cellCollection, comm, element(ThreadCellMapItem), function, hook(MAP.concat), unit(.ThreadCellMap), wrapElement(<thread>)]
  syntax ThreadCellMap ::= ThreadCell
  syntax ThreadCellMap ::= "initThreadCell" [function, initializer, noThread]
  syntax ThreadCellMap ::= "ThreadCellMapItem" "(" IdCell "," ThreadCell ")" [format(%5), function, hook(MAP.element)]
  syntax ThreadCellMap ::= ".ThreadCellMap" [function, hook(MAP.unit)]
  syntax ThreadCellFragment ::= "<thread>-fragment" IdCellOpt KCellOpt EnvCellOpt "</thread>-fragment" [cellFragment(ThreadCell)]
  syntax ThreadCell ::= "<thread>" IdCell KCell EnvCell "</thread>" [cell, cellName(thread), format(%1%i%n%2%n%3%n%4%d%n%5), multiplicity(*), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), type(Map)]
  syntax StartupCellOpt ::= StartupCell
  syntax StartupCellOpt ::= "noStartupCell" [cellOptAbsent(StartupCell)]
  syntax StartupCell ::= "initStartupCell" "(" Map ")" [function, initializer, noThread]
  syntax StartupCell ::= "<startup>" K "</startup>" [cell, cellName(startup), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax OutputCellOpt ::= OutputCell
  syntax OutputCellOpt ::= "noOutputCell" [cellOptAbsent(OutputCell)]
  syntax OutputCell ::= "initOutputCell" "(" Map ")" [function, initializer, noThread]
  syntax OutputCell ::= "<output>" List "</output>" [cell, cellName(output), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), stream(stdout)]
  syntax KCellOpt ::= KCell
  syntax KCellOpt ::= "noKCell" [cellOptAbsent(KCell)]
  syntax KCell ::= "initKCell" [function, initializer, noThread]
  syntax KCell ::= "<k>" K "</k>" [cell, cellName(k), format(%1%i%n%2%d%n%3), maincell, org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax InputCellOpt ::= InputCell
  syntax InputCellOpt ::= "noInputCell" [cellOptAbsent(InputCell)]
  syntax InputCell ::= "initInputCell" "(" Map ")" [function, initializer, noThread]
  syntax InputCell ::= "<input>" List "</input>" [cell, cellName(input), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), stream(stdin)]
  syntax IdCellOpt ::= IdCell
  syntax IdCellOpt ::= "noIdCell" [cellOptAbsent(IdCell)]
  syntax IdCell ::= "initIdCell" [function, initializer, noThread]
  syntax IdCell ::= "<id>" Int "</id>" [cell, cellName(id), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax GeneratedTopCellFragment ::= "<generatedTop>-fragment" StartupCellOpt ExternalsCellOpt ThreadsCellOpt InputCellOpt OutputCellOpt "</generatedTop>-fragment" [cellFragment(GeneratedTopCell)]
  syntax GeneratedTopCell ::= "initGeneratedTopCell" "(" Map ")" [function, initializer, noThread]
  syntax GeneratedTopCell ::= "<generatedTop>" StartupCell ExternalsCell ThreadsCell InputCell OutputCell "</generatedTop>" [cell, cellName(generatedTop), format(%1%i%n%2%n%3%n%4%n%5%n%6%d%n%7), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), topcell]
  syntax ExternalsCellOpt ::= ExternalsCell
  syntax ExternalsCellOpt ::= "noExternalsCell" [cellOptAbsent(ExternalsCell)]
  syntax ExternalsCell ::= "initExternalsCell" [function, initializer, noThread]
  syntax ExternalsCell ::= "<externals>" Set "</externals>" [cell, cellName(externals), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax EnvCellOpt ::= EnvCell
  syntax EnvCellOpt ::= "noEnvCell" [cellOptAbsent(EnvCell)]
  syntax EnvCell ::= "initEnvCell" [function, initializer, noThread]
  syntax EnvCell ::= "<env>" Map "</env>" [cell, cellName(env), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax Bool ::= IdCell "in_keys" "(" ThreadCellMap ")" [function, functional, hook(MAP.in_keys)]
  rule initThreadsCell(.KList)=>`<threads>`(#noDots(.KList),#cells(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initThreadCell(.KList)=>`<thread>`(#noDots(.KList),#cells(initIdCell(.KList),initKCell(.KList),initEnvCell(.KList)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initStartupCell(Init)=>`<startup>`(#noDots(.KList),#SemanticCastToK(`project:KItem`(`Map:lookup`(Init,#token("$PGM","KConfigVar")))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initOutputCell(Init)=>`<output>`(#noDots(.KList),`.List`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initKCell(.KList)=>`<k>`(#noDots(.KList),.K,#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initInputCell(Init)=>`<input>`(#noDots(.KList),`.List`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initIdCell(.KList)=>`<id>`(#noDots(.KList),#token("0","Int"),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initGeneratedTopCell(Init)=>`<generatedTop>`(#noDots(.KList),#cells(initStartupCell(Init),initExternalsCell(.KList),initThreadsCell(.KList),initInputCell(Init),initOutputCell(Init)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initExternalsCell(.KList)=>`<externals>`(#noDots(.KList),`.Set`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initEnvCell(.KList)=>`<env>`(#noDots(.KList),`.Map`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
endmodule


module PCL-HOOKS [org.kframework.attributes.Location(Location(56,1,90,9)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k))]
  imports STRING
  imports PCL-SYNTAX
  imports PCL-CONFIGURATION
  syntax Process ::= "#send" "(" Channel "," Exp ")" [klabel(#send), strict(2)]
  syntax Process ::= "#recv" "(" Channel "," Variable ")" [klabel(#recv)]
  syntax Process ::= "#read" "(" Variable ")" [klabel(#read)]
  rule #cells(`<k>`(#noDots(.KList),`out_(_)_PCL-SYNTAX_Process_Id_Exp`(#SemanticCastToChannel(C),#SemanticCastToExp(V))=>`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(#SemanticCastToChannel(C),#SemanticCastToExp(V)),#dots(.KList)),`<externals>`(#noDots(.KList),#SemanticCastToSet(E),#noDots(.KList))) requires `Set:in`(#SemanticCastToChannel(C),#SemanticCastToSet(E)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(71,5,73,20)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(40)]
  rule #cells(`<k>`(#noDots(.KList),`in_(_)_PCL-SYNTAX_Process_Id_Variable`(#SemanticCastToChannel(C),#SemanticCastToVariable(X))=>`#recv(_,_)_PCL-HOOKS_Process_Channel_Variable`(#SemanticCastToChannel(C),#SemanticCastToVariable(X)),#dots(.KList)),`<externals>`(#noDots(.KList),#SemanticCastToSet(E),#noDots(.KList))) requires `Set:in`(#SemanticCastToChannel(C),#SemanticCastToSet(E)) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(65,5,67,20)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(40)]
  rule #cells(`<k>`(#noDots(.KList),`#send(_,_)_PCL-HOOKS_Process_Channel_Exp`(#token("@stdio","Channel"),#SemanticCastToInt(V))=>.K,#dots(.KList)),`<output>`(#dots(.KList),`.List`(.KList)=>`ListItem`(`_+String__STRING-COMMON_String_String_String`(`Int2String(_)_STRING-COMMON_String_Int`(#SemanticCastToInt(V)),#token("\"\\n\"","String"))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(88,5,89,72)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(`<k>`(#noDots(.KList),`#recv(_,_)_PCL-HOOKS_Process_Channel_Variable`(#token("@stdio","Channel"),#SemanticCastToVariable(X))=>`#read(_)_PCL-HOOKS_Process_Variable`(#SemanticCastToVariable(X)),#dots(.KList)),`<output>`(#dots(.KList),`.List`(.KList)=>`ListItem`(#token("\"> \"","String")),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(79,5,80,50)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule #cells(#cells(`<k>`(#noDots(.KList),`#read(_)_PCL-HOOKS_Process_Variable`(#SemanticCastToVariable(X))=>.K,#dots(.KList)),`<input>`(#noDots(.KList),`ListItem`(#SemanticCastToInt(V))=>`.List`(.KList),#dots(.KList))),`<env>`(#noDots(.KList),#SemanticCastToMap(E)=>`Map:update`(#SemanticCastToMap(E),#SemanticCastToVariable(X),#SemanticCastToInt(V)),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(83,5,85,35)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module PCL-SYNTAX [org.kframework.attributes.Location(Location(1,1,35,9)), org.kframework.attributes.Source(Source(/home/bruce/code/scratch/pcl-k/pcl.k))]
  imports INT-SYNTAX
  imports BOOL-SYNTAX
  syntax priority (_)_PCL-SYNTAX_Exp_Exp > -__PCL-SYNTAX_Exp_Exp > _*__PCL-SYNTAX_Exp_Exp_Exp _/__PCL-SYNTAX_Exp_Exp_Exp > _-__PCL-SYNTAX_Exp_Exp_Exp _+__PCL-SYNTAX_Exp_Exp_Exp
  syntax associativity non-assoc -__PCL-SYNTAX_Exp_Exp
  syntax associativity left _/__PCL-SYNTAX_Exp_Exp_Exp
  syntax associativity left _.__PCL-SYNTAX_Process_Process_Process
  syntax associativity left _-__PCL-SYNTAX_Exp_Exp_Exp
  syntax associativity left _+__PCL-SYNTAX_Exp_Exp_Exp
  syntax associativity left _*__PCL-SYNTAX_Exp_Exp_Exp
  syntax Variable ::= r"[A-Z][a-zA-Z]*" [token]
  syntax Program ::= Externals Process
  syntax Process ::= Process "." Process [left]
  syntax Process ::= "stop"
  syntax Process ::= "out" Id "(" Exp ")" [strict]
  syntax Process ::= "let" Variable "=" Exp "{" Process "}" [strict(2)]
  syntax Process ::= "in" Id "(" Variable ")" [strict(1)]
  syntax Process ::= "fresh" Variable "{" Process "}"
  syntax Process ::= "end"
  syntax Process ::= "[" Exp "=" Exp "]" "{" Process "}" [strict(1, 2)]
  syntax Process ::= "(" Process "|" Process ")"
  syntax Process ::= "!" "(" Process ")"
  syntax Id ::= Variable
  syntax Id ::= Channel
  syntax Externals ::= External "" Externals [right, userList(+)]
  syntax Externals ::= ".Externals" [klabel(.List{"___PCL-SYNTAX"}), userList(+)]
  syntax External ::= "external" Channel ";"
  syntax Exp ::= Int
  syntax Exp ::= Id
  syntax Exp ::= Exp "/" Exp [left, strict]
  syntax Exp ::= Exp "-" Exp [left, strict]
  syntax Exp ::= Exp "+" Exp [left, strict]
  syntax Exp ::= Exp "*" Exp [left, strict]
  syntax Exp ::= "-" Exp [non-assoc, strict]
  syntax Exp ::= "(" Exp ")" [bracket, bracketLabel((_)_PCL-SYNTAX_Exp_Exp)]
  syntax Channel ::= r"@?[a-z]+" [token]
  syntax Bool ::= "isKResult" "(" Exp ")" [function, klabel(isKResult), symbol]
endmodule


module PROGRAM-LISTS [org.kframework.attributes.Location(Location(396,1,408,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-K
endmodule


module RECORD-PRODUCTIONS [org.kframework.attributes.Location(Location(417,1,422,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module REQUIRES-ENSURES [org.kframework.attributes.Location(Location(334,1,345,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports BASIC-K
  syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "ensures" Bool [klabel(#ruleEnsures), symbol]
  syntax #RuleBody ::= K
endmodule


module RULE-CELLS [org.kframework.attributes.Location(Location(274,1,284,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports KCELLS
  syntax #OptionalDots ::= "..." [klabel(#dots), symbol]
  syntax #OptionalDots ::= "" [klabel(#noDots), symbol]
endmodule


module RULE-LISTS [org.kframework.attributes.Location(Location(410,1,415,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module RULE-TAG-SYNTAX [org.kframework.attributes.Location(Location(2838,1,2842,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS
  syntax #RuleTag ::= #LowerId [token]
endmodule


module SET [org.kframework.attributes.Location(Location(495,1,607,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BASIC-K
  syntax associativity left _|Set__SET_Set_Set_Set
  syntax associativity left _Set_
  syntax Set [hook(SET.Set), org.kframework.attributes.Location(Location(499,3,499,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Set ::= Set Set [assoc, comm, element(SetItem), format(%1%n%2), function, functional, hook(SET.concat), idem, klabel(_Set_), left, symbol, unit(.Set)]
  syntax Set ::= Set "|Set" Set [function, functional, hook(SET.union), left]
  syntax Set ::= Set "-Set" Set [function, functional, hook(SET.difference), klabel(Set:difference), latex({#1}-_{\it Set}{#2}), symbol]
  syntax Set ::= "intersectSet" "(" Set "," Set ")" [function, functional, hook(SET.intersection), klabel(intersectSet)]
  syntax Set ::= "SetItem" "(" KItem ")" [function, functional, hook(SET.element), klabel(SetItem), symbol]
  syntax Set ::= ".Set" [function, functional, hook(SET.unit), klabel(.Set), latex(\dotCt{Set}), symbol]
  syntax KItem ::= "choice" "(" Set ")" [function, hook(SET.choice), klabel(Set:choice)]
  syntax Int ::= "size" "(" Set ")" [function, functional, hook(SET.size), klabel(size)]
  syntax Bool ::= Set "<=Set" Set [function, functional, hook(SET.inclusion)]
  syntax Bool ::= KItem "in" Set [function, functional, hook(SET.in), klabel(Set:in), symbol]
  rule `_|Set__SET_Set_Set_Set`(#SemanticCastToSet(S1),#SemanticCastToSet(S2))=>`_Set_`(#SemanticCastToSet(S1),`Set:difference`(#SemanticCastToSet(S2),#SemanticCastToSet(S1))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(548,8,548,45)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module SORT-BOOL [org.kframework.attributes.Location(Location(778,1,780,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Bool [hook(BOOL.Bool), org.kframework.attributes.Location(Location(779,3,779,31)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax KBott [org.kframework.attributes.Location(Location(69,3,69,14)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module SORT-PREDICATES [org.kframework.attributes.Location(Location(424,1,429,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/kast.md))]
endmodule


module STDIN-STREAM [org.kframework.attributes.Location(Location(2444,1,2538,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports MAP
  imports LIST
  imports K-REFLECTION
  imports K-IO
  imports INT
  imports BOOL
  syntax StdinCell ::= "initStdinCell" "(" Map ")" [function, initializer, noThread]
  syntax StdinCell ::= "<stdin>" List "</stdin>" [cell, cellName(stdin), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), topcell]
  rule initStdinCell(Init)=>`<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$STDIN","KConfigVar")))))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(`#istream(_)_K-IO_Stream_Int`(`#stdin_K-IO_Int`(.KList)))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#SemanticCastToString(_),#SemanticCastToString(Delimiters))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>`_+String__STRING-COMMON_String_String_String`(#SemanticCastToString(S),`chrChar(_)_STRING-COMMON_String_Int`(`project:Int`(`#getc(_)_K-IO_IOInt_Int`(#SemanticCastToInt(N)))))))),`ListItem`(#token("\"on\"","String"))),`ListItem`(`#istream(_)_K-IO_Stream_Int`(#SemanticCastToInt(N)))),#noDots(.KList)) requires `_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [label(STDIN-STREAM.stdinGetc), org.kframework.attributes.Location(Location(2455,8,2461,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(200), stream]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"String\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(#SemanticCastToString(S)),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [label(STDIN-STREAM.stdinParseString), org.kframework.attributes.Location(Location(2466,8,2471,50)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"Int\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(`String2Int(_)_STRING-COMMON_Int_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S),#token("0","Int"),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S),`_+Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_>Int_`(`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [label(STDIN-STREAM.stdinParseInt), org.kframework.attributes.Location(Location(2476,8,2483,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters)))=>`ListItem`(`#parseKAST(_)_K-REFLECTION_Sort_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S),#token("0","Int"),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S),`_+Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_==String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(Sort),#token("\"K\"","String"))),`_>Int_`(`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [label(STDIN-STREAM.stdinParseArbitrarySort), org.kframework.attributes.Location(Location(2487,8,2495,38)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S),#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_=/=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(Sort),#token("\"String\"","String"))),`_<=Int_`(`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [label(STDIN-STREAM.stdinTrim), org.kframework.attributes.Location(Location(2499,8,2506,39)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  rule `<stdin>`(#noDots(.KList),`_List_`(`.List`(.KList)=>`ListItem`(`#parseInput(_,_)_K-IO_Stream_String_String`(#SemanticCastToString(?Sort),#SemanticCastToString(?Delimiters))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(_)))),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [label(STDIN-STREAM.stdinUnblock), org.kframework.attributes.Location(Location(2524,8,2528,16)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), unblock]
endmodule


module STDOUT-STREAM [org.kframework.attributes.Location(Location(2540,1,2608,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING
  imports MAP
  imports LIST
  imports K-IO
  syntax StdoutCell ::= "initStdoutCell" "(" Map ")" [function, initializer, noThread]
  syntax StdoutCell ::= "<stdout>" List "</stdout>" [cell, cellName(stdout), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), topcell]
  rule initStdoutCell(Init)=>`<stdout>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(`#ostream(_)_K-IO_Stream_Int`(`#stdout_K-IO_Int`(.KList))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#token("\"\"","String")))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(`#ostream(_)_K-IO_Stream_Int`(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(Buffer)=>`_+String__STRING-COMMON_String_String_String`(#SemanticCastToString(Buffer),`Int2String(_)_STRING-COMMON_String_Int`(#SemanticCastToInt(I)))))),`ListItem`(#SemanticCastToInt(I))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [label(STDOUT-STREAM.stdoutBufferInt), org.kframework.attributes.Location(Location(2559,8,2565,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(`#ostream(_)_K-IO_Stream_Int`(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(Buffer)=>`_+String__STRING-COMMON_String_String_String`(#SemanticCastToString(Buffer),`Float2String(_)_STRING-COMMON_String_Float`(#SemanticCastToFloat(F)))))),`ListItem`(#SemanticCastToFloat(F))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [label(STDOUT-STREAM.stdoutBufferFloat), org.kframework.attributes.Location(Location(2549,8,2555,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(`#ostream(_)_K-IO_Stream_Int`(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(Buffer)=>`_+String__STRING-COMMON_String_String_String`(#SemanticCastToString(Buffer),#SemanticCastToString(S))))),`ListItem`(#SemanticCastToString(S))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [label(STDOUT-STREAM.stdoutBufferString), org.kframework.attributes.Location(Location(2569,8,2575,17)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(`#ostream(_)_K-IO_Stream_Int`(#SemanticCastToInt(N)=>`project:Int`(`#write(_,_)_K-IO_K_Int_String`(#SemanticCastToInt(N),#SemanticCastToString(S))~>#SemanticCastToInt(N)))),`ListItem`(#token("\"on\"","String"))),`ListItem`(`#buffer(_)_K-IO_Stream_K`(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S),#token("\"\"","String")) ensures #token("true","Bool") [label(STDOUT-STREAM.stdoutWrite), org.kframework.attributes.Location(Location(2581,8,2587,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(30), stream]
endmodule


module STRING [org.kframework.attributes.Location(Location(1603,1,1607,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING-KORE
  imports STRING-COMMON
endmodule


module STRING-COMMON [org.kframework.attributes.Location(Location(1381,1,1585,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  imports K-EQUAL
  imports INT
  imports FLOAT-SYNTAX
  imports BOOL
  syntax associativity left _==String__STRING-COMMON_Bool_String_String
  syntax associativity left _=/=String__STRING-COMMON_Bool_String_String
  syntax associativity left _+String__STRING-COMMON_String_String_String
  syntax String ::= String "+String" String [function, functional, hook(STRING.concat), latex({#1}+_{\scriptstyle\it String}{#2}), left]
  syntax String ::= "substrString" "(" String "," Int "," Int ")" [function, functional, hook(STRING.substr), klabel(substrString)]
  syntax String ::= "replaceFirst" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceFirst)]
  syntax String ::= "replaceAll" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" String "," String "," String "," Int ")" [function, hook(STRING.replace)]
  syntax String ::= "newUUID" [function, hook(STRING.uuid), impure]
  syntax String ::= "directionalityChar" "(" String ")" [function, hook(STRING.directionality), klabel(directionalityChar)]
  syntax String ::= "chrChar" "(" Int ")" [function, hook(STRING.chr), klabel(chrChar)]
  syntax String ::= "categoryChar" "(" String ")" [function, hook(STRING.category), klabel(categoryChar)]
  syntax String ::= "Int2String" "(" Int ")" [function, functional, hook(STRING.int2string), klabel(Int2String)]
  syntax String ::= "Float2String" "(" Float "," String ")" [function, hook(STRING.floatFormat), klabel(FloatFormat)]
  syntax String ::= "Float2String" "(" Float ")" [function, functional, hook(STRING.float2string), klabel(Float2String)]
  syntax String ::= "Bool2String" "(" Bool ")" [function, functional, klabel(Bool2String)]
  syntax String ::= "Base2String" "(" Int "," Int ")" [function, hook(STRING.base2string), klabel(Base2String)]
  syntax Int ::= "rfindString" "(" String "," String "," Int ")" [function, hook(STRING.rfind), klabel(rfindString)]
  syntax Int ::= "rfindChar" "(" String "," String "," Int ")" [function, hook(STRING.rfindChar), klabel(rfindChar)]
  syntax Int ::= "ordChar" "(" String ")" [function, hook(STRING.ord), klabel(ordChar)]
  syntax Int ::= "lengthString" "(" String ")" [function, functional, hook(STRING.length), klabel(lengthString)]
  syntax Int ::= "findString" "(" String "," String "," Int ")" [function, hook(STRING.find), klabel(findString)]
  syntax Int ::= "findChar" "(" String "," String "," Int ")" [function, hook(STRING.findChar), klabel(findChar)]
  syntax Int ::= "countAllOccurrences" "(" String "," String ")" [function, functional, hook(STRING.countAllOccurrences)]
  syntax Int ::= "String2Int" "(" String ")" [function, hook(STRING.string2int), klabel(String2Int)]
  syntax Int ::= "String2Base" "(" String "," Int ")" [function, hook(STRING.string2base), klabel(String2Base)]
  syntax Float ::= "String2Float" "(" String ")" [function, hook(STRING.string2float), klabel(String2Float)]
  syntax Bool ::= String ">String" String [function, functional, hook(STRING.gt)]
  syntax Bool ::= String ">=String" String [function, functional, hook(STRING.ge)]
  syntax Bool ::= String "==String" String [function, functional, hook(STRING.eq), left]
  syntax Bool ::= String "=/=String" String [function, functional, hook(STRING.ne), left]
  syntax Bool ::= String "<String" String [function, functional, hook(STRING.lt)]
  syntax Bool ::= String "<=String" String [function, functional, hook(STRING.le)]
  syntax Bool ::= "String2Bool" "(" String ")" [function, klabel(String2Bool)]
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1564,8,1564,33)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),`rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S2))),#SemanticCastToInt(I))) requires `_=/=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1563,8,1563,182)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(_))=>#SemanticCastToString(Source) requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1574,8,1575,57)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(Source),#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(Source),`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(ToReplace))),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(Source)))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1571,8,1573,66)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceAll(_,_,_)_STRING-COMMON_String_String_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1583,8,1583,154)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(_),#SemanticCastToString(_),#token("0","Int"))=>#SemanticCastToString(Source) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1582,8,1582,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),#SemanticCastToInt(Count))=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(Source),#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(Source),`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(ToReplace))),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(Source))),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`_-Int_`(#SemanticCastToInt(Count),#token("1","Int")))) requires `_>Int_`(#SemanticCastToInt(Count),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1578,8,1581,30)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1562,8,1562,32)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),#token("-1","Int")),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S2))),#SemanticCastToInt(I)),`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S2))),#SemanticCastToInt(I)),#token("-1","Int")),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(S1),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(S2),#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(S2))),#SemanticCastToInt(I))))) requires `_=/=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1561,8,1561,431)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(#SemanticCastToString(Source),`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(ToCount))),`lengthString(_)_STRING-COMMON_Int_String`(#SemanticCastToString(Source))),#SemanticCastToString(ToCount))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1568,8,1569,60)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1566,8,1567,59)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_>String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_<String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S2),#SemanticCastToString(S1)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1558,8,1558,52)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_>=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1559,8,1559,63)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_==String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1537,8,1537,65)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_<=String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S2),#SemanticCastToString(S1))) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1557,8,1557,63)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"true\"","String"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1463,8,1463,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"false\"","String"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1464,8,1464,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("true","Bool"))=>#token("\"true\"","String") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1457,8,1457,36)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("false","Bool"))=>#token("\"false\"","String") requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1458,8,1458,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-KORE [kore, org.kframework.attributes.Location(Location(1595,1,1601,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  imports STRING-COMMON
  imports K-EQUAL
  rule `_==K_`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_==String__STRING-COMMON_Bool_String_String`(#SemanticCastToString(S1),#SemanticCastToString(S2)) requires #token("true","Bool") ensures #token("true","Bool") [org.kframework.attributes.Location(Location(1599,8,1599,49)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1376,1,1379,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1377,3,1377,37)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(880,1,883,9)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(881,3,881,28)), org.kframework.attributes.Source(Source(/home/bruce/code/k/k-distribution/target/release/k/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
endmodule